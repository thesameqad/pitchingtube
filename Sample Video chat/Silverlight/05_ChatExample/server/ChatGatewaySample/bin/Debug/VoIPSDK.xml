<?xml version="1.0"?>
<doc>
  <assembly>
    <name>VoIPSDK</name>
  </assembly>
  <members>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.Accept">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.Accept(Ozeki.VoIP.Media.CallType)">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.Start">
      <summary>
            Start the call process.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.Hold">
      <summary>
            Hold the call.
            </summary>
      <remarks>
            If the call is held than will be unheld and vica versa.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.HangUp">
      <summary>
            Hang Up the call.
            </summary>
      <remarks>
            If the call is ringing then cancels else stops.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.Reject">
      <summary>
            Reject incoming call object. 
            </summary>
      <remarks>
            If the call is not incoming one, the Reject action has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.ForwardCall(System.String)">
      <summary>
            Forward the incoming call to another phone device.
            </summary>
      <param name="forwardTo">The other phone to that the call is frowarded</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.BlindTransfer(System.String)">
      <summary>
            Transfer the call to another phone device.
            A blind transfer is defined as a transfer made without notifying the destination party before transferring the call.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.AttendedTransfer(Ozeki.VoIP.ICall)">
      <summary>
            Transfer the call to another phone device.
            An attended transfer is a transfer made after notifying the destination party of the transfer.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.GetVoIPMediaFormats">
      <summary>
            Get the list of media formats
            </summary>
      <remarks>
      </remarks>
      <returns>The list of media formats</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.StartDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Start some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be emitted.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.StopDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Stop some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be stopped.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.SendMediaData(System.Int32,Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Sends raw media data with media type.
            </summary>
      <param name="mediaFormatID">The identifier of the format of the media data.</param>
      <param name="mediaData">The given raw data.</param>
      <remarks>
            Sends some media data on the phone call represented as PCM data in byte array
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.ModifyCallType(Ozeki.VoIP.Media.CallType)">
      <summary>
            Modifies the media used during the call.
            </summary>
      <param name="callType">The type of the call. It can be audio, video or audiovideo</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.SendInfo(System.String,System.String,System.String)">
      <summary>
            Sends info method to the other party.
            </summary>
      <param name="mimeType">The type of the info message</param>
      <param name="subMimeType">The subtype of the info message</param>
      <param name="contents">The content of the info message</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneCallWrapper.SendInstantMessage(Ozeki.VoIP.MimeType,System.String)">
      <summary>
            Sends Message to the other party.
            </summary>
      <param name="mimeType">The type of the message. The type can be plain text, DTMF or SDP</param>
      <param name="contents">The content of the message</param>
    </member>
    <member name="P:Ozeki.VoIP.SDK.PhoneCallWrapper.ReasonOfState">
      <summary>
            The human readable reason of state of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SDK.PhoneCallWrapper.SupportedMediaTypes">
      <summary>
            Gets the supported media types.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneLineWrapper.Dispose">
      <summary>
            Dispose the phoneline object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneLineWrapper.SendOptionsMessage(System.String)">
      <summary>
            Sends SIP Options method.
            </summary>
      <param name="recipient">Receiver of the options message.</param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.PhoneLineWrapper.SendOutofDialogInstantMessage(System.String,System.String)">
      <summary>
            Sends an out of dialog instant message to SIP user agent.
            </summary>
      <param name="recepient">
      </param>
      <param name="content">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.SDK.PhoneLineWrapper.PhoneCalls">
      <summary>
            Phonecalls on the line.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SDK.ISoftPhone">
      <summary>
            SoftPhone interface
            </summary>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception</exception>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.Close">
      <summary>
            Close the softphone object.
            </summary>
      <remarks>
            This method closes the ISoftphone object and frees the resources it used.
            You need tu unsubscribe from the IPhoneCallListener and IPhoneLineListener objects directly.
            After calling this method the ISoftphone object cannot be used.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreateCallObject(Ozeki.VoIP.IPhoneLine,System.String)">
      <summary>
            Call a number.
            </summary>
      <param name="iline">The relative phone line object to the created phone call object.</param>
      <param name="dial">The phone number to dial.</param>
      <returns>The created phone call.</returns>
      <remarks>
            It creates an IPhoneCall object to the phone line that is specified by the first parameter.
            The call can be started by calling the Start() method. In this case the call state
            will be first Created then Ringing. 
            If you specify the listener parameter, it is automaically attached to the created IPhoneCall object.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreateCallObject(Ozeki.VoIP.IPhoneLine,System.String,Ozeki.VoIP.Media.CallType)">
      <summary>
            Call a number.
            </summary>
      <param name="iline">The relative phone line object to the created phone call object.</param>
      <param name="dial">The phone number to dial.</param>
      <param name="callType">Media types used for the phone call. (It can be modified during the call.)</param>
      <returns>The created phone call.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreateCallObject(Ozeki.VoIP.IPhoneLine,System.String,Ozeki.VoIP.Media.CallType,Ozeki.VoIP.DialInfo)">
      <summary>
            Call a number.
            </summary>
      <param name="iline">The relative phone line object to the created phone call object.</param>
      <param name="dial">The phone number to dial.</param>
      <param name="callType">Media types used for the phone call. (It can be modified during the call.)</param>
      <param name="from">Sender information</param>
      <returns>The created phone call.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount)">
      <summary>
            Create one phoneline object for SIPAccount with UDP, automatic NAT settings and without SRTP support.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <returns>The created phone line.</returns>
      <remarks>
            It creates a communication channel for the SIP server specified by the port number in the
            SIP account. This is the software model of a phisical phone line that is necessary
            for all phone calls.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.TransportType)">
      <summary>
            Create one phoneline object for SIPAccount without SRTP support an automatic NAT settings.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <param name="transportType">Protocol used for SIP communication.</param>
      <returns>The created phone line.</returns>
      <remarks>
            It creates a communication channel for the SIP server specified by the port number in the
            SIP account. This is the software model of a phisical phone line that is necessary
            for all phone calls.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.TransportType,Ozeki.VoIP.SRTPMode)">
      <summary>
            Create one phoneline object for SIPAccount.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <param name="transportType">Protocol used for SIP communication.</param>
      <returns>The created phone line.</returns>
      <remarks>
            It creates a communication channel for the SIP server specified by the port number in the
            SIP account. This is the software model of a phisical phone line that is necessary
            for all phone calls.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.Nat.NatConfiguration)">
      <summary>
            Create one phoneline object for SIPAccount with UDP and without SRTP support.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <param name="natSettings">NAT settings.</param>
      <returns>The created phone line.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.Nat.NatConfiguration,Ozeki.Network.TransportType)">
      <summary>
            Create one phoneline object for SIPAccount without SRTP support.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <param name="natSettings">NAT settings.</param>
      <param name="transportType">Protocol used for SIP communication.</param>
      <returns>The created phone line.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.Nat.NatConfiguration,Ozeki.Network.TransportType,Ozeki.VoIP.SRTPMode)">
      <summary>
            Create one phoneline object for SIPAccount.
            </summary>
      <param name="SIPAccount">SIP account for registration or creating phone line.</param>
      <param name="natSettings">NAT settings.</param>
      <param name="transportType">Protocol used for SIP communication.</param>
      <returns>The created phone line.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.RegisterPhoneLine(Ozeki.VoIP.IPhoneLine)">
      <summary>
            Start registration process on SIP Registrar/Proxy.
            </summary>
      <param name="phoneLine">The phoneline object for registration.</param>
      <remarks>
            You always need to register the phone line in the Softphone object and to the SIP server.
            The IPhoneLine object can only be useb after these registrations. The line state will be
            NoRegNeeded, if you communicate with a simple SIP tool and RegistrationSucceeded in case of 
            communication with a SIP server. The registration is necessary for the SIP client that it could be
            called by others.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.UnregisterPhoneLine(Ozeki.VoIP.IPhoneLine)">
      <summary>
            Unregistration request for the phoneline object from SIP Registrar/Proxy.
            </summary>
      <param name="phoneLine">The phoneline object for unregistration.</param>
      <remarks>
            If you do not want to use the communication channel any mors, you should unregister from the SIP server
            with calling this method. If the listener parameter is not null, the method will try to
            detach it from the line.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.BeginNatDiscovery(System.String,Ozeki.Network.Nat.NatDiscovery.NatDiscoveryCallback)">
      <summary>
            Begins the NAT discovery process using the default STUN server (stun.ozekiphone.com).
            </summary>
      <param name="localAddress">Address of the local interface.</param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.BeginNatDiscovery(System.String,System.String,Ozeki.Network.Nat.NatDiscovery.NatDiscoveryCallback)">
      <summary>
            Begins the NAT discovery process.
            </summary>
      <param name="localAddress">Address of the local interface.</param>
      <param name="stunServerAddress">Address of the STUN server.</param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.SetSIPMessageManipulator(Ozeki.VoIP.SIP.ISIPMessageManipulator)">
      <summary>
            Set the SIP message manipulator object in the engine.
            </summary>
      <param name="manipulator">The manipulator itself.</param>
      <remarks>
            You can directly manipulate the SIP messages' texts with an object that implements the ISIPMessageManipulator
            interface. You can dinamically modify the manipulation by defining more manipulators.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.EnableCodec(System.Int32)">
      <summary>
            Enables a codec.
            </summary>
      <param name="payload">The payload identifier of the codec.</param>
      <remarks>
            You can enable and disable certain codecs with expicit commands. You need to identify the codec with the payloadtype.
            This method enables the codec with the payloadtype specified by the parameter. If the codec was enabled before
            this method will do nothing. If the codec was disabled before calling this method, after this it will be enabled.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.DisableCodec(System.Int32)">
      <summary>
            Disables a codec.
            </summary>
      <param name="payload">The payload identifier of the codec.</param>
      <remarks>
            You can enable and disable certain codecs with expicit commands. You need to identify the codec with the payloadtype.
            This method disables the codec with the payloadtype specified by the parameter. If the codec was disabled before
            this method will do nothing. If the codec was enabled before calling this method, after this it will be disabled.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.ISoftPhone.SetSDPMessageManipulator(Ozeki.VoIP.SDP.ISDPMessageManipulator)">
      <summary>
            Set the SDP message manipulator object in the engine.
            </summary>
      <param name="manipulator">The manipulator itself.</param>
      <remarks>
            You can also manipulate the SDP messages directly in this system by using an object
            that implements the ISDPMessageManipulator interface. 
            You can dinamically modify the manipulation process with defining more manipulators.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.SDK.ISoftPhone.Codecs">
      <summary>
            List of available codecs.
            </summary>
      <returns>The list of the codecs.</returns>
      <remarks>
            The softphone media communication uses codecs that can code and decode different media information types.
            The codecs have a number for identification called payloadtype, and the codec is identified
            on the RTP channel by this.
            The list contains three-element tuples that consist of the payloadtype, the codec name and
            the information about that the codec is permitted or not.
            </remarks>
    </member>
    <member name="E:Ozeki.VoIP.SDK.ISoftPhone.IncomingCall">
      <summary>
            Incoming call event.
            </summary>
      <remarks>
            This event invokes when an incoming call request arrives to the softphone.
            The event stores an IPhoneCall object that identifies the line of the incoming call.
            The call handling can be done through the IPhoneCall object.
            </remarks>
    </member>
    <member name="T:Ozeki.VoIP.SDK.Protection.ProtectedPhoneCall">
      <summary>
            Az összes hívás ugyanazzal a típussal megy vissza, így nem lehet megállapítani, hogy melyik volt a demo phoneCall
            NOTE: Azert van a base mindig elobb mint az esemeny, mert az esemeny hatasara dobhatok direkt exception-t, de azt akarom, hogy a hivas normalisan lefusson
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDK.Protection.ProtectedSoftPhone.CreatePhoneLine(Ozeki.VoIP.SIPAccount,Ozeki.Network.Nat.NatConfiguration,Ozeki.Network.TransportType,Ozeki.VoIP.SRTPMode)">
      <summary>
            Create one phoneline object for SIPAccount.
            </summary>
      <param name="sipAccount">SIP account for registration or creating phone line.</param>
      <param name="natSettings">NAT settings.</param>
      <param name="transportType">Protocol used for SIP communication.</param>
      <returns>The created phone line.</returns>
    </member>
    <member name="T:Ozeki.VoIP.SDK.NewSoftphone">
      <summary>
            Azert nem implementalja az ISoftPhone interface-t, hogy az obfuscalt kódban csak a ProtectedSoftphone nál látszódjon
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new SoftPhone
            </summary>
      <param name="localAddress">Local ip address or domain name.</param>
      <param name="minPortRange">Lowest port number.</param>
      <param name="maxPortRange">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Creates a new SoftPhone
            </summary>
      <param name="localAddress">Local ip address or domain name.</param>
      <param name="minPortRange">Lowest port number.</param>
      <param name="maxPortRange">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <param name="logFile">
      </param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new SoftPhone
            </summary>
      <param name="localAddress">Local ip address or domain name.</param>
      <param name="minPort">Lowest port number.</param>
      <param name="maxPort">Highest port number.</param>
      <param name="sipPort">SIP listen port</param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.String,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Creates a new SoftPhone
            </summary>
      <param name="localAddress">Local ip address or domain name.</param>
      <param name="minPort">Lowest port number.</param>
      <param name="maxPort">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <param name="logFile">
      </param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new SoftPhone on all network interfaces.
            </summary>
      <param name="minPort">Lowest port number.</param>
      <param name="maxPort">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Creates a new SoftPhone on all network interfaces.
            </summary>
      <param name="minPort">Lowest port number.</param>
      <param name="maxPort">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <param name="logFile">
      </param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.CreateSoftPhone(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Creates a new SoftPhone
            </summary>
      <param name="localAddress">Local ip address or domain name.</param>
      <param name="minPort">Lowest port number.</param>
      <param name="maxPort">Highest port number.</param>
      <param name="sipPort">SIP listen port.</param>
      <param name="logFile">
      </param>
      <param name="isFixedIP">Indicates whether a fixed local IP address is used.</param>
      <returns>
      </returns>
      <exception cref="T:Ozeki.Common.Exceptions.LicenseException">Throws a license exception, when license is not appropiate.</exception>
      <remarks>
            The softphone needs a port range from where you can get ports for multiple calls and registrations.
            Every registration, every call needs unique ports.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.GetLocalIP">
      <summary>
            Detects the local IP address.
            </summary>
      <returns>Detected IP address.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDK.SoftPhoneFactory.GetAddressList">
      <summary>
            Gets the list of local IP addresses.
            </summary>
      <returns>List of local IP addresses.</returns>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneCallAttachable">
      <summary>
            Defines methods to attach and detach the object to a <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallAttachable.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the object to a <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            </summary>
      <param name="call">The phone call object.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallAttachable.Detach">
      <summary>
            Detaches the object from the attached call.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.CallError">
      <summary>
            Call errors during the setup state of a call.
            </summary>
      <remarks>
            Fault cases for the callee are NotFound, Unavailable.
            These values depends on the situation and the used VoIP technology.
            </remarks>
    </member>
    <member name="F:Ozeki.VoIP.CallError.UnknownError">
      <summary>
            Some error, details can be found in SIP message.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.NoResponse">
      <summary>
            No response received to a request (e.g. BYE) from the other party.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.SRTPError">
      <summary>
            Incorrect media protocol in SDP.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.BadRequest">
      <summary>
            The request could not be understood due to malformed syntax.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.Forbidden">
      <summary>
            The server understood the request, but is refusing to fulfill it.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.NotFound">
      <summary>
            The server has definitive information that the user does not exist at the domain specified in the Request-URI.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.RequestTimedOut">
      <summary>
            The server could not produce a response within a suitable amount of time.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.Gone">
      <summary>
            The requested resource is no longer available at the server and no forwarding address is known.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.UnsupportedMediaType">
      <summary>
            The server is refusing to service the request because the message body of the request is in a format not supported by the server for the requested method.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.TemporarilyUnavailable">
      <summary>
            The callee's end system was contacted successfully but the callee is currently unavailable.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.AddressIncomplete">
      <summary>
            The server received a request with a Request-URI that was incomplete.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.BusyHere">
      <summary>
            The callee's end system was contacted successfully, but the callee is currently not willing or able to take additional calls at this end system.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.NotAcceptableHere">
      <summary>
            The session description such as the bandwidth, addressing type or codecs were not acceptable.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.RequestPending">
      <summary>
            There is a pending request within the same call.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.ServerInternalError">
      <summary>
            The server encountered an unexpected condition that prevented it from fulfilling the request.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.NotImplemented">
      <summary>
            The server does not support the functionality required to fulfill the request.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.BadGateway">
      <summary>
            The server, while acting as a gateway or proxy, received an invalid response from the downstream server it accessed in attempting to fulfill the request.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.ServiceUnavailable">
      <summary>
            The server is temporarily unable to process the request due to a temporary overloading or maintenance of the server.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.ServerTimeout">
      <summary>
            The server did not receive a timely response from an external server it accessed in attempting to process the request.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.MessageTooLarge">
      <summary>
            The server was unable to process the request since the message length exceeded its capabilities.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.BusyEverywhere">
      <summary>
            The callee's end system was contacted successfully but the callee is busy and does not wish to take the call at this time.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.GlobalFailureDecline">
      <summary>
            The callee's machine was successfully contacted but the user explicitly does not wish to or cannot participate.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.DoesNotExistAnywhere">
      <summary>
            The server has authoritative information that the user does not exist anywhere.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.GlobalFailureNotAcceptable">
      <summary>
            The session description such as the bandwidth, addressing type or codecs were not acceptable.
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallError.GlobalFailure">
      <summary>
            The server has definitive information about a particular user, not just the particular instance.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.DialInfo">
      <summary>
            Stores dialing information about the other communication client
            in both incoming and outgoing calls
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of DialInfo
            </summary>
      <param name="displayName">The displayed name of the peer</param>
      <param name="userName">The user name of the peer</param>
      <param name="address">The address of the PBX the peer has registered to</param>
    </member>
    <member name="M:Ozeki.VoIP.DialInfo.#ctor(System.String,System.String,System.String,Ozeki.VoIP.AddrSpecType)">
      <summary>
            Initializes a new instance of DialInfo
            </summary>
      <param name="displayName">The displayed name of the peer</param>
      <param name="userName">The user name of the peer</param>
      <param name="address">The address of the PBX the peer has registered to</param>
      <param name="addrSpecType">The specification type of the address</param>
    </member>
    <member name="M:Ozeki.VoIP.DialInfo.ToString">
      <summary>
            Gets the string representation of the current DialInfo object
            </summary>
      <returns>The string that represents the current DialInfo object</returns>
    </member>
    <member name="P:Ozeki.VoIP.DialInfo.DisplayName">
      <summary>
            Gets the displayed name of the peer
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.DialInfo.UserName">
      <summary>
            Gets the user name of the peer
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.DialInfo.Address">
      <summary>
            Gets the address of the PBX the peer has registered to
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.DialInfo.AddrSpecType">
      <summary>
            Gets the specification type of the address
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.CallState">
      <summary>
            States of an arbitrary call object.
            </summary>
      <remarks>
            This is a partially ordered set. During the call process a call object
            can hold states of the CallState enum. When a call is created
            by the softphone it has the Setup state, if some negative answer
            comes from the callee, the states changes into SetupError.
            When everything goes fine, the state changes into Ringing.
            From Ringing it can enter InCall, Rejected or Cancelled states.
            If someone picks up the phone the call enters InCall state.
            InCall state just can changes into Completed state. From Ringing
            it also can change into Rejected or Cancelled state.
            The state is Rejected when the callee reject the call.
            The state is Cancelled if the caller changes his mind 
            and hangs up the phone.
            </remarks>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Created">
      <summary>
            The Call object has been created.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Setup">
      <summary>
            The Call has started.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Error">
      <summary>
            Some error happened, while initializing the call.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Ringing">
      <summary>
            Ringing.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Queued">
      <summary>
            The called party is temporarily unavailable, but the server has decided to queue the call rather than reject it.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.RingingWithEarlyMedia">
      <summary>
            Ringing with early media.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.LocalHeld">
      <summary>
            Local call party does not want to talk for a while.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.RemoteHeld">
      <summary>
            Remote call party does not want to talk for a while.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Transferring">
      <summary>
            Transferring the call to another client
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.InCall">
      <summary>
            Call parties are talking.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Completed">
      <summary>
            The call is hung up by someone.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Rejected">
      <summary>
            The call is rejected by someone.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Cancelled">
      <summary>
            The call is cancelled by someone.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Busy">
      <summary>
            The call is signaled as busy by the other side.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.CallState.Forwarded">
      <summary>
            The call is forwarded by the callee.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.CallStateHelper">
      <summary>
            Tool to determine that the call state is in which period.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsInSetupCall(Ozeki.VoIP.CallState)">
      <summary>
            Is the call state is in setup period?
            </summary>
      <param name="state">The call state itself.</param>
      <returns>Returns true if the call state is in the setup period otherwise returns false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsRinging(Ozeki.VoIP.CallState)">
      <summary>
            Is the call ringing?
            <param name="state">The call state itself</param><returns>Returns true if the call state is Ringing, otherwise returns false.</returns></summary>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsInCall(Ozeki.VoIP.CallState)">
      <summary>
            Is the call state is in active period?
            </summary>
      <param name="state">The call state itself.</param>
      <returns>Returns true if the call state is in the setup period otherwise returns false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsHeld(Ozeki.VoIP.CallState)">
      <summary>
            It the call is held by someone?
            </summary>
      <param name="state">The call state itself.</param>
      <returns>Returns true if the call is held, otherwise returns false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsCallEnded(Ozeki.VoIP.CallState)">
      <summary>
            Is the call is already ended?
            </summary>
      <param name="state">The call state itself.</param>
      <returns>Returns true if the call state is already ended otherwise retuens false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.CallStateHelper.IsMediaCommunication(Ozeki.VoIP.CallState)">
      <summary>
            Is the media communication started?
            </summary>
      <param name="state">The call state itself.</param>
      <returns>Returns true if the media communication started, othewise returns false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.ICall.Accept">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.Accept(Ozeki.VoIP.Media.CallType)">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.Hold">
      <summary>
            Hold the call.
            </summary>
      <remarks>
            If the call is held than will be unheld and vica versa.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.HangUp">
      <summary>
            Hang Up the call.
            </summary>
      <remarks>
            If the call is ringing then cancels else stops.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.Reject">
      <summary>
            Reject incoming call object. 
            </summary>
      <remarks>
            If the call is not incoming one, the Reject action has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.ForwardCall(System.String)">
      <summary>
            Forward the incoming call to another phone device.
            </summary>
      <param name="forwardTo">The other phone to that the call is frowarded</param>
    </member>
    <member name="M:Ozeki.VoIP.ICall.BlindTransfer(System.String)">
      <summary>
            Transfer the call to another phone device.
            A blind transfer is defined as a transfer made without notifying the destination party before transferring the call.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.ICall.AttendedTransfer(Ozeki.VoIP.ICall)">
      <summary>
            Transfer the call to another phone device.
            An attended transfer is a transfer made after notifying the destination party of the transfer.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.ICall.GetVoIPMediaFormats">
      <summary>
            Get the list of media formats
            </summary>
      <remarks>
      </remarks>
      <returns>The list of media formats</returns>
    </member>
    <member name="M:Ozeki.VoIP.ICall.StartDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Start some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be emitted.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.StartDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Start some DTMF event.
            </summary>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.StopDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Stop some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be stopped.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.StopDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Stop some DTMF event.
            </summary>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.SendMediaData(System.Int32,Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Sends raw media data with media type.
            </summary>
      <param name="MediaFormatID">The identifier of the format of the media data.</param>
      <param name="mediaData">The given raw data.</param>
      <remarks>
            Sends some media data on the phone call represented as PCM data in byte array
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.ICall.ModifyCallType(Ozeki.VoIP.Media.CallType)">
      <summary>
            Modifies the media used during the call.
            </summary>
      <param name="callType">The type of the call. It can be audio, video or audiovideo</param>
    </member>
    <member name="M:Ozeki.VoIP.ICall.SendInfo(System.String,System.String,System.String)">
      <summary>
            Sends info method to the other party.
            </summary>
      <param name="mimeType">The type of the info message</param>
      <param name="subMimeType">The subtype of the info message</param>
      <param name="contents">The content of the info message</param>
    </member>
    <member name="M:Ozeki.VoIP.ICall.SendInstantMessage(Ozeki.VoIP.MimeType,System.String)">
      <summary>
            Sends Message to the other party.
            </summary>
      <param name="mimeType">The type of the message. The type can be plain text, DTMF or SDP</param>
      <param name="contents">The content of the message</param>
    </member>
    <member name="P:Ozeki.VoIP.ICall.CallState">
      <summary>
            Gets the state of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.DialInfo">
      <summary>
            Gets the other party's number.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.TransferInfo">
      <summary>
            Gets information about the call transfer
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.CallID">
      <summary>
            Gets the unique identifier of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.IsIncoming">
      <summary>
            Gets if the call is an incoming call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.PlainMediaData">
      <summary>
            Receives media data decoded as pcm or as plain compressed format.
            </summary>
      <remarks>
            When a user switches the PlainMediaData on, the phonecall starts to
            emit data that received. 
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.ICall.ReasonOfState">
      <summary>
            The human readable reason of state of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.ICall.SupportedMediaTypes">
      <summary>
            Gets the supported media types.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.CallErrorOccured">
      <summary>
            Call Error event
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.CallStateChanged">
      <summary>
            The state of call has changed.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.DtmfReceived">
      <summary>
            Some DTMF has finished.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.DtmfStarted">
      <summary>
            Some DTMF event has started.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.MediaDataReceived">
      <summary>
            Some decoded media data has arrived.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.PlainMediaDataReceived">
      <summary>
            Some encoded media data has arrived.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.InfoDataReceived">
      <summary>
            Info data has arrived.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.InstantMessageDataReceived">
      <summary>
            Instant message data has received.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.InstantMessageSendError">
      <summary>
            Indicates the possible errors while It is trying to send Instant message.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.SessionChanged">
      <summary>
            Occurs when the properties of the media channels has changed.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.TransferStateChanged">
      <summary>
            Occurs when the transfer state changed.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.ICall.MediaDescriptionChanged">
      <summary>
            The event handler for media description change
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneCall">
      <summary>
            Phone call interface.
            </summary>
      <remarks>
            The interface that represents the phone call. The phone call stores the phone line,
            the number of the remote party, the information about that it is an incoming call or not.
            The events that are defined in this interface inform the system about the
            errors that result the end of the call, the state change of the call, the DTMF signals
            arriving from the remote end and the media packages sent from the remote end.
            The call control is also defined in this interface. If the call is an incoming call, you
            can accept or reject it. The outgoing call can be started, ended, cancelled, held with the methods
            that are also defined here. The sending capability of DTMF signals and media packets are 
            also defined in the IPhoneCall interface.
            The call supports more media dtat format according to the codecs that are used during the call.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCall.Start">
      <summary>
            Start the call process.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneCall.SessionID">
      <summary>
            Gets the ID of the call object.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneCall.PhoneLine">
      <summary>
            Gets the correspondent phone line.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneCallListener">
      <summary>
            Phone call listener behavior.
            </summary>
      <remarks>
             The phone call listener object must provide an event handler function for changes of call state.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.DtmfStarted(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,System.Int32}})">
      <summary>
            DTMF started signal handler.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.DtmfReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfSignal}})">
      <summary>
            DTMF signal handler.
            </summary>
      <param name="sender">The call object.</param>
      <param name="e">Plain DTMF signal.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.CallErrorOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallError})">
      <summary>
            Event handler for call errors.
            </summary>
      <param name="sender">The call object.</param>
      <param name="e">The occured call error.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.CallStateChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallState})">
      <summary>
            The state of call has changed.
            </summary>
      <param name="sender">The call object.</param>
      <param name="e">The new call state.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.MediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VoIPMediaData})">
      <summary>
            Some media data has arrived.
            </summary>
      <param name="sender">The call object.</param>
      <param name="e">PCM raw media data.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.PlainMediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.EncodedMediaData})">
      <summary>
            Some encoded media data has arrived.
            </summary>
      <param name="sender">The call object.</param>
      <param name="e">Encoded media data.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListener.MediaDescriptionChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo}})">
      <summary>
      </summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneCallListenerCombinator">
      <summary>
            Combines an arbitrary phone call object with its listener.
            </summary>
      <remarks>
            The IPhoneCallListener object can be subscribed and unsubscribed for its
            events by using the static extensions defined in the IPhoneCallListenerCombinator class.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListenerCombinator.AttachListener(Ozeki.VoIP.ICall,Ozeki.VoIP.IPhoneCallListener)">
      <summary>
            Attaches a PhoneCallListener object to the given call.
            </summary>
      <param name="call">The call to observe.</param>
      <param name="listener">The listener.</param>
      <returns>The call itself.</returns>
      <remarks>
            Attaches all listener function to events of IPhoneCall object properly.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneCallListenerCombinator.DetachListener(Ozeki.VoIP.ICall,Ozeki.VoIP.IPhoneCallListener)">
      <summary>
            Detaches a PhoneCallListener object from the given call.
            </summary>
      <param name="call">The call.</param>
      <param name="listener">The listener.</param>
      <returns>The call itself.</returns>
      <remarks>
            Detaches all listener function to events of IPhoneCall object properly.
            </remarks>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneLine">
      <summary>
            PhoneLine abstraction.
            </summary>
      <remarks>
            In SIP communication the call is made through a session. The phone line in a VoIP
            communication is an end-point that can be seen and reached by others. Technically the phone line
            is a SIP account that is used in the SIP Registrar server.
            After the login the SIP Registrat Server stores the communication address you have set
            and the other registered clients can call you.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLine.SubscribeToMWI">
      <summary>
            Subscribes the phone line to Message Waiting Indication.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLine.UnsubscribeFromMWI">
      <summary>
            Unsubscribes the phone line from Message Waiting Indication.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLine.Dispose">
      <summary>
            Dispose the phoneline object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLine.SendOptionsMessage(System.String)">
      <summary>
            Sends SIP Options method.
            </summary>
      <param name="recipient">Receiver of the options message.</param>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLine.SendOutofDialogInstantMessage(System.String,System.String)">
      <summary>
            Sends an out of dialog instant message to SIP user agent.
            </summary>
      <param name="recipient">
      </param>
      <param name="content">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.DoNotDisturb">
      <summary>
            Do Not Disturb functionality.
            </summary>
      <remarks>
            You can get and set the Do Not Disturb function on a phone line.
            If this property is true, the SoftPhone will automatically reject all incoming calls.
            Tf the property is false the IncomingCall event of the SoftPhone will be invoked. This
            event stores the Call object of the incoming call that can be accepted or rejected with the proper methods.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.AutoAnswer">
      <summary>
            Auto-answer functionality.
            </summary>
      <remarks>
            If the AutoAnswer property is true the SoftPhone will automatically accept all incoming calls,
            if it is false the SoftPhone will wait for an Accept() or Reject() method call for accepting or rejecting
            the incoming call.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.ExpirationTime">
      <summary>
            Registration time amount.
            </summary>
      <remarks>
            After the phone line registration the server sends an expiraton time that shown
            for how much time the server will store the address of the client.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.PhoneCalls">
      <summary>
            Phonecalls on the line.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.MessageSummary">
      <summary>
            Message summary information.
            </summary>
      <remarks>
            If no information is available, the object is null.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.RegisteredInfoReason">
      <summary>
            The text representation of reason of state change.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.RegisteredInfo">
      <summary>
            The actual state of the phoneline.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.SIPAccount">
      <summary>
            The associated SIPAccount.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.TransportType">
      <summary>
            Gets the type of the transport.
            </summary>
      <value>
            The type of the transport.
            </value>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.SRTPMode">
      <summary>
            SRTP policy (none, perfer, force)
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.IPhoneLine.NatSettings">
      <summary>
            Gets the NAT configuration of the phone line.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.IPhoneLine.PhoneLineStateChanged">
      <summary>
            The state of the phoneline has changed.
            </summary>
      <remarks>
            This event occures when the state of the phone line changes. This shows if the
            registration is succeeded or not.
            </remarks>
    </member>
    <member name="E:Ozeki.VoIP.IPhoneLine.MessageSummaryReceived">
      <summary>
            Message summary information has received.
            </summary>
      <remarks>
            When a notification about some waiting messages arrives from the PBX, this event will going to occure.
            ReceiveMessageIndication need to be enable to receive this event.
            </remarks>
    </member>
    <member name="E:Ozeki.VoIP.IPhoneLine.OutofDialogInstantMessageReceived">
      <summary>
            Out of dialog instant message has received.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneLineListener">
      <summary>
            Phone line listener behavior.
            </summary>
      <remarks>
            This interface needs to be implemented in a class that wants to be notified abuot
            the state changes of the phone line. This should be subscribed for the only event of the phone line.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLineListener.PhoneLineInformation(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.PhoneLineState})">
      <summary>
            Handles the state changing of line.
            </summary>
      <param name="sender">The phone line object.</param>
      <param name="e">The new state.</param>
      <remarks>
            This event occurs when the phone line state changes as a result of the registartion or registartion timeout.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLineListener.MessageSummaryOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.MessageSummary.VoIPMessageSummary})">
      <summary>
            Handles message summaries sent by the server
            </summary>
      <param name="sender">The phone line object.</param>
      <param name="e">The received message summary.</param>
    </member>
    <member name="T:Ozeki.VoIP.IPhoneLineListenerCombinator">
      <summary>
            Combines an arbitrary phone line object with its listener.
            </summary>
      <remarks>
            These extensions provide the possibility of subscribtion an unsubscribtion for the events
            defined in the IPhoneLine interface.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLineListenerCombinator.AttachListener(Ozeki.VoIP.IPhoneLine,Ozeki.VoIP.IPhoneLineListener)">
      <summary>
            Attaches a PhoneLineListener object to the given call.
            </summary>
      <param name="line">The Line object.</param>
      <param name="listener">The listener.</param>
      <returns>The line object itself.</returns>
    </member>
    <member name="M:Ozeki.VoIP.IPhoneLineListenerCombinator.DetachListener(Ozeki.VoIP.IPhoneLine,Ozeki.VoIP.IPhoneLineListener)">
      <summary>
            Detaches a PhoneLineListener object to the given call.
            </summary>
      <param name="line">The Line object.</param>
      <param name="listener">The listener.</param>
      <returns>The line object itself.</returns>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransport.Send(Ozeki.Network.IPacket)">
      <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransport.Connect(System.String,System.Int32)">
      <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
      <param name="remoteEndPoint">
      </param>
      <param name="remotePort">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Protection.ProtectedTransportFactory">
      <summary>
            Ha belenyultak az assembly be, akkor direkt nem fog menni a hálózati forgalom
            TODO: Egy proxy-zás még lehet, hogy jól jönne 
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransportFactory.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Protection.ProtectedTransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransportFactory.MinPort">
      <summary>
              A legikisebb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransportFactory.MaxPort">
      <summary>
              A legnagyobb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransportFactory.ReservedPorts">
      <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransportFactory.LocalAddress">
      <summary>
              A lokális cím
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Protection.ProtectedTransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Q850.Q850CauseCodeToSIPError.ToCallError(System.Int32)">
      <summary>
            Converts an ISDN cause code to SIP error.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.VoIPMediaData">
      <summary>
            Represents decoded media data.
            </summary>
      <remarks>
            The VoIP call are made through a packet switched communication line.
            The received data packet is decoded with the codec that was attached to it
            and the IPhoneCall object gets a MediaDataReceived event notification
            about it. The phone call gets the decoded PCM data that needs further processing.
            The system can handle different media data according to the
            supported codecs. The audio, data or video communication are all possible.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.Media.VoIPMediaData.Data">
      <summary>
            Gets the media data.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.VoIPMediaData.MediaType">
      <summary>
            Gets the type of the media data.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.AudioData">
      <summary>
            Audio data + format
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.AudioData" /> class.
            </summary>
      <param name="sampleRate">Samples per second (Hz)</param>
      <param name="channels">Number of channels</param>
      <param name="bitRate">Bits per sample</param>
      <param name="packetizationTime">Packetization time</param>
      <param name="data">The audio data</param>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioData.#ctor(Ozeki.VoIP.Media.AudioFormat,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.AudioData" /> class.
            </summary>
      <param name="format">The format of the audio data.</param>
      <param name="data">The audio data.</param>
    </member>
    <member name="P:Ozeki.VoIP.Media.AudioData.MediaFormat">
      <summary>
            Provides format information about the media data.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.AudioFormat">
      <summary>
            Defines format information of audio data.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> class with default values. (8000 Hz, 16 bit, mono)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> class.
            </summary>
      <param name="sampleRate">Sample rate.</param>
      <param name="channels">Channels.</param>
      <param name="bitRate">Bits per sample.</param>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> class.
            </summary>
      <param name="sampleRate">Sample rate.</param>
      <param name="channels">Channels.</param>
      <param name="bitRate">Bits per sample.</param>
      <param name="packetizationTime">Packetization time.</param>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> is equal to the current <see cref="T:Ozeki.VoIP.Media.AudioFormat" />.
            </summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> is equal to the current <see cref="T:Ozeki.VoIP.Media.AudioFormat" />; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.GetByteSize">
      <summary>
            Specifies that the size of audio data of the given audio type in bytes
            </summary>
      <returns>The size of the audio data in bytes</returns>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current <see cref="T:Ozeki.VoIP.Media.AudioFormat" />.</returns>
    </member>
    <member name="M:Ozeki.VoIP.Media.AudioFormat.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.AudioFormat.SampleRate">
      <summary>
            Gets the sample rate, in samples per second (hertz).
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.AudioFormat.Channels">
      <summary>
            Gets the number of channels.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.AudioFormat.BitRate">
      <summary>
            Gets the bitrate of the sample.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.AudioFormat.PacketizationTime">
      <summary>
            Gets the packetization time.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.VoIPAudioFormatExtensions">
      <summary>
            Provides extension methods for the <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> and <see cref="T:Ozeki.Media.Audio.Waveform.Formats.WaveFormat" /> classes.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.VoIPAudioFormatExtensions.AsWaveFormat(Ozeki.VoIP.Media.AudioFormat)">
      <summary>
            Converts a <see cref="T:Ozeki.VoIP.Media.AudioFormat" /> to a <see cref="T:Ozeki.Media.Audio.Waveform.Formats.WaveFormat" />.
            </summary>
      <param name="mediaFormat">The media format to convert.</param>
      <returns>The WaveFormat.</returns>
    </member>
    <member name="M:Ozeki.VoIP.Media.VoIPAudioFormatExtensions.AsVoIPMediaFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32)">
      <summary>
            Converts a <see cref="T:Ozeki.Media.Audio.Waveform.Formats.WaveFormat" /> to a <see cref="T:Ozeki.VoIP.Media.AudioFormat" />.
            </summary>
      <param name="waveFormat">The WaveFormat to convert.</param>
      <param name="packetizationTime">Packetization time of the media format.</param>
      <returns>The media format.</returns>
    </member>
    <member name="T:Ozeki.VoIP.Media.CallMediaFormatInfo">
      <summary>
            Provides information about the media format of a call.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.CallMediaFormatInfo.#ctor(System.Int32,Ozeki.VoIP.Media.VoIPMediaType)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.CallMediaFormatInfo" /> class.
            </summary>
      <param name="id">The unique identifier of the media format.</param>
      <param name="mediaType">The type of the media data.</param>
    </member>
    <member name="P:Ozeki.VoIP.Media.CallMediaFormatInfo.MediaFormatID">
      <summary>
            Gets the unique identifier of the media format.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.CallMediaFormatInfo.MediaType">
      <summary>
            Gets the type of the media data.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.CallAudioFormatInfo">
      <summary>
            Provides information about the video format of a call.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.CallAudioFormatInfo.#ctor(System.Int32,Ozeki.VoIP.Media.AudioFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.CallAudioFormatInfo" /> class.
            </summary>
      <param name="id">The unique identifier of the media format.</param>
      <param name="format">The media format.</param>
    </member>
    <member name="P:Ozeki.VoIP.Media.CallAudioFormatInfo.MediaFormat">
      <summary>
            Gets the media format.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.CallType.Audio">
      <summary>
            Call using only audio channel.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.CallType.Video">
      <summary>
            Call using only video channel.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.CallType.AudioVideo">
      <summary>
            Call using both audio and video channels.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.CallVideoFormatInfo">
      <summary>
            Provides information about the audio format of a call.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.CallVideoFormatInfo.#ctor(System.Int32,Ozeki.VoIP.Media.VideoFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.CallVideoFormatInfo" /> class.
            </summary>
      <param name="id">The unique identifier of the media format.</param>
      <param name="format">The media format.</param>
    </member>
    <member name="P:Ozeki.VoIP.Media.CallVideoFormatInfo.MediaFormat">
      <summary>
            Gets the media format.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.IVoIPMediaFormatSelector">
      <summary>
            Provides a method to select the proper media format from a collection.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.IVoIPMediaFormatSelector.SelectMediaFormat(System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo})">
      <summary>
            Selects a media format from the given collection.
            </summary>
      <remarks>
            By implementing this method different techniques can be used to select the desired media format from the collection. E.g. the first media format with bitrate of 8.
            </remarks>
      <param name="formats">The available media formats.</param>
      <returns>The selected media format.</returns>
    </member>
    <member name="T:Ozeki.VoIP.DtmfNamedEvents">
      <summary>
            DTMF Named Events
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf0">
      <summary>DTMF tone 0</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf1">
      <summary>DTMF tone 1</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf2">
      <summary>DTMF tone 2</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf3">
      <summary>DTMF tone 3</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf4">
      <summary>DTMF tone 4</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf5">
      <summary>DTMF tone 5</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf6">
      <summary>DTMF tone 6</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf7">
      <summary>DTMF tone 7</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf8">
      <summary>DTMF tone 8</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.Dtmf9">
      <summary>DTMF tone 9</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfStar">
      <summary>DTMF tone *</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfHashMark">
      <summary>DTMF tone #</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfA">
      <summary>DTMF tone A</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfB">
      <summary>DTMF tone B</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfC">
      <summary>DTMF tone C</summary>
    </member>
    <member name="F:Ozeki.VoIP.DtmfNamedEvents.DtmfD">
      <summary>DTMF tone D</summary>
    </member>
    <member name="T:Ozeki.VoIP.DtmfNamedEventConverter">
      <summary>
            The class that converts int data to DTMF signals
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.DtmfNamedEventConverter.FromInt(System.Int32)">
      <summary>
            Converts an integer to a DTMF signal
            </summary>
      <param name="signal">The integer to convert to DTMF signal</param>
      <returns>A DTMF named event</returns>
    </member>
    <member name="T:Ozeki.VoIP.DtmfSignal">
      <summary>
             DTMF signal.
             </summary>
      <remarks>
            The DTMF signals can be used for interactins between the communication parties. You can only send
            or receive a DTMF signal on a Call object. Every DTMF signal has a certain frequency and duration.
             </remarks>
    </member>
    <member name="M:Ozeki.VoIP.DtmfSignal.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.DtmfSignal" /> class.
            </summary>
      <param name="signal">The DTMF tone.</param>
      <param name="duration">The duration of the DTMF tone.</param>
    </member>
    <member name="M:Ozeki.VoIP.DtmfSignal.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:Ozeki.VoIP.DtmfSignal" /> is equal to the current <see cref="T:Ozeki.VoIP.DtmfSignal" />.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.DtmfSignal.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current <see cref="T:Ozeki.VoIP.DtmfSignal" />.</returns>
    </member>
    <member name="P:Ozeki.VoIP.DtmfSignal.Signal">
      <summary>
            Numerical representation of the signal.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.DtmfSignal.Duration">
      <summary>
            Duration of the signal.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.MessageDataPackage">
      <summary>
            Represents the SIP message received from a remote party
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageDataPackage.Originator">
      <summary>
            Gets the originator of the received message
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageDataPackage.Recipient">
      <summary>
            Gets the recipient of the SIP message
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageDataPackage.Data">
      <summary>
            Gets the data information of the SIP message
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageDataPackage.Mimetype">
      <summary>
            Gets the type of the SIP message
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.VideoData.#ctor(Ozeki.VoIP.Media.VideoFormat,System.Byte[])">
      <summary>
            Creates a new instance of VideoData 
            </summary>
      <param name="format">The video format</param>
      <param name="data">The video data information</param>
    </member>
    <member name="P:Ozeki.VoIP.Media.VideoData.MediaFormat">
      <summary>
            Provides format information about the media data.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.VideoFormat">
      <summary>
            Defines format information of audio data.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Media.VideoFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.Media.VideoFormat" /> class.
            </summary>
      <param name="width">Number of the horizonal pixels</param>
      <param name="height">Number of the vertical pixels</param>
      <param name="sampleRate">Samples per second.</param>
      <param name="frameRate">Frame rate.</param>
    </member>
    <member name="M:Ozeki.VoIP.Media.VideoFormat.Equals(System.Object)">
      <summary>
            Checks if the current video format is equal to the parameter object
            </summary>
      <param name="obj">The other object to be checked</param>
      <returns>True if the parameter object is equal to the current video format, otherwise false.</returns>
    </member>
    <member name="P:Ozeki.VoIP.Media.VideoFormat.Width">
      <summary>
            Gets the number of the horizonal pixels.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.VideoFormat.Height">
      <summary>
            Gets the number of the vertical pixels.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.VideoFormat.SampleRate">
      <summary>
            Gets the samples per second (hertz).
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.Media.VideoFormat.FrameRate">
      <summary>
            Gets the frame rate.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.MessageSummary.VoIPMessageSummary">
      <summary>
            This class stores the information about the VoIP messages.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.#ctor">
      <summary>
            Creates a new instance of VoIPMessageSummary
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.#ctor(System.Boolean,System.String,System.Collections.Generic.IEnumerable{Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a new instance of VoIPMessageSummary
            </summary>
      <param name="messageWaiting">Indicates if there are waiting messages</param>
      <param name="messageAccount">The message account</param>
      <param name="messageSummaryLines">The message text</param>
      <param name="optionalMessageHeaders">The message header</param>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.MessageWaiting">
      <summary>
            Shows if there is a waiting message
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.MessageAccount">
      <summary>
            The message account
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.MessageSummaryLines">
      <summary>
            The message text lines
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummary.OptionalMessageHeaders">
      <summary>
            Otional message headres
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.MessageSummary.VoIPMessageContextClass">
      <summary>
            Defines the VoIP message context
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine">
      <summary>
            Represents the VoIP message summary
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.#ctor(Ozeki.VoIP.MessageSummary.VoIPMessageContextClass,System.Int32,System.Int32,Ozeki.Common.OzTuple{System.Int32,System.Int32})">
      <summary>
            Creates a new instance of VoIPMessageSummaryLine
            </summary>
      <param name="mclass">VoIP message context</param>
      <param name="newMessages">The number of new messages</param>
      <param name="oldMessages">The number of old messages</param>
      <param name="urgentMessages">Urgent new-old message pairs</param>
    </member>
    <member name="M:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.#ctor(Ozeki.VoIP.MessageSummary.VoIPMessageContextClass,System.Int32,System.Int32)">
      <summary>
            Creates a new instance of VoIPMessageSummaryLine
            </summary>
      <param name="mclass">VoIP message context</param>
      <param name="newMessages">The number of new messages</param>
      <param name="oldMessages">The number of old messages</param>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.MessageContextClass">
      <summary>
            The VoIP message context
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.NewMessages">
      <summary>
            The number of new VoIP messages
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.OldMessages">
      <summary>
            The number of old VoIP messages
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.MessageSummary.VoIPMessageSummaryLine.UrgentNewOldMessages">
      <summary>
            Urgent new-old message pairs
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.DTMF.DtmfSegment.Event">
      <summary>
            The given event.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.DTMF.DtmfSegment.End">
      <summary>
            The end marker.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.DTMF.DtmfSegment.Volume">
      <summary>
            The volume of the event.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.DTMF.DtmfSegment.Duration">
      <summary>
            The duration of the event, increasly from zero.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.DTMF.SDPDtmfInfo.SupportedTones">
      <summary>
            Supported DTMF signals.
            </summary>
      <remarks>
            If the collection is empty that means all signals are supported.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfo.Address">
      <summary>
            IP cím, ahová kell küldeni az adatot a másik félnek.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfo.Port">
      <summary>
            Port, ahová kell küldeni az adatot a másik félnek.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfo.MediaChannel">
      <summary>
            Maga a csatorna.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfo.MediaChannelDescription">
      <summary>
            Csatorna leírása.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfoFactory.CreateMediaChannel(System.String,Ozeki.Media.MediaType,Ozeki.Media.MediaProtocol,Ozeki.Network.Nat.NatConfiguration)">
      <summary>
            Létrehoz egy IMediaChannel-t a megadott paraméterek alapján.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.MediaChannelInfoFactory.CreateNewChannelAnswer(System.String,Ozeki.Media.Session.MediaChannelDescription,Ozeki.Network.Nat.NatConfiguration,Ozeki.Media.Session.CommunicationMode)">
      <summary>
            Legenerálja a választ az offerre. Kiválasztja a közös kodekeket, és ha talált, akkor létrehoz egy IMediaChannel-t.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.MediaStrategies.CodecUtils.FilterAvailableCodecs(System.Collections.Generic.Dictionary{Ozeki.Common.OzTuple{Ozeki.Media.MediaType,System.Int32},Ozeki.Media.Codec.ICodec},System.Collections.Generic.Dictionary{Ozeki.Common.OzTuple{Ozeki.Media.MediaType,System.Int32,System.Int32},Ozeki.Media.Session.CodecDescription})">
      <summary>
      </summary>
      <param name="localCodecs">Codec-ek a rendszerben, MediaType, Payload-al kulcsolva</param>
      <param name="remoteDescriptions">A távoldal lehetséges kodekjei, MediaType, Payload, RemotePort-al kulcsolva</param>
      <returns>Helyi kodekek a tevoli eleresekhez.</returns>
    </member>
    <member name="T:Ozeki.VoIP.PhoneCalls.MediaStrategies.MediaStrategy">
      <summary>
            Normal behaviour for media strategy
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.PhoneCalls.MediaStrategies.NullMediaStrategy">
      <summary>
            Null obejct for Media strategy behavior.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.AcceptRemoteMediaDescription(System.Collections.Generic.List{Ozeki.Media.MediaType},Ozeki.Network.Nat.NatConfiguration)">
      <summary>
            Bejövő hívást elfogadtuk, és megadjuk, melyik csatornákat fogadjuk el.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.UpdateLocalMediaChannelDescription(Ozeki.Media.Session.MediaChannelDescription,System.Int32,System.String,Ozeki.Network.Nat.NatConfiguration)">
      <summary>
            Beérkezett offer alapján frissít egy lokális channelt.
            </summary>
      <param name="offerChannel">Távoli csatorna.</param>
      <param name="channelIndex">Távoli csatorna indexe.</param>
      <param name="remoteAddress">Távoli fél IP címe.</param>
      <returns>Lokális csatornához tartozó leírás.</returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.CheckForChannelUpdates(System.Boolean)">
      <summary>
            Megnézzük, melyik csatorna változott (hozzáadtak videot, megszakították stb.)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.LocalModify(System.Collections.Generic.List{Ozeki.Media.MediaType},Ozeki.Network.Nat.NatConfiguration,Ozeki.VoIP.SRTPMode)">
      <summary>
            Meg akarjuk változtatni lokálisan a csatornákat.
            </summary>
      <returns>Megváltozott-e valamelyik csatorna.</returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.LocalOffer">
      <summary>
            SDP nelkuli re-INVITE-ra a local media description-t meg kell valtoztatni
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.RemoteOffer(Ozeki.Media.Session.MediaDescription,Ozeki.Network.Nat.NatConfiguration)">
      <summary>
            Beérkezett offer alapján frissíti a lokális channeleket
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.Session.SessionManager.RemoteAnswer(Ozeki.Media.Session.MediaDescription)">
      <summary>
            Küldtünk egy offert, és kaptunk rá egy választ.
            </summary>
      <param name="answer">
      </param>
    </member>
    <member name="T:Ozeki.VoIP.PhoneLineState">
      <summary>
            Information about state of the phone line.
            </summary>
      <remarks>
            The phone line state either shows the registration state on the SIP Registrar server
            or the fact that there is direct SIP communication. If the phone line has not been used before
            the state is Initialized.
            </remarks>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.Initialized">
      <summary>
            The phoneline object is initialized.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.RegistrationRequested">
      <summary>
            Registration is requested on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.RegistrationSucceeded">
      <summary>
            Registration is succeeded on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.RegistrationFailed">
      <summary>
            Registration request is failed on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.RegistrationTimedOut">
      <summary>
            Registration request is timed out.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.UnregRequested">
      <summary>
            Unregistration is requested on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.UnregSucceeded">
      <summary>
            Unregistration is succeeded on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.UnregFailed">
      <summary>
            Unregistration request is failed on SIP Registrar/Proxy.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.UnregTimedOut">
      <summary>
            Unregistration request is timed out.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.PhoneLineState.NoRegNeeded">
      <summary>
            No registration process needed.
            </summary>
      <remarks>
            Usually use with option with SIP/Analog converters, or when you just want to call and you don't want to be callable.
            </remarks>
    </member>
    <member name="T:Ozeki.VoIP.SIPAccount">
      <summary>
            Represents a SIP user account.
            </summary>
      <remarks>
            This class stores the necessary user data for the registration to a SIP Registrar Proxy server.
            These data are: user name, registration name, registration password (see RFC 5322),
            SIP server IP address and port.
            This class also handles the case when you want to communicate with directly with a sIP
            tool. In this case the RequestrationRequired property needs to be set to false. In this case the class specifies a communication channel.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Contains SIP Account information.
            </summary>
      <param name="registrationRequired">Registration required for this account.</param>
      <param name="displayName">Displayname for the account.</param>
      <param name="userName">The username for the SIP account.</param>
      <param name="registerName">The registername for the SIP account.</param>
      <param name="registerPassword">The password for the SIP account.</param>
      <param name="domain">The domain host for SIP registration.</param>
      <param name="outboundProxy">The outbound domain proxy for SIP registration.</param>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
            Contains SIP Account information.
            </summary>
      <param name="registrationRequired">Registration required for this account.</param>
      <param name="displayName">Displayname for the account.</param>
      <param name="userName">The username for the SIP account.</param>
      <param name="registerName">The registername for the SIP account.</param>
      <param name="registerPassword">The password for the SIP account.</param>
      <param name="domainServerHost">The domain host for SIP registration.</param>
      <param name="domainServerPort">The domain port for SIP registration.</param>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Contains SIP Account information.
            </summary>
      <param name="registrationRequired">Registration required for this account.</param>
      <param name="displayName">Displayname for the account.</param>
      <param name="userName">The username for the SIP account.</param>
      <param name="registerName">The registername for the SIP account.</param>
      <param name="registerPassword">The password for the SIP account.</param>
      <param name="domain">The domain host for SIP registration.</param>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
      <summary>
            Contains SIP Account information.
            </summary>
      <param name="registrationRequired">Registration required for this account.</param>
      <param name="displayName">Displayname for the account.</param>
      <param name="userName">The username for the SIP account.</param>
      <param name="registerName">The registername for the SIP account.</param>
      <param name="registerPassword">The password for the SIP account.</param>
      <param name="domainServerHost">The domain host for SIP registration.</param>
      <param name="domainServerPort">The domain port for SIP registration.</param>
      <param name="proxy">The outbound domain proxy for SIP registration.</param>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.Equals(System.Object)">
      <summary>
            Compares two SIP accounts
            </summary>
      <param name="obj">The other SIP account</param>
      <returns>Returns true if the two SIP accounts are the same, otherwise returns false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIPAccount.GetHashCode">
      <summary>
            Returns the hash code of the SIP account
            </summary>
      <returns>The hash code of the SIP account</returns>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.RegistrationRequired">
      <summary>
            Is registration required for this account?
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.DisplayName">
      <summary>
            Displayname for the account.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.UserName">
      <summary>
            The username for the SIP account.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.RegisterName">
      <summary>
            The registername for the SIP account.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.RegisterPassword">
      <summary>
            The password for the SIP account.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.DomainServerHost">
      <summary>
            The domain host for SIP registration.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.DomainServerPort">
      <summary>
            The domain port for SIP registration.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.OutboundProxy">
      <summary>
            The domain port for SIP registration.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIPAccount.SIPURL">
      <summary>
            The whole domain endpoint equipped with registername.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Logger.SIPMessageLogger">
      <summary>
            Captures incoming and outgoing SIP messages.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Logger.SIPMessageLogger.SIPMessageReceived">
      <summary>
            SIP message received by the SIP Stack.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Logger.SIPMessageLogger.SIPMessageSent">
      <summary>
            SIP message sent by the SIP Stack.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SRTPMode">
      <summary>
            An enum that represents the SRTP encryption mode for the calls
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTPMode.None">
      <summary>
            No SRTP encryption is set
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTPMode.Prefer">
      <summary>
            The SRTP encryption is preferably set
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTPMode.Force">
      <summary>
            The SRTP encryption is forced to be set
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.TransferInfo">
      <summary>
            Represents the information about the call transfer
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.TransferInfo.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates an instance of the TransferInfo class
            </summary>
      <param name="displayName">The displayed name of the other party</param>
      <param name="userName">The user name of the other party</param>
      <param name="address">The address of the other party</param>
    </member>
    <member name="P:Ozeki.VoIP.TransferInfo.DisplayName">
      <summary>
            Gets the displayed name of the other party
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.TransferInfo.UserName">
      <summary>
            Gets the user name of the other party
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.TransferInfo.Address">
      <summary>
            Gets the address of the remote party
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.TransferState">
      <summary>
            Specifies the state of the call transfer
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.TransferState.Trying">
      <summary>
            The transfer is in trying state
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.TransferState.Busy">
      <summary>
            The remote party to whom you tried to transfer the call is busy
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.TransferState.NotFound">
      <summary>
            The remote party to whom you tried to transfer the call cannot be found
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.TransferState.Failed">
      <summary>
            The call transfer failed
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.TransferState.Completed">
      <summary>
            The call transfer is completed
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.VoIPEventArgs`1">
      <summary>
            Provides data for VoIP SIP SDK events to handle events with type parameters easily.
            </summary>
      <typeparam name="T">Type of the held object.</typeparam>
    </member>
    <member name="M:Ozeki.VoIP.VoIPEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.VoIPEventArgs`1" /> class.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.VoIPEventArgs`1.Item">
      <summary>
            Gets the held item.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.EncodedMediaData">
      <summary>
            Represents encoded media data with codec properties.
            </summary>
      <remarks>
            The VoIP calls are made through packet swiched communication channel. The IPhonecall
            object gets the sent data packed through the PlainMediaDataReceived event. This packed needs further
            processing. The main goal of VoIP is audio communication, but with other supported
            codecs in this system it is possible to perform data and video communication too.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.EncodedMediaData.#ctor(System.String,System.Int32,System.Int32,System.Byte[],Ozeki.VoIP.Media.VoIPMediaType)">
      <summary>
            Contains encoded media data.
            </summary>
      <param name="codecName">The name of the codec that is used to encode the data.</param>
      <param name="sampleRate">The samplerate of media data.</param>
      <param name="channels">The number of channels of media data.</param>
      <param name="bitRate">The bitrate of media data.</param>
      <param name="pcmData">The byte array that contains the encoded data.</param>
      <param name="voipMediaType">The type of media data.</param>
    </member>
    <member name="M:Ozeki.VoIP.EncodedMediaData.Equals(System.Object)">
      <summary>
            Compares two PlainMediaData objects.
            </summary>
      <param name="obj">The other PlainMediaData object.</param>
      <returns>Returns true if the contained data is the same, otherwise false.</returns>
    </member>
    <member name="M:Ozeki.VoIP.EncodedMediaData.GetHashCode">
      <summary>
            Generates Hash code summarizing contained data hascodes.
            </summary>
      <returns>An integer value that represents the hashcode of this object.</returns>
    </member>
    <member name="P:Ozeki.VoIP.EncodedMediaData.CodecName">
      <summary>
            The used codec name.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.EncodedMediaData.SampleRate">
      <summary>
            The samplerate of the data.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.EncodedMediaData.Channels">
      <summary>
            Number of channels.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.EncodedMediaData.CodedData">
      <summary>
            The raw data.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.EncodedMediaData.MediaType">
      <summary>
            The media type for the represented data.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.Media.VoIPMediaType">
      <summary>
            Representative media types defined in RFC4566.
            </summary>
      <remarks>
            RFC4566 is about "SDP: Session Description Protocol"
            </remarks>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Unknown">
      <summary>
            Unknown media type
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Audio">
      <summary>
            Audio type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Video">
      <summary>
            Video type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Application">
      <summary>
            Application type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Data">
      <summary>
            Datet type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Control">
      <summary>
            Control type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Text">
      <summary>
            Text type, defined in RFC4566
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.Media.VoIPMediaType.Message">
      <summary>
            Message type, defined in RFC4566
            </summary>
    </member>
    <member name="T:Ozeki.Common.BasicComposite`1">
      <summary>
            Represents the composite component of the composite pattern
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Ozeki.Common.BasicComposite`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Common.BasicComposite`1" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Common.BasicComposite`1.AddItem(`0)">
      <summary>
            Adds an object to the end of the collection
            </summary>
      <param name="component">The specified CallListener</param>
    </member>
    <member name="M:Ozeki.Common.BasicComposite`1.RemoveItem(`0)">
      <summary>
            Removes the object from the collection
            </summary>
      <param name="component">The specified item</param>
    </member>
    <member name="M:Ozeki.Common.BasicComposite`1.Find(`0)">
      <summary>
            Searches for an object and returns the first occurrence within the entire collection
            </summary>
      <param name="component">The specified component</param>
    </member>
    <member name="M:Ozeki.Common.BasicComposite`1.FindAll(System.Predicate{`0})">
      <summary>
            Retreives all the elements that match the condition defined by the specific predicate
            </summary>
    </member>
    <member name="P:Ozeki.Common.BasicComposite`1.Collection">
      <summary>
            Gets the list containing the components.
            </summary>
    </member>
    <member name="T:Ozeki.Common.Concurrent.BiConcurrentDictionary`2">
      <summary>
            Mindket kulcs alapjan lehet hivatkozni az elemekre
            </summary>
      <typeparam name="TKey1">
      </typeparam>
      <typeparam name="TKey2">
      </typeparam>
    </member>
    <member name="M:Ozeki.Common.Concurrent.ConcurrentHashSet`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Ozeki.Common.Concurrent.ConcurrentList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Ozeki.Common.DependencyContainer.Resolve``1">
      <summary>
            Ki akarnak kérdezni egy adott típusú függőséget.
            Ha a függőség nincs benne a rendszerben, akkor excpetion -t dob (és ez jól van így, nem szabad elfedni a hibákat).
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Common.DependencyContainer.ResolveAll``1">
      <summary>
            Feloldja az osszes fuggoseget, majd utána megnézi, hogy melyik T típusú
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Ozeki.Common.Exceptions.SDKException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>
            The exception is triggered in Ozeki VoIP SIP SDK
            </summary>
      <param name="message">The Exception message.</param>
      <param name="innerException">The inner Exception.</param>
    </member>
    <member name="T:Ozeki.Common.Exceptions.LicenseException">
      <summary>
            An Exception for license problems
            </summary>
    </member>
    <member name="M:Ozeki.Common.Exceptions.LicenseException.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new instance of LicenseException
            </summary>
      <param name="message">The exception message</param>
    </member>
    <member name="T:Ozeki.Common.GenericEventArgs`1">
      <summary>
            Provides data for VoIP SIP SDK events.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Ozeki.Common.GenericEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Common.GenericEventArgs`1" /> class.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="P:Ozeki.Common.GenericEventArgs`1.Item">
      <summary>
            Gets the current item
            </summary>
    </member>
    <member name="T:Ozeki.Common.IByteArrayConverter`1">
      <summary>
            Provides methods for converting a specified data type to an array of bytes, and an array of bytes to a specified type.
            </summary>
      <typeparam name="T">The type of the converted object.</typeparam>
    </member>
    <member name="M:Ozeki.Common.IByteArrayConverter`1.ByteArrayToObject(System.Byte[])">
      <summary>
            Converts the specified <see cref="!:&lt;T&gt;" /> to an array of bytes.
            </summary>
      <param name="array">The array of bytes.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:Ozeki.Common.IByteArrayConverter`1.GetBytes(`0)">
      <summary>
            Converts the specified <see cref="!:&lt;T&gt;" /> to an array of bytes.
            </summary>
      <param name="obj">The object that is to be converted.</param>
      <returns>The specified object as an array of bytes.</returns>
    </member>
    <member name="T:Ozeki.Common.Logger.ILogger">
      <summary>
            An interface for logging purposes
            </summary>
    </member>
    <member name="M:Ozeki.Common.Logger.ILogger.WriteLog(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Writes the message onto the logger
            </summary>
      <param name="logType">
      </param>
      <param name="level">The level of logging</param>
      <param name="eventCode">The code of the event</param>
      <param name="message">The message the logger displays</param>
    </member>
    <member name="M:Ozeki.Common.Logger.ILogger.AllowedId(System.Int32)">
      <summary>
            If the given ID is present, the log will be written even if the logging level is not proper
            </summary>
      <param name="id">The ID of the event</param>
      <returns>true if the ID is present, otherwise, false</returns>
    </member>
    <member name="T:Ozeki.Common.Logger.Logger">
      <summary>
            Ths class represents logging in the system
            </summary>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.HardwareInfo">
      <summary>
            Logs information about the machine.
            </summary>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.EnterMethod(System.String,System.String)">
      <summary>
            Debug level logging, needs to present at the beginning of a method
            </summary>
      <param name="className">The name of the class</param>
      <param name="methodName">The name of the method</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.EnterMethod(System.String,System.String,System.String)">
      <summary>
            Debug level logging, needs to present at the beginning of a method
            </summary>
      <param name="className">The name of the class</param>
      <param name="methodName">The name of the method</param>
      <param name="parameters">Method parameters e.g. string.Format("ipAddress: {0}, port: {1}", ipAddress, port)</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.ExitMethod(System.String,System.String)">
      <summary>
            Debug level logging, needs to present at the end of a method
            </summary>
      <param name="className">The name of the class</param>
      <param name="methodName">The name of the method</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.ExitMethod(System.String,System.String,System.String)">
      <summary>
            Debug level logging, needs to present at the end of a method
            </summary>
      <param name="className">he name of the class</param>
      <param name="methodName">The name of the method</param>
      <param name="returnValue">The return value</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogMessage(Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Logging according to the parameter level
            </summary>
      <param name="level">The logging level</param>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogMessage(Ozeki.Common.Logger.LogLevel,System.Int32,System.String,System.Object[])">
      <summary>
            Logging according to the parameter level
            </summary>
      <param name="level">The logging level</param>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
      <param name="parameters">The method parameters</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogEmergency(System.Int32,System.String)">
      <summary>
            Level 0 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogAlert(System.Int32,System.String)">
      <summary>
            Level 1 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogCritical(System.Int32,System.String)">
      <summary>
            Level 2 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogError(System.Int32,System.String)">
      <summary>
            Level 3 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogWarning(System.Int32,System.String)">
      <summary>
            Level 4 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogNotice(System.Int32,System.String)">
      <summary> 
            Level 5 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogInformation(System.Int32,System.String)">
      <summary>
            Level 6 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.LogDebug(System.Int32,System.String)">
      <summary>
            Level 7 logging
            </summary>
      <param name="eventCode">The event code</param>
      <param name="message">The log message</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.WriteMessage(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Logging according to the given log type and level
            </summary>
      <param name="level">Level of logging</param>
      <param name="logType">The log type</param>
      <param name="message">The log message</param>
      <param name="eventCode">The evenet code</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.Close">
      <summary>
            Forbids logging
            </summary>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.Open(Ozeki.Common.Logger.LogLevel)">
      <summary>
            Permits logging.
            Default log level: Emergency
            </summary>
      <param name="level">The logging level</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.Attach(Ozeki.Common.Logger.ILogger)">
      <summary>
            Provides the possibility of multitarget logging (into file, database etc.)
            </summary>
      <param name="logger">The logger</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.Detach(Ozeki.Common.Logger.ILogger)">
      <summary>
            Detaching a logger
            </summary>
      <param name="logger">The logger to be detached</param>
    </member>
    <member name="M:Ozeki.Common.Logger.Logger.WriteLog(Ozeki.Common.Logger.LogLevel,System.Object[])">
      <summary>
            This method id obsolate and will be deleted.
            </summary>
      <param name="level">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="P:Ozeki.Common.Logger.Logger.Opened">
      <summary>
            Informs about that the logger is open or not
            </summary>
    </member>
    <member name="P:Ozeki.Common.Logger.Logger.Level">
      <summary>
            Informas about the logging level
            </summary>
    </member>
    <member name="T:Ozeki.Common.Logger.LogLevel">
      <summary>
            The 8 levels defined in the syslog protocol. It is used by the whole logger system.
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Emergency">
      <summary>
            System is unusable Level 0
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Alert">
      <summary>
            Action must be taken immediately Level 1
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Critical">
      <summary>
            Critical conditions Level 2
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Error">
      <summary>
             Error conditions Level 3
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Warning">
      <summary>
            Warning conditions Level 4
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Notice">
      <summary>
            Normal but significant condition Level 5
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Information">
      <summary>
            Informational messages Level 6
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogLevel.Debug">
      <summary>
            Debug-level messages Level 7
            </summary>
    </member>
    <member name="T:Ozeki.Common.Logger.LogType">
      <summary>
            The type of the logging
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogType.EnterMethod">
      <summary>
            Logging when the method starts
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogType.ExitMethod">
      <summary>
            Logging when the method ends
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogType.HardwareInfo">
      <summary>
            Hardware information logging
            </summary>
    </member>
    <member name="F:Ozeki.Common.Logger.LogType.Message">
      <summary>
            Message logging
            </summary>
    </member>
    <member name="T:Ozeki.Common.Timer.NativeMediaTimer">
      <summary>
            Represents the Windows multimedia timer.
            </summary>
    </member>
    <member name="M:Ozeki.Common.Timer.NativeMediaTimer.#ctor">
      <summary>
            Initializes a new instance of the Timer class.
            </summary>
    </member>
    <member name="M:Ozeki.Common.Timer.NativeMediaTimer.Start">
      <summary>
            Starts the timer.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
      <exception cref="T:Ozeki.Common.Timer.TimerStartException">
            The timer failed to start.
            </exception>
    </member>
    <member name="M:Ozeki.Common.Timer.NativeMediaTimer.Stop">
      <summary>
            Stops timer.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="M:Ozeki.Common.Timer.NativeMediaTimer.Dispose">
      <summary>
            Frees timer resources.
            </summary>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.SynchronizingObject">
      <summary>
            Gets or sets the object used to marshal event-handler calls.
            </summary>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.Period">
      <summary>
            Gets or sets the time between Tick events.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.Resolution">
      <summary>
            Gets or sets the timer resolution.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
      <remarks>
            The resolution is in milliseconds. The resolution increases 
            with smaller values; a resolution of 0 indicates periodic events 
            should occur with the greatest possible accuracy. To reduce system 
            overhead, however, you should use the maximum value appropriate 
            for your application.
            </remarks>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.Mode">
      <summary>
            Gets the timer mode.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.IsRunning">
      <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
    </member>
    <member name="P:Ozeki.Common.Timer.NativeMediaTimer.Capabilities">
      <summary>
            Gets the timer capabilities.
            </summary>
    </member>
    <member name="E:Ozeki.Common.Timer.NativeMediaTimer.Started">
      <summary>
            Occurs when the Timer has started;
            </summary>
    </member>
    <member name="E:Ozeki.Common.Timer.NativeMediaTimer.Stopped">
      <summary>
            Occurs when the Timer has stopped;
            </summary>
    </member>
    <member name="E:Ozeki.Common.Timer.NativeMediaTimer.Tick">
      <summary>
            Occurs when the time period has elapsed.
            </summary>
    </member>
    <member name="M:Ozeki.Common.MediaTimer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Common.Timer.TimerCaps">
      <summary>
            Represents information about the multimedia Timer's capabilities.
            </summary>
    </member>
    <member name="F:Ozeki.Common.Timer.TimerCaps.periodMin">
      <summary>
            Minimum supported period in milliseconds.
            </summary>
    </member>
    <member name="F:Ozeki.Common.Timer.TimerCaps.periodMax">
      <summary>
            Maximum supported period in milliseconds.
            </summary>
    </member>
    <member name="T:Ozeki.Common.Timer.TimerEx">
      <summary>
            A timertől lekerdezhető, hogy a következő tick ig mennyi idő van még hátra
            </summary>
    </member>
    <member name="P:Ozeki.Common.Timer.TimerEx.RemainingTime">
      <summary>
            A következő tick ig hátralévő idő
            </summary>
    </member>
    <member name="T:Ozeki.Common.Timer.TimerStartException">
      <summary>
            The exception that is thrown when a timer fails to start.
            </summary>
    </member>
    <member name="M:Ozeki.Common.Timer.TimerStartException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the TimerStartException class.
            </summary>
      <param name="message">
            The error message that explains the reason for the exception. 
            </param>
    </member>
    <member name="T:Ozeki.Common.Timer.TimerMode">
      <summary>
            Defines constants for the multimedia Timer's event types.
            </summary>
    </member>
    <member name="F:Ozeki.Common.Timer.TimerMode.OneShot">
      <summary>
            Timer event occurs once.
            </summary>
    </member>
    <member name="F:Ozeki.Common.Timer.TimerMode.Periodic">
      <summary>
            Timer event occurs periodically.
            </summary>
    </member>
    <member name="T:Ozeki.Common.Timer.WorkLeader">
      <summary>
            Ő irányítja a workereket
            TODO kozosen kellene osztozniuk az eroforrasokon
            A start-stop pal meg lehetnenek problemak, mert csak akkor lehet elinditani ujra, hogyha mar rendesen leallt
            Erre hasznaltam volna a stopwaiter-t, de meg nem mukodik megfeleloen
            Mivel mindent csak 1 szer fogok elinditani igy ez nem okoz problemat
            </summary>
    </member>
    <member name="M:Ozeki.Common.Timer.WorkLeader.#ctor(System.Int32)">
      <summary>
      </summary>
      <param name="workInterval">
      </param>
    </member>
    <member name="T:Ozeki.Common.Exceptions.VoIPException">
      <summary>
            The exception is triggered in Ozeki VoIP SIP SDK
            </summary>
      <remarks>
            Any critical error inside the SDK makes this exception occur.
            </remarks>
    </member>
    <member name="M:Ozeki.Common.Exceptions.VoIPException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>
            The exception is triggered in Ozeki VoIP SIP SDK
            </summary>
      <param name="message">The Exception message.</param>
      <param name="innerException">The inner Exception.</param>
    </member>
    <member name="T:Ozeki.Common.ObjectPool`1">
      <summary>
              Objektumok poolban történő tárolására, és újrafelhasználására alkalmas
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Ozeki.Common.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
      <summary>
            Objektumok poolban történő tárolására, és újrafelhasználására alkalmas
            </summary>
      <param name="maxPoolSize">Maximum ennyi objectum van egyszerre a poolban</param>
      <param name="objectFactory">Ha nincs objektum a listában akkor ezzel gyárthathatunk magunknak új objektuomot, ha az értéke null, akkor default konstruktoros objektumokat gyártatunk</param>
    </member>
    <member name="M:Ozeki.Common.ObjectPool`1.AcquireReusable">
      <summary>
            A poolból visszaad egy újrahasznosítható objektumot, ha üres a pool, akkor egy új objektumot ad vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Common.ObjectPool`1.ReleaseReusable(`0)">
      <summary>
             A már nem használt objektumokt visszatesszük a poolba.
             Figyelem!!! amilyen állapotban a poolba tettük az objektumokt, olyan állapotban fogjuk visszakapni.
             A visszatérési érték true, ha kell a poolnak, különben false (ha false ne felejtsd el felszabadítani az objektum erőforrásait pl.: close, dispose stb.)
            </summary>
      <param name="reusable">
      </param>
    </member>
    <member name="P:Ozeki.Common.ObjectPool`1.MaxPoolSize">
      <summary>
              Segítségével lekérdezhető, beállítható, hogy maximum hány elemet tartalmazhat a pool
            </summary>
    </member>
    <member name="T:Ozeki.Network.IPacket">
      <summary>
              A transport rétegen kiküldött vagy fogadott csomag, érdemes azt az osztályt származtatni ebbõl, amelynek az adat részét ki szeretnénk küldeni a hálzaton, így nem kell új objektumot létrehozni és egy helyen lehet kezelni a parsolással
            </summary>
    </member>
    <member name="M:Ozeki.Network.IPHelper.SplitAddress(System.String,System.Int32)">
      <summary>
            Felbontja IP:port-ra a megadott cimet. Ha nincs a cimben port, akkor az erteke a defaultPort parameterben megadott ertek lesz.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple">
      <summary>
            Generic class collection for tuples defined directly for Ozeki VoIP SDK.
            </summary>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``1(``0)">
      <summary>
            Creates a new 1-tuple, or singleton.
            </summary>
      <typeparam name="T1">The type of the only component of the tuple.</typeparam>
      <param name="item1">The value of the only component of the tuple.</param>
      <returns>A tuple whose value is (item1).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``2(``0,``1)">
      <summary>
            Creates a new 2-tuple, or pair.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <returns>A 2-tuple whose value is (item1, item2).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``3(``0,``1,``2)">
      <summary>
            Creates a new 3-tuple, or triple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <returns>A 3-tuple whose value is (item1, item2, item3).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``4(``0,``1,``2,``3)">
      <summary>
            Creates a new 4-tuple, or quadruple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <returns>A 4-tuple whose value is (item1, item2, item3, item4).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>
            Creates a new 5-tuple, or quintuple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <returns>A 5-tuple whose value is (item1, item2, item3, item4, item5).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>
            Creates a new 6-tuple, or sextuple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <returns>A 6-tuple whose value is (item1, item2, item3, item4, item5, item6).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Creates a new 7-tuple, or septuple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <returns>A 7-tuple whose value is (item1, item2, item3, item4, item5, item6, item7).</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Creates a new 8-tuple, or octuple.
            </summary>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <param name="item8">The value of the eighth component of the tuple.</param>
      <returns>An 8-tuple (octuple) whose value is (item1, item2, item3, item4, item5, item6, item7, item8). </returns>
    </member>
    <member name="T:Ozeki.Common.OzTuple`1">
      <summary>
            Represents a 1-tuple, or singleton.
            </summary>
      <typeparam name="T1">The type of the tuple's only component.</typeparam>
    </member>
    <member name="F:Ozeki.Common.OzTuple`1.m_Item1">
      <summary>
            Gets the value of the Tuple(Of T1) object's single component.
            </summary>
    </member>
    <member name="M:Ozeki.Common.OzTuple`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the Tuple(Of T1) class.
            </summary>
      <param name="item1">The value of the tuple's only component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`1.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`1.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`1.Item1">
      <summary>
            Gets the value of the Tuple(Of T1) object's single component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`2">
      <summary>
            Represents a 2-tuple, or pair.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`2.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`2.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`2.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`2.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`2.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2) object's second component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`3">
      <summary>
            Represents a 3-tuple, or triple.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`3.#ctor(`0,`1,`2)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`3.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`3.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2, T3) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`3.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`3.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`3.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`3.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3) object's third component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`4">
      <summary>
            Represents a 4-tuple, or quadruple.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`4.#ctor(`0,`1,`2,`3)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3, T4) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`4.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3, T4) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`4.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2, T3, T4) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`4.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3, T4) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3, T4) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`4.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`4.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`4.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4) object's third component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`4.Item4">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4) object's fourth component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`5">
      <summary>
            Represents a 5-tuple, or quintuple.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3, T4, T5) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`5.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3, T4, T5) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`5.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2, T3, T4, T5) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`5.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3, T4, T5) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3, T4, T5) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`5.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`5.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`5.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5) object's third component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`5.Item4">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5) object's fourth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`5.Item5">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5) object's fifth component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`6">
      <summary>
            Represents a 6-tuple, or sextuple.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3, T4, T5, T6) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`6.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3, T4, T5, T6) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`6.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2, T3, T4, T5, T6) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`6.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3, T4, T5, T6) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3, T4, T5, T6) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's third component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item4">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's fourth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item5">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's fifth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`6.Item6">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6) object's sixth component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`7">
      <summary>
            Represents a 7-tuple, or septuple.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3, T4, T5, T6, T7) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`7.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`7.GetHashCode">
      <summary>
            Returns the hash code for the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`7.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3, T4, T5, T6, T7) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3, T4, T5, T6, T7) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's third component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item4">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's fourth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item5">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's fifth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item6">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's sixth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`7.Item7">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7) object's seventh component.
            </summary>
    </member>
    <member name="T:Ozeki.Common.OzTuple`8">
      <summary>
            Represents an n-tuple, where n is 8 or greater.
            </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
      <typeparam name="TRest">Any generic Tuple object that defines the types of the tuple's remaining components.</typeparam>
    </member>
    <member name="M:Ozeki.Common.OzTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>
            Initializes a new instance of the Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) class.
            </summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
      <param name="rest">Any generic Tuple object that contains the values of the tuple's remaining components.</param>
    </member>
    <member name="M:Ozeki.Common.OzTuple`8.Equals(System.Object)">
      <summary>
            Returns a value that indicates whether the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object is equal to a specified object.
            </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`8.GetHashCode">
      <summary>
            Calculates the hash code for the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Ozeki.Common.OzTuple`8.ToString">
      <summary>
            Returns a string that represents the value of this Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) instance.
            </summary>
      <returns>The string representation of this Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object.</returns>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item1">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's first component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item2">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's second component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item3">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's third component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item4">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's fourth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item5">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's fifth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item6">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's sixth component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Item7">
      <summary>
            Gets the value of the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's seventh component.
            </summary>
    </member>
    <member name="P:Ozeki.Common.OzTuple`8.Rest">
      <summary>
            Gets the current Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest) object's remaining components.
            </summary>
    </member>
    <member name="T:Ozeki.Common.Util.Saslprep">
      <summary>
            SASLprep: Stringprep Profile for User Names and Passwords
            http://tools.ietf.org/html/rfc4013
            </summary>
    </member>
    <member name="M:Ozeki.Common.Util.Saslprep.SASLprep(System.String)">
      <summary>
            SASLprep: Stringprep Profile for User Names and Passwords
            http://tools.ietf.org/html/rfc4013
            </summary>
    </member>
    <member name="M:Ozeki.Common.Util.Saslprep.IsNonAsciiSpace(System.Char)">
      <summary>
            Preparation of Internationalized Strings ("stringprep")
            http://tools.ietf.org/html/rfc3454#appendix-C.1.2
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Common.Util.Saslprep.IsCommonlyMappedToNothing(System.Char)">
      <summary>
            Preparation of Internationalized Strings ("stringprep")
            http://tools.ietf.org/html/rfc3454#appendix-B.1
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.Common.OldMediaTimer">
      <summary>
            Represents the Windows multimedia timer.
            </summary>
    </member>
    <member name="M:Ozeki.Common.OldMediaTimer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.Schemes.DigestMD5WithoutQopScheme">
      <summary>
            Digest, MD5
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.Schemes.DigestMD5QopAuthScheme">
      <summary>
            Digest, qop=auth
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.Schemes.DigestMD5QopAuthIntScheme">
      <summary>
            Digest, qop=auth-int
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.IDialogContainer.TryGetDialog(Ozeki.VoIP.SIP.Layers.Dialog.DialogID)">
      <summary>
            Gets a dialog from the container.
            </summary>
      <param name="dialogID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.IDialogContainer.Contains(Ozeki.VoIP.SIP.Layers.Dialog.DialogID)">
      <summary>
            Determines whether a dialog is in the container.
            </summary>
      <param name="dialogID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogContainer.TryGetDialog(Ozeki.VoIP.SIP.Layers.Dialog.DialogID)">
      <summary>
            Gets a dialog from the container.
            </summary>
      <param name="dialogID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogContainer.Contains(Ozeki.VoIP.SIP.Layers.Dialog.DialogID)">
      <summary>
            Determines whether a dialog is in the container.
            </summary>
      <param name="dialogID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer">
      <summary>
            Protocol layer design pattern.
            </summary>
      <remarks>
            http://www.eventhelix.com/realtimemantra/patterncatalog/protocol_layer.htm
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer.TransmitMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Transmit some message from this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer.ItsUpperLayer">
      <summary>
            Upper layer of SIP Stack.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer.ItsLowerLayer">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            A DialogManager alabbi esetekben tud lekezelni SIP uzenetet:
            - request indukal dialogust
            - request mid-dialog request
            - response kiepit egy dialogust
            - response mid-dialog request-re kapott response
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleReceivedMessages(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Beerkezo uzenetek lekezelese.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleTransmitMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            UserAgent-tol kapott message.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.DoesCreateDialog(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Eldonti, hogy egy requestre kapott response kiepiti-e a dialogust.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.DoesCreateDialog(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Eldonti, hogy egy kuldott/fogadott request indukal-e dialogust.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.IsTargetRefreshRequest(Ozeki.VoIP.SIP.Message.Data.MethodType)">
      <summary>
            Eldonti, hogy egy request target refresh request-e. Alapesetben csak a re-INVITE szamit annak.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.IsTerminateRequest(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Ellenorzi, hogy egy mid-dialog request olyan uzenet, ami lezarja a dialogust.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleTransmitRequest(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Kikuldott request lekezelese.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleTransmitResponse(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Bejovo request-re kikuldjuk a valaszt.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleReceivedResponse(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Bejovo response lekezelese.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.HandleReceivedRequest(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Bejovo request-ek lekezelese.
            The UAS will receive the request from the transaction layer. 
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.UACCreateDialog(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Kimeno INVITE-ra kaptunk valaszt, ami kiepiti a dialogust.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.DialogLayer.UASCreateDialog(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Bejovo INVITE-ra kuldunk valaszt, ami kiepiti a dialogust.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.SIPStack">
      <summary>
            Felépíti a SIP Stack et
            A Stack 4 rétegből áll TransportLayer, Transaction, Dialog, UserAgent és ezek egymás felett helyezkednek el.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.SIPStack.ConnectLayers(Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer,Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer)">
      <summary>
            Összekapcsolja a rétegeket
            </summary>
      <param name="lowerLayer">
      </param>
      <param name="upperLayer">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.TransactionLayer.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.TransactionLayer.TransmitMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Transmit some message from this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.Transaction.TransactionLayer.ItsUpperLayer">
      <summary>
            Upper layer of SIP Stack.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.Transaction.TransactionLayer.ItsLowerLayer">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.UA.ContactAddressContainer">
      <summary>
            Dialog layer-hez kell, mert a fentrol erkezo SIP uzenethez
            meg hozza kell adni egy Contact header field-et.
            A contact address-t pedig nem tudjuk kideriteni sehogy, mert
            a PhoneLine a Softphone szintjen van, es amugy is a dialog
            layer-hez csak egy SIPMessage megy le.
            
            Regisztraciokor hozzaadjuk a PhoneLine-ok contact address-et.
            Lokalis cim alapjan azonositjuk oket.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.UserAgents.IUserAgentExtension.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.UserAgents.IUserAgentExtension.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.UserAgents.IUserAgentExtension.UserAgent">
      <summary>
            Az Extension UserAgent-je
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.UserAgents.CancelHandler.ProcessCancel(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming CANCEL request.
            </summary>
      <remarks>
            9.2 Canceling a Request / Server Behavior
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.UserAgents.UserAgent.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.UserAgents.UserAgent.ItsUpperLayer">
      <summary>
            Upper layer of SIP Stack.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.UserAgents.UserAgent.ItsLowerLayer">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransaction.InviteMode">
      <summary>
            True, if the request was an INVITE.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransactionState.InformTU">
      <summary>
            TU-nak uzen a tranzakcio allapotarol.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransactionState.StateChange">
      <summary>
            A megadott allapotra ugrik.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransactionState.PassToTU">
      <summary>
            Feldobja az uzenetet a TU-nak.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransactionState.Retransmit">
      <summary>
            Ujrakuldi a generalt request-et/response-t a transport retegnek.
            </summary>
    </member>
    <member name="E:Ozeki.VoIP.SIP.Layers.Transaction.AbstractTransactionState.SendToTransport">
      <summary>
            Kuld egy uzenetet a transport retegnek.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.ClientTransaction.DoesMatchResponse(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Determine whatever the given response is matched to the client transaction.
            </summary>
      <remarks>
            1.  If the response has the same value of the branch parameter in
                the top Via header field as the branch parameter in the top
                Via header field of the request that created the transaction.
                
            2.  If the method parameter in the CSeq header field matches the
                method of the request that created the transaction.  The
                method is needed since a CANCEL request constitutes a
                different transaction, but shares the same value of the branch
                parameter.
            </remarks>
      <param name="resp">The message</param>
      <returns>True if the message is good for the client transaction.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.ServerTransactionState.ResponseReceived(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Response received from TU.
            </summary>
      <param name="resp">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.ServerTransactionState.RequestReceived(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Request received from transport.
            </summary>
      <param name="request">
      </param>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SInviteAcceptedState">
      <summary>
            INVITE server transaction Accepted state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SNonInviteCompletedState">
      <summary>
            Non-INVITE server transaction Completed state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SNonInviteProceedingState">
      <summary>
            Non-INVITE server transaction Proceeding state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SNonInviteTryingState">
      <summary>
            Non-INVITE server transaction Trying state
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transaction.TransactionContainer.FindCancelTransaction(Ozeki.VoIP.SIP.Layers.Transaction.TransactionID)">
      <summary>
            Megkeresi a CANCEL-hez tartozo tranzakciot.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SIP.Layers.Transaction.TransactionStates.ACCEPTED">
      <summary>
            RFC 6026: Uj allapot az INVITE Server Transaction kezelesere
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.CInviteCompletedState">
      <summary>
            INVITE client transaction "Completed" state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.CInviteProceedingState">
      <summary>
            INVITE client transaction "Proceeding" state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.CInviteCallingState">
      <summary>
            INVITE client transaction "Calling" state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.CNonInviteCompletedState">
      <summary>
            Non-INVITE client transaction "Completed" state, Non-INVITE mode
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.NonInviteProceedingState">
      <summary>
            Non-INVITE client transaction "Proceeding" state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.CNonInviteTryingState">
      <summary>
            Non-INVITE client transaction "Trying" state, Non-INVITE mode
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SInviteCompletedState">
      <summary>
            INVITE server transaction Completed state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SInviteConfirmedState">
      <summary>
            INVITE server transaction Confirmed state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transaction.States.SInviteProceedingState">
      <summary>
            INVITE server transaction Proceeding state
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.UA.RequestContentBuffer">
      <summary>
            Message Contents
            </summary>
      <remarks>
            A komminukáció során szükség van arra, hogy a kiküldött üzenetek tartalmait nyilván tudjuk tartani.
            Ugyanis ezt eddig a tranzakciót indító üzenetekben tartottuk nyilván. Ezzel az a baj, hogy ezt a tartalmat
            csak a tranzakción keresztül lehetett elérni, ami referencuiális hivatkozást generált. Így például az 
            authentikációnál elő kell keresni a tranzakciót lekérni az ő üzenetét majd kimásolni a tartalmát.
            Egy ez az információ nem egy jól elkülönített helyen jelenik meg, hanem a kódban fragmentálva. Mivel 
            minket azonban pl csak az authentikálásnál az üzenet eredeti tartalma érdekelt, ezt ebben a bufferben
            tárolni tudjuk, így a magasabb rendű komponensek nem függnek az alacsonyabaktól.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.SIPAddress.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIP.SIPAddress" /> class.
            </summary>
      <param name="displayName">
      </param>
      <param name="userName">
      </param>
      <param name="address">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.SIPAddress.#ctor(Ozeki.VoIP.AddrSpecType,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SIP.SIPAddress" /> class.
            </summary>
      <param name="addrSpecType">
      </param>
      <param name="displayName">
      </param>
      <param name="userName">
      </param>
      <param name="address">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.SIPAddress.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.
                            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.VoIP.SIP.SIPAddress.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.VoIP.SIP.SIPAddress.AddrSpecType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.SIPAddress.UserName">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.SIPAddress.DisplayName">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.SIPAddress.Address">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.IDFactories.TestIDFactory">
      <summary>
            Teszteléshez jól jöhet, mert mindig +1 el novekednek az id-k
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.ISIPMessageManipulator">
      <summary>
            Input/Output SIP Message Manipulator.
            </summary>
      <remarks>
            During the SIP communication the SIP stack sends and receives messages that can be manipulated
            through this Manipulator interface. As the system is totally closed, therefore the messages
            can only be modified by string manipulation right before sending or after receiving them.
            It is possible to inster new extension headers into the messages according to the content.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.ISIPMessageManipulator.PerformReceivedMessage(System.String)">
      <summary>
            Transforms the incoming SIP message.
            </summary>
      <param name="incomingMessage">The text representation of incoming SIP message.</param>
      <returns>Text representation of the manipulated SIP message.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.ISIPMessageManipulator.PerformSendMessage(System.String)">
      <summary>
            Transforms the outgoing SIP message.
            </summary>
      <param name="outGoingMessage">The text representation of outgoing SIP message.</param>
      <returns>Text representation of the manipulated SIP message.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.ISIPMessageManipulator.PrepareAdditionalHeaders(System.String)">
      <summary>
            Calculates additional header fields for the outgoing SIP message.
            </summary>
      <param name="outGoingMessage">The text representation of outgoing SIP message.</param>
      <returns>Nonempty list of extra header field, otherwise null.</returns>
    </member>
    <member name="T:Ozeki.VoIP.SIP.PreparedExtensionHeader">
      <summary>
            Extra SIP header provided by the SIP manipulator
            </summary>
      <remarks>
            The ISIPMessageManipulator can insert extra headers into the SIP messages,
            the name-value pairs of these headers are converted into SIP headers in this class.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.PreparedExtensionHeader.#ctor(System.String,System.String)">
      <summary>
            Extra SIP header provided by the SIP manipulator
            </summary>
      <param name="name">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.CommonSIPParserExtension.ParseExtensionMethod">
      <summary>
            Esetleges Extension Method-ok parse-olását végzi.
            </summary>
      <returns>Method objektummal tér vissza ha megtalált egy extension method-ot, egyébként null.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.CommonSIPParserExtension.ParseHeader(System.String)">
      <summary>
            Az RFC által megadott extension header-ök parseolása.
            </summary>
      <param name="headerName">Extension Header neve amit megtalált az alap parser.</param>
      <returns>A parse-olt extension header, vagy null ha valamilyen hiba lép fel a parse-olás folyamán.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIPParserExtension.RFCNumber">
      <summary>
            The RFC Number of the extension.
            </summary>
      <returns>Number of the extension.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIPParserExtension.GetRFCDependencies">
      <summary>
            Get RFC references 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.UASCreateDialog(Ozeki.VoIP.SIP.Message.Response.Response,System.String)">
      <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.UACCreateDialog(Ozeki.VoIP.SIP.Message.Response.Response,System.String)">
      <summary>
            12.1.2 Creation of a Dialog / UAC Behavior
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.AddUASContactHeader(Ozeki.VoIP.SIP.Message.Response.Response,System.String)">
      <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            The URI provided in the Contact header field MUST be a SIP
            or SIPS URI.  If the request that initiated the dialog contained a
            SIPS URI in the Request-URI or in the top Record-Route header field
            value, if there was any, or the Contact header field if there was no
            Record-Route header field, the Contact header field in the response
            MUST be a SIPS URI.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.AddUACContactHeader(Ozeki.VoIP.SIP.Message.Request.Request,System.String)">
      <summary>
            12.1.2 Creation of a Dialog / UAC Behavior
            When a UAC sends a request that can establish a dialog (such as an
            INVITE) it MUST provide a SIP or SIPS URI with global scope in the
            Contact header field of the request.  If the request has a Request-URI
            or a topmost Route header field value with a SIPS URI, the
            Contact header field MUST contain a SIPS URI.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.UpdateRouteSet(Ozeki.VoIP.SIP.Message.SIPMessage,System.Boolean)">
      <summary>
            Updates the route set of the dialog.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.CopyRecordRouteHeaders(Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            12.1.1 Creation of a Dialog / UAS behavior
            When a UAS responds to a request with a response that establishes a
            dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route
            header field values from the request into the response (including the
            URIs, URI parameters, and any Record-Route header field parameters,
            whether they are known or unknown to the UAS) and MUST maintain the
            order of those values.         
            </summary>
      <param name="req">Record-Route from the request</param>
      <param name="resp">Record-Route into the response</param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.HandleReceivedResponse(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Bejovo response lekezelese
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.HandleReceivedRequest(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            12.2.2 Requests within a Dialog / UAS Behavior
            Bejovo Request lekezelese
            </summary>
      <param name="req">
      </param>
      <returns>False, ha nem sikerult lekezelni az uzenetet, mert kisebb CSeq-et kaptunk, mint korabban</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.Terminate">
      <summary>
            Terminates the dialog.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Dialog.NewDialog.IsSecure(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            If the request that initiated the dialog contained a
            SIPS URI in the Request-URI or in the top Record-Route header field
            value, if there was any, or the Contact header field if there was no
            Record-Route header field, the Contact header field in the response
            MUST be a SIPS URI.
            </summary>
      <param name="req">The first request of the created dialog.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.Transport.SIPTransportLayer">
      <summary>
            RFC 3261 - 18 Transport
            
            The transport layer is responsible for the actual transmission of
            requests and responses over network transports.  This includes
            determination of the connection to use for a request or response in
            the case of connection-oriented transports.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.Transport.SIPTransportLayer.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.Transport.SIPTransportLayer.ItsUpperLayer">
      <summary>
            Upper layer of SIP Stack.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Layers.Transport.SIPTransportLayer.ItsLowerLayer">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SIP.Layers.MessageFactory._supportedOptionTags">
      <summary>
            Supported option tags
            </summary>
      <remarks>
            See more: http://www.iana.org/assignments/sip-parameters
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateRequest(Ozeki.VoIP.SIP.Message.Data.Method,System.String,System.String,System.Int32,Ozeki.VoIP.SIP.SIPAddress,System.String,Ozeki.VoIP.SIP.SIPAddress,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType,System.String)">
      <summary>
            8.1.1 Generating the Request
            
            A REGISTER-hez a <see cref="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateRegisterRequest(Ozeki.VoIP.SIP.SIPAddress,System.String,System.String,System.String,System.Int32,System.Int32,System.String,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType,System.Boolean)" /> metodust kell hasznalni.
            A CANCEL-hez a <see cref="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateCancelRequest(Ozeki.VoIP.SIP.Message.Request.Request)" /> metodust kell hasznalni.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateRequest(Ozeki.VoIP.SIP.Message.Data.Method,Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec,Ozeki.VoIP.SIP.Message.Headers.Via,System.String,System.Int32,Ozeki.VoIP.SIP.SIPAddress,System.String,Ozeki.VoIP.SIP.SIPAddress,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType,System.String)">
      <summary>
            8.1.1 Generating the Request
            
            A valid SIP request formulated by a UAC MUST, at a minimum, contain
            the following header fields: To, From, CSeq, Call-ID, Max-Forwards,
            and Via; all of these header fields are mandatory in all SIP
            requests.
            
            A REGISTER-hez a PrepareNewRegister metodust kell hasznalni.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateRegisterRequest(Ozeki.VoIP.SIP.SIPAddress,System.String,System.String,System.String,System.Int32,System.Int32,System.String,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType,System.Boolean)">
      <summary>
            10.2 Constructing the REGISTER Request
            Except as noted, the construction of the REGISTER request and the
            behavior of clients sending a REGISTER request is identical to the
            general UAC behavior described in Section 8.1 (UACGenerateRequest)
            
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateCancelRequest(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            9.1 Canceling a Request / Client Behavior
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateResponse(Ozeki.VoIP.SIP.Message.Request.Request,System.Int32,Ozeki.VoIP.SIP.Layers.Dialog.DialogID,Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec)">
      <summary>
            8.2.6 UAS Behavior / Generating the Response
            Ha a dialogID nem null, akkor a valasz To tag-jeben a dialogID LocalTag-je lesz, egyebkent general
            uj To tag-et.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateResponse(Ozeki.VoIP.SIP.Message.Request.Request,System.Int32,System.String,Ozeki.VoIP.SIP.Layers.Dialog.DialogID,Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec)">
      <summary>
            8.2.6 UAS Behavior / Generating the Response
            Ha a dialogID nem null, akkor a valasz To tag-jeben a dialogID LocalTag-je lesz, egyebkent general
            uj To tag-et.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateResponse(Ozeki.VoIP.SIP.Message.Request.Request,System.Int32,System.Boolean,System.String,Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec)">
      <summary>
            8.2.6 UAS Behavior / Generating the Response
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateResponse(Ozeki.VoIP.SIP.Message.Request.Request,System.Int32,System.String,System.Boolean,System.String,Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec)">
      <summary>
            8.2.6 UAS Behavior / Generating the Response
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.SetupProvisionalResponse(Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            8.2.6.1 UAS Behavior / Sending a Provisional Response
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateMidDialogRequest(Ozeki.VoIP.SIP.Layers.Dialog.NewDialog,Ozeki.VoIP.SIP.Message.Data.Method,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType)">
      <summary>
            12.2.1.1 Requests within a Dialog / UAC Behavior / Generating the Request.
            CSeq will be calculated automatically.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GenerateMidDialogRequest(Ozeki.VoIP.SIP.Layers.Dialog.NewDialog,Ozeki.VoIP.SIP.Message.Data.Method,System.Int32,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType)">
      <summary>
            12.2.1.1 Requests within a Dialog / UAC Behavior / Generating the Request (with Contact)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Layers.MessageFactory.GetDialogRequestUriAndRoute(Ozeki.VoIP.SIP.Layers.Dialog.NewDialog)">
      <summary>
            The UAC uses the remote target and route set to build the Request-URI and Route header field of the request.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Header">
      <summary>
            SIP Header absztrakció.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.ProtocolLayer.NullTransmitHandler">
      <summary>
            Null Object design pattern.
            </summary>
      <remarks>
            It is better to do nothing than genererate null reference exception
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec.SIPStringPart">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec.Username">
      <summary>
            A felhasználónév sip es sips esetében.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec.Hostport">
      <summary>
            Hostname port-al paraméterekkel együtt.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec.Address">
      <summary>
            Hostname
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.AddrSpec.Port">
      <summary>
            Ha találtunk portot a címben akkor azt megjegyeztük itt, nem biztos, hogy belekerül a meglévő port.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PStatusLine">
      <grammar>
            Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase crlf
            </grammar>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRequestLine">
      <summary>
            Request-Line   =  Method SP Request-uri SP SIP-Version crlf
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PToken">
      <summary>
            token =  1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "`" / "'" / "~" )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PWWWAuthenticate">
      <summary>
            WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PChallange">
      <summary>
            challenge           =  ("Digest" LWS digest-cln *(COMMA digest-cln))
                                  / other-challenge
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PDigestCln">
      <summary>
            digest-cln          =  realm / domain / nonce
                                    / opaque / stale / algorithm
                                    / qop-options / auth-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PLdqout">
      <summary>
            LDQUOT  =  SWS DQUOTE; open double quotation mark
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRdqout">
      <summary>
            RDQUOT  =  DQUOTE SWS ; close double quotation mark
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.POtherChallange">
      <summary>
            other-challenge     =  auth-scheme LWS auth-param
                                   *(COMMA auth-param)
            auth-scheme       =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PWarning">
      <summary>
            Warning        =  "Warning" HCOLON warning-value *(COMMA warning-value)
            warning-value  =  warn-code SP warn-agent SP warn-text
            warn-code      =  3DIGIT
            warn-text      =  quoted-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PVia">
      <summary>
            Via               =  ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PViaParm">
      <summary>
            via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PHost">
      <summary>
            host =  hostname / IPv4address / IPv6reference
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PSentBy">
      <summary>
            sent-by           =  host [ COLON port ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PSentProtocol">
      <summary>
            sent-protocol     =  protocol-name SLASH protocol-version
                                 SLASH transport
            protocol-name     =  "SIP" / token
            protocol-version  =  token
            transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
                                 / other-transport
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PViaParams">
      <summary>
            via-ttl           =  "ttl" EQUAL ttl
            via-maddr         =  "maddr" EQUAL host
            via-received      =  "received" EQUAL (IPv4address / IPv6address)
            via-branch        =  "branch" EQUAL token
            via-extension     =  generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PUserAgent">
      <summary>
            User-Agent  =  "User-Agent" HCOLON server-val *(LWS server-val)
            server-val       =  product / comment
            product          =  token [SLASH product-version]
            product-version  =  token
            comment  =  LPAREN *(ctext / quoted-pair / comment) RPAREN
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PUnsupported">
      <summary>
            Unsupported  =  "Unsupported" HCOLON option-tag *(COMMA option-tag)
            option-tag = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PTo">
      <summary>
            To        =  ( "To" / "t" ) HCOLON ( name-addr / addr-spec ) *( SEMI to-param )
            
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PToParam">
      <summary>
            to-param  =  tag-param / generic-param
            tag-param   =  "tag" EQUAL token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PTimestamp">
      <summary>
            Timestamp  =  "Timestamp" HCOLON 1*(DIGIT)
                          [ "." *(DIGIT) ] [ LWS delay ]
            delay      =  *(DIGIT) [ "." *(DIGIT) ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PSupported">
      <summary>
            Supported  =  ( "Supported" / "k" ) HCOLON
                          [option-tag *(COMMA option-tag)]
            option-tag     =  token              
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PSubject">
      <summary>
            Subject  =  ( "Subject" / "s" ) HCOLON [TEXT-UTF8-TRIM]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PServer">
      <summary>
            Server           =  "Server" HCOLON server-val *(LWS server-val)
            server-val       =  product / comment
            product          =  token [SLASH product-version]
            product-version  =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRoute">
      <summary>
            Route        =  "Route" HCOLON route-param *(COMMA route-param)
            route-param  =  name-addr *( SEMI rr-param )
            rr-param     = generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRetryAfter">
      <summary>
            Retry-After  =  "Retry-After" HCOLON delta-seconds
                            [ comment ] *( SEMI retry-param )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRetryParam">
      <summary>
            retry-param  =  ("duration" EQUAL delta-seconds)
                            / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRequire">
      <summary>
            Require       =  "Require" HCOLON option-tag *(COMMA option-tag)
            option-tag     =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PReplyTo">
      <summary>
            Reply-To      =  "Reply-To" HCOLON rplyto-spec
            rplyto-spec   =  ( name-addr / addr-spec )
                             *( SEMI rplyto-param )
            rplyto-param  =  generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRecordRoute">
      <summary>
            Record-Route  =  "Record-Route" HCOLON rec-route *(COMMA rec-route)
            rec-route     =  name-addr *( SEMI rr-param )
            rr-param      =  generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PProxyRequire">
      <summary>
            Proxy-Require  =  "Proxy-Require" HCOLON option-tag
                              *(COMMA option-tag)
            option-tag     =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PProxyAuthenticate">
      <summary>
            Proxy-Authenticate  =  "Proxy-Authenticate" HCOLON challenge
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PPriority">
      <summary>
            Priority        =  "Priority" HCOLON priority-value
            priority-value  =  "emergency" / "urgent" / "normal"
                              / "non-urgent" / other-priority
            other-priority  =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.POrganization">
      <summary>
            Organization  =  "Organization" HCOLON [TEXT-UTF8-TRIM]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PMinExpires">
      <summary>
            Min-Expires  =  "Min-Expires" HCOLON delta-seconds
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PMIMEVersion">
      <summary>
            MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PMaxForwards">
      <summary>
            Max-Forwards  =  "Max-Forwards" HCOLON 1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PInReplyTo">
      <summary>
            In-Reply-To  =  "In-Reply-To" HCOLON callid *(COMMA callid)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PFrom">
      <summary>
            From        =  ( "From" / "f" ) HCOLON from-spec
            from-spec   =  ( name-addr / addr-spec )
                           *( SEMI from-param )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PFromParam">
      <summary>
            from-param  =  tag-param / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PExpires">
      <summary>
            Expires     =  "Expires" HCOLON delta-seconds
            delta-seconds = 1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PErrorInfo">
      <summary>
            Error-Info  =  "Error-Info" HCOLON error-uri *(COMMA error-uri)
            error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PErrorUri">
      <summary>
            error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PDate">
      <summary>
            Date          =  "Date" HCOLON SIP-date
            SIP-date      =  rfc1123-date
            rfc1123-date  =  wkday "," SP date1 SP time SP "GMT"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PCSeq">
      <summary>
            CSeq  =  "CSeq" HCOLON 1*DIGIT LWS Method
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContentType">
      <summary>
            Content-Type     =  ( "Content-Type" / "c" ) HCOLON media-type
            media-type       =  m-type SLASH m-subtype *(SEMI m-parameter)
            m-type           =  discrete-type / composite-type
            discrete-type    =  "text" / "image" / "audio" / "video"
                                / "application" / extension-token
            composite-type   =  "message" / "multipart" / extension-token
            extension-token  =  ietf-token / x-token
            ietf-token       =  token
            x-token          =  "x-" token
            m-subtype        =  extension-token / iana-token
            iana-token       =  token
            m-parameter      =  m-attribute EQUAL m-value
            m-attribute      =  token
            m-value          =  token / quoted-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContentLength">
      <summary>
            Content-Length  =  ( "Content-Length" / "l" ) HCOLON 1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContentLanguage">
      <summary>
            Content-Language  =  "Content-Language" HCOLON
                                language-tag *(COMMA language-tag)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PLanguageTag">
      <summary>
            language-tag      =  primary-tag *( "-" subtag )
            primary-tag       =  1*8ALPHA
            subtag            =  1*8ALPHA
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContentEncoding">
      <summary>
            Content-Encoding  =  ( "Content-Encoding" / "e" ) HCOLON
                                 content-coding *(COMMA content-coding)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PComma">
      <summary>
            COMMA   =  SWS "," SWS ; comma
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContentDisposition">
      <summary>
            Content-Disposition   =  "Content-Disposition" HCOLON
                                     disp-type *( SEMI disp-param )
            disp-type             =  "render" / "session" / "icon" / "alert"
                                     / disp-extension-token
            
            disp-param            =  handling-param / generic-param
            handling-param        =  "handling" EQUAL
                                     ( "optional" / "required"
                                     / other-handling )
            other-handling        =  token
            disp-extension-token  =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContact">
      <summary>
            Contact        =  ("Contact" / "m" ) HCOLON
                              ( STAR / (contact-param *(COMMA contact-param)))
            contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContactParam">
      <summary>
            contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PContactParams">
      <summary>
            contact-params     =  c-p-q / c-p-expires
                                  / contact-extension
            c-p-q              =  "q" equal qvalue
            c-p-expires        =  "expires" equal delta-seconds
            contact-extension  =  generic-param
            delta-seconds      =  1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PQvalue">
      <summary>
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                             / ( "1" [ "." 0*3("0") ] )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PGenericParam">
      <summary>
            generic-param  =  token [ EQUAL gen-value ]
            gen-value      =  token / host / quoted-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PEqual">
      <summary>
            EQUAL   =  SWS "=" SWS 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PNameAddr">
      <summary>
            name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
            display-name   =  *(token LWS)/ quoted-string
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PDisplayName(System.Char)">
      <summary>
            display-name   =  *(token LWS)/ quoted-string
            sajnos ez nem kornyezetfuggetlen
            </summary>
      <param name="endChar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PUriHeader">
      <summary>
            hname "=" hvalue
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PUriParameters">
      <summary>
            uri-parameters    =  *( ";" uri-parameter)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PUriParameter">
      <summary>
            uri-parameter     =  transport-param / user-param / method-param
                                 / ttl-param / maddr-param / lr-param / other-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PCallInfo">
      <summary>
            Call-Info   =  "Call-Info" HCOLON info *(COMMA info)
            info        =  LAQUOT absoluteURI RAQUOT *( SEMI info-param) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PInfoParam">
      <summary>
            info-param  =  ( "purpose" EQUAL ( "icon" / "info"
                           / "card" / token ) ) / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PCallID">
      <summary>
            Call-ID  =  ( "Call-ID" / "i" ) HCOLON callid
            callid   =  word [ "@" word ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAuthorization">
      <summary>
            Authorization     =  "Authorization" HCOLON credentials
            
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PProxyAuthorization">
      <summary>
            Proxy-Authorization  =  "Proxy-Authorization" HCOLON credentials
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PCredentials">
      <summary>
            credentials       =  ("Digest" LWS digest-response)
                                 / other-response
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PDigestResponse">
      <summary>
            dig-resp *(COMMA dig-resp)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PDigResp">
      <summary>
            dig-resp          =  username / realm / nonce / digest-uri
                                  / dresponse / algorithm / cnonce
                                  / opaque / message-qop
                                  / nonce-count / auth-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAuthParam">
      <summary>
            auth-param        =  auth-param-name EQUAL
                                 ( token / quoted-string )
            auth-param-name   =  token
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.POtherResponse">
      <summary>
            other-response    =  auth-scheme LWS auth-param
                                 *(COMMA auth-param)
            auth-scheme       =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAuthenticationInfo">
      <summary>
            Authentication-Info  =  "Authentication-Info" HCOLON ainfo
                                    *(COMMA ainfo)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAinfo">
      <summary>
            ainfo                =  nextnonce / message-qop
                                     / response-auth / cnonce
                                    / nonce-count
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAllow">
      <summary>
            Allow  =  "Allow" HCOLON [Method *(COMMA Method)]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAlertInfo">
      <summary>
            Alert-Info   =  "Alert-Info" HCOLON alert-param *(COMMA alert-param)
            alert-param  =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAcceptLanguage">
      <summary>
            Accept-Language  =  "Accept-Language" HCOLON
                                 [ language *(COMMA language) ]
            language         =  language-range *(SEMI accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PLanguage">
      <summary>
            language         =  language-range *(SEMI accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAccept">
      <summary>
            Accept         =  "Accept" HCOLON
                              [ accept-range *(COMMA accept-range) ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAcceptRange">
      <summary>
             accept-range   =  media-range *(SEMI accept-param)
             media-range    =  ( "*/*"
                              / ( m-type SLASH "*" )
                              / ( m-type SLASH m-subtype )
                              ) *( SEMI m-parameter )
            accept-param   =  ("q" EQUAL qvalue) / generic-param
             </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAcceptParam">
      <summary>
            accept-param   =  ("q" EQUAL qvalue) / generic-param
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PAcceptEncoding">
      <summary>
            Accept-Encoding  =  "Accept-Encoding" HCOLON
                                 [ encoding *(COMMA encoding) ]
            encoding         =  codings *(SEMI accept-param)
            codings          =  content-coding / "*"
            content-coding   =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Parser.SIP3261Parser.PRequestUri(System.String)">
      <summary>
            Request-URI  =  SIP-URI / SIPS-URI / absoluteURI
            </summary>
      <remarks>
            Same to the AddrSpec.
            </remarks>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Parser.SIP3261ParserEx">
      <summary>
            Szálbiztos változat
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Utils.Util.InnerSepPrintList(System.Collections.Generic.IEnumerable{Ozeki.VoIP.SIP.Message.Utils.ISIPMessagePart},System.String)">
      <summary>
      </summary>
      <param name="list">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Utils.Util.FirstSepPrintList(System.Collections.Generic.IEnumerable{Ozeki.VoIP.SIP.Message.Utils.ISIPMessagePart},System.Char)">
      <summary>
      </summary>
      <param name="list">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Utils.Util.InnerSepPrintObjectList(System.Collections.Generic.IEnumerable{System.Object},System.String)">
      <summary>
      </summary>
      <param name="list">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Utils.Util.GetNamedParam(System.Collections.Generic.IEnumerable{Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.GenericParam},System.String)">
      <summary>
            Egy adott nevű általános SIP paramétert keres meg a paraméter listában.
            </summary>
      <param name="gps">Általános paraméterek listája.</param>
      <param name="name">A keresendő paraméter neve.</param>
      <returns>Ha megtalálta a paramétert akkor a paramétert reprezentáló objektummal tér vissza, ha nem akkor null-al.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Utils.Util.GetNamedUriParam(System.Collections.Generic.IEnumerable{Ozeki.VoIP.SIP.Message.Data.UriParameter},System.String)">
      <summary>
            Egy adott nevű Uri paramétert keres meg a paraméter listában.
            </summary>
      <param name="gps">Általános paraméterek listája.</param>
      <param name="name">A keresendő paraméter neve.</param>
      <returns>Ha megtalálta a paramétert akkor a paramétert reprezentáló objektummal tér vissza, ha nem akkor null-al.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Combinator.Concrete.SIPHeaderBuilder.Via(Ozeki.Network.TransportType,System.String,System.String,System.Nullable{System.Int32})">
      <summary>
            8.1.1.7 Via
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.Method">
      <summary>
      </summary>
      <grammar>
            Method            =  INVITEm / ACKm / OPTIONSm / BYEm
                                 / CANCELm / REGISTERm
                                 / extension-method
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.SIPUri">
      <summary>
      </summary>
      <grammar>
            sip-uri          =  "sip:" [ userinfo ] hostport
                                uri-parameters [ headers ]
            sips-uri         =  "sips:" [ userinfo ] hostport
                                uri-parameters [ headers ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.SIPVersion">
      <summary>
      </summary>
      <grammar>
            SIP-Version    =  "SIP" "/" 1*DIGIT "." 1*DIGIT
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.UriParameter">
      <summary>
      </summary>
      <grammar>
            uri-parameter     =  transport-param / user-param / method-param
                                 / ttl-param / maddr-param / lr-param / other-param
            other-param       =  pname [ "=" pvalue ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.UriParameters.MethodParam">
      <summary>
            method-param      =  "method=" Method
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Data.UriParameters.TtlParam">
      <summary>
      </summary>
      <grammar>
            ttl               =  1*3DIGIT
            ttl-param         =  "ttl=" ttl
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Accept">
      <summary>
      </summary>
      <grammar>
            Accept         =  "Accept" hcolon
                               [ accept-range *(comma accept-range) ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.AcceptEncoding">
      <summary>
      </summary>
      <grammar>
            
            Accept-Encoding  =  "Accept-Encoding" hcolon
                                [ encoding *(comma encoding) ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.AcceptLanguage">
      <summary>
      </summary>
      <grammar>
            Accept-Language  =  "Accept-Language" hcolon
                                 [ language *(comma language) ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.AlertInfo">
      <summary>
            Alert-Info   =  "Alert-Info" hcolon alert-param *(comma alert-param)
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Allow">
      <summary>
      </summary>
      <grammar>
            Allow  =  "Allow" hcolon [Method *(comma Method)]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.AuthenticationInfo">
      <summary>
      </summary>
      <grammar>
            Authentication-Info  =  "Authentication-Info" hcolon ainfo
                                    *(comma ainfo)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Authorization">
      <summary>
      </summary>
      <grammar>
            Authorization     =  "Authorization" hcolon credentials
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.CallID">
      <summary>
            Call-IDD  =  ( "Call-IDD" / "i" ) hcolon callid
            callid   =  word [ "@" word ]
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.CallInfo">
      <summary>
            Call-Info   =  "Call-Info" hcolon info *(comma info)
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Contact">
      <summary>
            Contact        =  ("Contact" / "m" ) hcolon
                              ( star / (contact-param *(comma contact-param)))
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ContentDisposition">
      <summary>
      </summary>
      <grammar>
            Content-Disposition   =  "Content-Disposition" hcolon
                                     disp-type *( semi disp-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ContentEncoding">
      <summary>
      </summary>
      <grammar>
            Content-Encoding  =  ( "Content-Encoding" / "e" ) hcolon
                                 content-coding *(comma content-coding)
            content-coding   =  token                      
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ContentLanguage">
      <summary>
      </summary>
      <grammar>
            Content-Language  =  "Content-Language" hcolon
                                 language-tag *(comma language-tag)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ContentLength">
      <summary>
      </summary>
      <grammar>
            Content-Length  =  ( "Content-Length" / "l" ) hcolon 1*DIGIT
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ContentType">
      <summary>
      </summary>
      <grammar>
            Content-Type     =  ( "Content-Type" / "c" ) hcolon media-type
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.CSeq">
      <summary>
      </summary>
      <grammar>
            CSeq  =  "CSeq" hcolon 1*DIGIT lws Method
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.AcceptRange">
      <summary>
      </summary>
      <grammar>
            accept-range   =  media-range *(semi accept-param)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.AlertParam">
      <summary>
      </summary>
      <grammar>
            alert-param  =  laquot absoluteuri raquot *( semi generic-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.Challenge">
      <summary>
      </summary>
      <grammar>
            challenge           =  ("Digest" lws digest-cln *(comma digest-cln))
                                   / other-challenge
            other-challenge     =  auth-scheme lws auth-param
                                  *(comma auth-param)
            auth-scheme       =  token                       
            auth-param        =  auth-param-name equal
                                 ( token / quoted-string )
            auth-param-name   =  token                      
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.ContactParam">
      <summary>
      </summary>
      <grammar>
            contact-param  =  (name-addr / addr-spec) *(semi contact-params)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.Credentials">
      <summary>
      </summary>
      <grammar>
            credentials       =  ("Digest" lws digest-response)
                                 / other-response
            digest-response   =  dig-resp *(comma dig-resp)
            auth-param        =  auth-param-name equal
                                 ( token / quoted-string )
            auth-param-name   =  token
            other-response    =  auth-scheme lws auth-param
                                 *(comma auth-param)
            auth-scheme       =  token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Authentication.DigestElement">
      <summary>
      </summary>
      <grammar>
             dig-resp =  username / realm / nonce / digest-uri
                         / dresponse / algorithm / cnonce
                         / opaque / message-qop
                         / nonce-count / auth-param
             algorithm           =  "algorithm" equal ( "MD5" / "MD5-sess"
                                    / token )            
             username          =  "username" equal username-value
             username-value    =  quoted-string
             
             digest-uri        =  "uri" equal ldquot digest-uri-value rdquot
             digest-uri-value  =  rquest-uri 
             rquest-uri = "*" / absoluteuri 
             
             message-qop       =  "qop" equal qop-value
             qop-value           =  "auth" / "auth-int" / token
            
             cnonce            =  "cnonce" equal cnonce-value
             cnonce-value      =  nonce-value
             nonce-value       =  quoted-string
             
             nonce-count       =  "nc" equal nc-value
             nc-value          =  8lhex
             
             dresponse         =  "response" equal request-digest
             request-digest    =  ldquot 32lhex rdquot
             
             auth-param        =  auth-param-name equal
                                  ( token / quoted-string )
             auth-param-name   =  token
            
             auth-scheme       =  token
             realm               =  "realm" EQUAL realm-value
             realm-value         =  quoted-string
             </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.DispType">
      <summary>
      </summary>
      <grammar>
            disp-type             =  "render" / "session" / "icon" / "alert"
                                       / disp-extension-token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.Encoding">
      <summary>
      </summary>
      <grammar>
            encoding         =  codings *(semi accept-param)
            codings          =  content-coding / "*"
            content-coding   =  token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.ErrorUri">
      <summary>
      </summary>
      <grammar>
            error-uri   =  laquot absoluteuri raquot *( semi generic-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.GenericParam">
      <summary>
      </summary>
      <grammar>
            generic-param  =  token [ equal gen-value ]
            gen-value      =  token / host / quoted-string
            </grammar>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.GenericParam.Name">
      <summary>
            A paraméter álltalános neve.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.GenericParam.Value">
      <summary>
            A paraméter értéke.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.AcceptParam">
      <summary>
      </summary>
      <grammar>
            accept-param   =  ("q" equal qvalue) / generic-param
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                              / ( "1" [ "." 0*3("0") ] )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.ContactParams">
      <summary>
      </summary>
      <grammar>
            contact-params     =  c-p-q / c-p-expires
                                  / contact-extension
            c-p-q              =  "q" equal qvalue
            c-p-expires        =  "expires" equal delta-seconds
            contact-extension  =  generic-param
            delta-seconds      =  1*DIGIT
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.CpqParam">
      <summary>
      </summary>
      <grammar>
            c-p-q              =  "q" equal qvalue
            qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                              / ( "1" [ "." 0*3("0") ] )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.HandlingParam">
      <summary>
      </summary>
      <grammar>
            disp-param            =  handling-param / generic-param
            handling-param        =  "handling" equal
                                     ( "optional" / "required"
                                     / other-handling )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.CpExpires">
      <summary>
      </summary>
      <grammar>
            c-p-expires        =  "expires" equal delta-seconds
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.FromParam">
      <summary>
      </summary>
      <grammar>
            from-param  =  tag-param / generic-param
            tag-param   =  "tag" equal token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.InfoParam">
      <summary>
      </summary>
      <grammar>
            info-param  =  ( "purpose" equal ( "icon" / "info" / "card" / token ) ) / generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.RetryParam">
      <summary>
      </summary>
      <grammar>
            retry-param  =  ("duration" equal delta-seconds)
                            / generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.ToParam">
      <summary>
      </summary>
      <grammar>
            to-param  =  tag-param / generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.ViaParams">
      <summary>
      </summary>
      <grammar>
            via-params        =  via-ttl / via-maddr
                                 / via-received / via-branch
                                 / via-extension
            via-ttl           =  "ttl" equal ttl
            via-maddr         =  "maddr" equal host
            via-received      =  "received" equal (IPv4address / IPv6address)
            via-branch        =  "branch" equal token
            via-extension     =  generic-param
            </grammar>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.ViaParams.ViaType">
      <summary>
            A Via paraméter statikus típusa.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Data.GenericParams.ViaParams.ViaToken">
      <summary>
            A Via paraméter extension típusa.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.Info">
      <summary>
      </summary>
      <grammar>
            info  =  laquot absoluteuri raquot *( semi info-param)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.Language">
      <summary>
      </summary>
      <grammar>
            language         =  language-range *(semi accept-param)
            language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.LanguageTag">
      <summary>
      </summary>
      <grammar>
            language-tag      =  primary-tag *( "-" subtag )
            primary-tag       =  1*8ALPHA
            subtag            =  1*8ALPHA
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.MediaType">
      <summary>
      </summary>
      <grammar>
            media-type       =  m-type slash m-subtype *(semi m-parameter)
            m-type           =  discrete-type / composite-type
            discrete-type    =  "text" / "image" / "audio" / "video"
                                / "application" / extension-token
            composite-type   =  "message" / "multipart" / extension-token
            extension-token  =  ietf-token / x-token
            ietf-token       =  token
            x-token          =  "x-" token
            m-subtype        =  extension-token / iana-token
            iana-token       =  token
            m-parameter      =  m-attribute equal m-value
            m-attribute      =  token
            m-value          =  token / quoted-string
            </grammar>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Message.Headers.Data.MediaType.#ctor">
      <summary>
            application/sdp konstruktor.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.NameAddress">
      <summary>
      </summary>
      <grammar>
            name-addr =  [ display-name ] laquot addr-spec raquot
            display-name = *(token lws)/ quoted-string
            quoted-string  =  [lws] DQUOTE *(qdtext / quoted-pair ) DQUOTE
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.PriorityValue">
      <summary>
      </summary>
      <grammar>
            priority-value  =  "emergency" / "urgent" / "normal"
                               / "non-urgent" / other-priority
            other-priority  =  token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.QopValue">
      <summary>
      </summary>
      <grammar>
            qop-value           =  "auth" / "auth-int" / token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.RecRoute">
      <summary>
      </summary>
      <grammar>
            rec-route     =  name-addr *( semi rr-param )
            rr-param      =  generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.RouteParam">
      <summary>
      </summary>
      <grammar>
            route-param  =  name-addr *( semi rr-param )
            rr-param      =  generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.SendProtocol">
      <summary>
      </summary>
      <grammar>
            sent-protocol     =  protocol-name slash protocol-version
                                 slash transport
            protocol-name     =  "SIP" / token
            protocol-version  =  token                     
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.ServerVal">
      <summary>
      </summary>
      <grammar>
            server-val       =  product / comment
            product          =  token [slash product-version]
            product-version  =  token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.Transport">
      <summary>
      </summary>
      <grammar>
            transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
                                 / other-transport
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.ViaParam">
      <summary>
      </summary>
      <grammar>
            via-parm = sent-protocol lws sent-by *( semi via-params )
            sent-by           =  host [ colon port ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Data.WarningValue">
      <summary>
      </summary>
      <grammar>
            warning-value  =  warn-code SP warn-agent SP warn-text
            warn-code      =  3DIGIT
            warn-agent     =  hostport / pseudonym
            warn-text      =  quoted-string
            pseudonym      =  token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Date">
      <summary>
      </summary>
      <grammar>
            Date          =  "Date" hcolon SIP-date
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ErrorInfo">
      <summary>
      </summary>
      <grammar>
            Error-Info  =  "Error-Info" hcolon error-uri *(comma error-uri)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ExpiresHeader">
      <summary>
      </summary>
      <grammar>
            Expires     =  "Expires" hcolon delta-seconds
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ExtensionHeader">
      <grammar>
            extension-header  =  header-name hcolon header-value
            header-name       =  token
            header-value      =  *(text-utf8char / UTF8-CONT / lws)
            </grammar>
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.From">
      <summary>
      </summary>
      <grammar>
            From        =  ( "From" / "f" ) hcolon from-spec
            from-spec   =  ( name-addr / addr-spec )
                           *( semi from-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.InReplyTo">
      <summary>
      </summary>
      <grammar>
            In-Reply-To  =  "In-Reply-To" hcolon callid *(comma callid)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.MaxForwards">
      <summary>
      </summary>
      <grammar>
            Max-Forwards  =  "Max-Forwards" hcolon 1*DIGIT
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.MIMEVersion">
      <summary>
      </summary>
      <grammar>
            MIME-Version  =  "MIME-Version" hcolon 1*DIGIT "." 1*DIGIT
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.MinExpires">
      <summary>
      </summary>
      <grammar>
            Min-Expires  =  "Min-Expires" hcolon delta-seconds
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Organization">
      <summary>
      </summary>
      <grammar>
            Organization  =  "Organization" hcolon [text-utf8-trim]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Priority">
      <summary>
      </summary>
      <grammar>
            Priority        =  "Priority" hcolon priority-value
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ProxyAuthenticate">
      <summary>
      </summary>
      <grammar>
            Proxy-Authenticate  =  "Proxy-Authenticate" hcolon challenge
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ProxyAuthorization">
      <summary>
      </summary>
      <grammar>
            Proxy-Authorization  =  "Proxy-Authorization" hcolon credentials
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ProxyRequire">
      <summary>
      </summary>
      <grammar>
            Proxy-Require  =  "Proxy-Require" hcolon option-tag
                              *(comma option-tag)
            option-tag = token                  
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.RecordRoute">
      <summary>
            Record-route header
            </summary>
      <grammar>
            Record-Route  =  "Record-Route" hcolon rec-route *(comma rec-route)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.ReplyTo">
      <summary>
      </summary>
      <grammar>
            Reply-To      =  "Reply-To" hcolon rplyto-spec
            rplyto-spec   =  ( name-addr / addr-spec )
                             *( semi rplyto-param )
            rplyto-param  =  generic-param
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Require">
      <summary>
      </summary>
      <grammar>
            Require       =  "Require" hcolon option-tag *(comma option-tag)
            option-tag = token
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.RetryAfter">
      <summary>
      </summary>
      <grammar>
            Retry-After  =  "Retry-After" hcolon delta-seconds
                           [ comment ] *( semi retry-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Route">
      <summary>
      </summary>
      <grammar>
            Route        =  "Route" hcolon route-param *(comma route-param)
            route-param  =  name-addr *( semi rr-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Server">
      <summary>
      </summary>
      <grammar>
            Server           =  "Server" hcolon server-val *(lws server-val)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Subject">
      <summary>
      </summary>
      <grammar>
            Subject  =  ( "Subject" / "s" ) hcolon [text-utf8-trim]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Supported">
      <summary>
      </summary>
      <grammar>
            Supported  =  ( "Supported" / "k" ) hcolon
                          [option-tag *(comma option-tag)]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Timestamp">
      <summary>
      </summary>
      <grammar>
            Timestamp  =  "Timestamp" hcolon 1*(DIGIT)
                          [ "." *(DIGIT) ] [ lws delay ]
            delay      =  *(DIGIT) [ "." *(DIGIT) ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.To">
      <summary>
      </summary>
      <grammar>
            To        =  ( "To" / "t" ) hcolon ( name-addr
                         / addr-spec ) *( semi to-param )
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Unsupported">
      <summary>
      </summary>
      <grammar>
            Unsupported  =  "Unsupported" hcolon option-tag *(comma option-tag)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.UserAgentHeader">
      <summary>
      </summary>
      <grammar>
            User-Agent  =  "User-Agent" hcolon server-val *(lws server-val)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Via">
      <summary>
            Via header field.
            </summary>
      <grammar>
            Via =  ( "Via" / "v" ) hcolon via-parm *(comma via-parm)
            </grammar>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Message.Headers.Via.ViaParam">
      <summary>
            Lehetséges Via mezők.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.Warning">
      <summary>
      </summary>
      <grammar>
            Warning        =  "Warning" hcolon warning-value *(comma warning-value)
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Headers.WWWAuthenticate">
      <summary>
      </summary>
      <grammar>
            WWW-Authenticate  =  "WWW-Authenticate" hcolon challenge
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.SIPMessage">
      <summary>
      </summary>
      <grammar>
            SIP-message    =  Request / Response
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Request.Request">
      <summary>
      </summary>
      <grammar>
            Request        =  Request-Line
                              *( message-header )
                              crlf
                              [ message-body ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Request.RequestLine">
      <summary>
      </summary>
      <grammar>
            Request-Line   =  Method SP Request-uri SP SIP-Version crlf
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Response.Response">
      <summary>
      </summary>
      <grammar>
            Response          =  Status-Line
                                 *( message-header )
                                 crlf
                                 [ message-body ]
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Message.Response.StatusLine">
      <summary>
      </summary>
      <grammar>
            Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase crlf
            </grammar>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Layers.IDFactories.SIPIDFactory">
      <summary>
             It generates random identifiers and tags for transactions and dialogs.
             </summary>
      <remarks>
            19.3 Tags
            
             The "tag" parameter is used in the To and From header fields of SIP
             messages.  It serves as a general mechanism to identify a dialog,
             which is the combination of the Call-ID along with two tags, one from
             each participant in the dialog.  When a UA sends a request outside of
             a dialog, it contains a From tag only, providing "half" of the dialog
             ID.  The dialog is completed from the response(s), each of which
             contributes the second half in the To header field.  The forking of
             SIP requests means that multiple dialogs can be established from a
             single request.  This also explains the need for the two-sided dialog
             identifier; without a contribution from the recipients, the
             originator could not disambiguate the multiple dialogs established
             from a single request.
            
             When a tag is generated by a UA for insertion into a request or
             response, it MUST be globally unique and cryptographically random
             with at least 32 bits of randomness.  A property of this selection
             requirement is that a UA will place a different tag into the From
             header of an INVITE than it would place into the To header of the
             response to the same INVITE.  This is needed in order for a UA to
             invite itself to a session, a common case for "hairpinning" of calls
             in PSTN gateways.  Similarly, two INVITEs for different calls will
             have different From tags, and two responses for different calls will
             have different To tags.
            
             Besides the requirement for global uniqueness, the algorithm for
             generating a tag is implementation-specific.  Tags are helpful in
             fault tolerant systems, where a dialog is to be recovered on an
             alternate server after a failure.  A UAS can select the tag in such a
             way that a backup can recognize a request as part of a dialog on the
             failed server, and therefore determine that it should attempt to
             recover the dialog and any other state associated with it.
             </remarks>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3265.Concept.Definitions.Notification">
      <summary>
      </summary>
      <remarks>
               Notification: Notification is the act of a notifier sending a NOTIFY
             message to a subscriber to inform the subscriber of the state of a
             resource.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.SIP.Extensions.RFC3265.Concept.SubscriberStatePackage.TerminationReason">
      <summary>
            Csak akkor van értéke, ha terminated állapotban van a state
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.Header.AllowEvents.SIPStringPart">
      <summary>
            Allow-Events =  ( "Allow-Events" / "u" ) HCOLON event-type *(COMMA event-type)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.Header.SubscriptionState.SIPStringPart">
      <summary>
            Subscription-State = "Subscription-State" HCOLON substate-value *( SEMI subexp-params )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PSubscriptionState">
      <summary>
            Subscription-State   = "Subscription-State" HCOLON substate-value *( SEMI subexp-params )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PAllowEvents">
      <summary>
            Allow-Events = ( "Allow-Events" / "u" ) HCOLON event-type *(COMMA event-type)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PEvent">
      <summary>
            Event  =  ( "Event" / "o" ) HCOLON event-type *( SEMI event-param )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PEventType">
      <summary>
            event-type =  event-package *( "." event-template )
            event-package     =  token-nodot
            event-template    =  token-nodot
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PEventParam">
      <summary>
            event-param =  generic-param / ( "id" EQUAL token )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.Parser.RFC3265ParserExtension.PTokenNoDot">
      <summary>
            token-nodot = 1*( alphanum / "-"  / "!" / "%" / "*" / "_" / "+" / "`" / "'" / "~" )
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3265.SubscribeNotifyExtensionFactory">
      <summary>
            RFC3265
            Session Initiation Protocol (SIP)-Specific Event Notification
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3326.Concept.ProtocolCause">
      <summary>
            protocol-cause    =  "cause" EQUAL cause
            cause             =  1*DIGIT
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3326.Concept.ReasonText">
      <summary>
            reason-text       =  "text" EQUAL quoted-string
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3326.Concept.ReasonValue">
      <summary>
            reason-value      =  protocol *(SEMI reason-params)
            
            protocol          =  "SIP" / "Q.850" / token
            
            reason-params     =  protocol-cause / reason-text / reason-extension
            protocol-cause    =  "cause" EQUAL 1*(DIGIT)
            reason-text       =  "text" EQUAL quoted-string
            reason-extension  =  generic-param
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Concept.ReasonValue.SIPStringPart">
      <summary>
            reason-value      =  protocol *(SEMI reason-params)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.Header.ReasonHeader">
      <summary>
             Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
             reason-value      =  protocol *(SEMI reason-params)
             protocol          =  "SIP" / "Q.850" / token
             reason-params     =  protocol-cause / reason-text  / reason-extension
             protocol-cause    =  "cause" EQUAL cause
             cause             =  1*DIGIT
             reason-text       =  "text" EQUAL quoted-string
             reason-extension  =  generic-param
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.Header.ReasonHeader.SIPStringPart">
      <summary>
            Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.RFC3326ParserExtension.ParseExtensionHeader(System.String)">
      <summary>
            Reason            =  "Reason" HCOLON reason-value *(COMMA reason-value)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.RFC3326ParserExtension.PReasonValue">
      <summary>
            reason-value      =  protocol *(SEMI reason-params)
            protocol          =  "SIP" / "Q.850" / token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.RFC3326ParserExtension.PReasonParam">
      <summary>
             reason-params     =  protocol-cause / reason-text / reason-extension
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.RFC3326ParserExtension.PReasonText">
      <summary>
             reason-text       =  "text" EQUAL quoted-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3326.Parser.RFC3326ParserExtension.PProtocolCause">
      <summary>
            protocol-cause    =  "cause" EQUAL cause
            cause             =  1*DIGIT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3515.Parser.Header.ReferTo.SIPStringPart">
      <summary>
            Refer-To = ("Refer-To" / "r") HCOLON ( name-addr / addr-spec ) * (SEMI generic-param)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3515.Parser.RFC3515ParserExtension.ParseExtensionHeader(System.String)">
      <summary>
            Refer-To = ("Refer-To" / "r") HCOLON ( name-addr / addr-spec ) * (SEMI generic-param)
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3515.ReferMethodExtensionFactory">
      <summary>
            RFC3515
            The Session Initiation Protocol (SIP) Refer Method
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3891.Parser.Header.Replaces.SIPStringPart">
      <summary>
            Replaces = "Replaces" HCOLON callid *(SEMI replaces-param)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3891.Parser.ReplaceParserExtension.ParseExtensionHeader(System.String)">
      <summary>
            Replaces        = "Replaces" HCOLON callid *(SEMI replaces-param)
            replaces-param  = to-tag / from-tag / early-flag / generic-param
            to-tag          = "to-tag" EQUAL token
            from-tag        = "from-tag" EQUAL token
            early-flag      = "early-only"
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3891.ReplaceExtensionFactory">
      <summary>
            RFC3891
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.Data.DotAtom.SIPStringPart">
      <summary>
            dot-atom = atom *( "." atom )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.Data.SIPCleanMessageId.SIPStringPart">
      <summary>
            sip-clean-msg-id = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.Header.ReferredBy.SIPStringPart">
      <summary>
            Referred-By  =  ("Referred-By" / "b") HCOLON referrer-uri *( SEMI (referredby-id-param / generic-param) )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.RFC3892ParserExtension.ParseExtensionHeader(System.String)">
      <summary>
            Referred-By = ("Referred-By" / "b") HCOLON referrer-uri *( SEMI (referredby-id-param / generic-param) )
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.RFC3892ParserExtension.PReferredIdParam">
      <summary>
            referredby-id-param = "cid" EQUAL sip-clean-msg-id
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.RFC3892ParserExtension.PSIPCleanMessageId">
      <summary>
            sip-clean-msg-id = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.RFC3892ParserExtension.PDotAtom">
      <summary>
            dot-atom = atom *( "." atom )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3892.Parser.RFC3892ParserExtension.PAtom">
      <summary>
            atom = 1*( alphanum / "-" / "!" / "%" / "*" / "_" / "+" / "'" / "`" / "~"   )
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3892.ReferredByExtensionFactory">
      <summary>
            RFC3892
            The Session Initiation Protocol (SIP) Referred-By Mechanism
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC5589.TransfState">
      <summary>
            Transfer state, az OzVoIP ban is használnom kell egyet mert az látszik kifelé, ezért van lerövidítve
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SDP.ISDPMessageManipulator">
      <summary>
            Input/Output SDP Message Manipulator.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.ISDPMessageManipulator.PerformReceivedMessage(System.String)">
      <summary>
            Transforms the incoming SIP message.
            </summary>
      <param name="incomingMessage">The text representation of incoming SDP message.</param>
      <returns>Text representation of the manipulated SDP message.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.ISDPMessageManipulator.PerformSendMessage(System.String)">
      <summary>
            Transforms the outgoing SIP message.
            </summary>
      <param name="outGoingMessage">The text representation of outgoing SDP message.</param>
      <returns>Text representation of the manipulated SDP message.</returns>
    </member>
    <member name="T:Ozeki.VoIP.SDP.IdSDPMessageManipulator">
      <summary>
            Represents Input/Output SDP Message Manipulator objects
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.IdSDPMessageManipulator.PerformReceivedMessage(System.String)">
      <summary>
            Transforms the incoming SIP message.
            </summary>
      <param name="incomingMessage">The text representation of incoming SDP message.</param>
      <returns>Text representation of the manipulated SDP message.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.IdSDPMessageManipulator.PerformSendMessage(System.String)">
      <summary>
            Transforms the outgoing SIP message.
            </summary>
      <param name="outGoingMessage">The text representation of outgoing SDP message.</param>
      <returns>Text representation of the manipulated SDP message.</returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.Extensions.BandwidthTypeParserExtension.PBwType">
      <summary>
            bwtype =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.SkipChars(System.Int32)">
      <summary>
            Meghatározott számú karakter átugrása.
            </summary>
      <param name="i">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.LookaheadChar(System.Char)">
      <summary>
            Megnézi, hogy a következő karaktert.
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.SkipSpaces">
      <summary>
            A space karakterek átugrása.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.Parse(System.String)">
      <summary>
            A feldolgozás indítása a következő sztringre, nem szálboztos!
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.ParseMany(System.String)">
      <summary>
            A feldolgozás indítása a következő sztringre, nem szálboztos!
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.GetRemains">
      <summary>
            A maradék string-et adja vissza egészben.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.GetRemains(System.Int32)">
      <summary>
            A maradék string-et adja vissza egészben.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.LLParser`1.InitParse(System.String)">
      <summary>
            Kizarolag csak teszteles celjabol!
            Ha pl. egy bizonyos header parse-olasat akarjuk letesztelni, akkor beallitjuk ezzel a header tartalmat, majd a konkret Parse() fuggvenyt meghivjuk.
            Pl.
            parser.InitParse(data);
            parser.PWWWAuthenticate();
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser._parserExtensions">
            session-description = proto-version
                                  origin-field
                                  session-name-field
                                  information-field
                                  uri-field
                                  email-fields
                                  phone-fields
                                  connection-field
                                  bandwidth-fields
                                  time-fields
                                  key-field
                                  attribute-fields
                                  media-descriptions
        </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.ProtoVersion">
      <summary>
            proto-version = %x76 "=" 1*DIGIT crlf 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.POriginField">
      <summary>
            origin-field = %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address crlf
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PSessionNameField">
      <summary>
            session-name-field =  "s=" text CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PInformationField">
      <summary>
            information-field =   ["i=" text CRLF]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PUriField">
      <summary>
             uri-field = ["u=" uri CRLF]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PEmailFields">
      <summary>
            email-fields = *("e=" email-address CRLF) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PPhoneFields">
      <summary>
            phone-fields = *("p=" phone-number CRLF) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PConnectionField">
      <summary>
            connection-field = ["c=" nettype space addrtype space connection-address CRLF] 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PBandwidthFields">
      <summary>
            bandwidth-fields = *("b=" bwtype ":" bandwidth CRLF) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PTimeFields">
      <summary>
            time-fields = 1*( %x74 "=" start-time SP stop-time crlf *(repeat-fields crlf)) [zone-adjustments crlf]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PRepeatFields">
      <summary>
            repeat-fields = "r=" repeat-interval space typed-time 1*(space typed-time)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PZoneAdjustments">
      <summary>
            zone-adjustments = "z=" time SP ["-"] typed-time *(SP time SP ["-"] typed-time)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PKeyField">
      <summary>
            key-field = ["k=" key-type CRLF] 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAttribute">
      <summary>
            attribute = att-field [":" att-value]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PMediaDescriptions">
      <summary>
            media-descriptions =  *( media-field
                                     information-field
                                     *(connection-field)
                                     bandwidth-fields
                                     key-field
                                     attribute-fields ) */
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PKeyType">
      <summary>
            key-type = "prompt" | "clear:" text | "base64:" [base64] | "uri:" uri 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PBase64">
      <summary>
            base64 = 1*base64-unit [base64-pad] / base64-pad
            base64-unit = 4base64-char
            base64-pad  = 2base64-char "==" / 3base64-char "="
            base64-char = ALPHA / DIGIT / "+" / "/"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAttributeFields">
      <summary>
            attribute-fields = *("a=" attribute CRLF) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PMediaField">
      <summary>
            media-field = "m=" media space port ["/" integer] space proto 1*(space fmt) CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PUsername">
      <summary>
            username = non-ws-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PSessId">
      <summary>
            sess-id = 1*(DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PSessVersion">
      <summary>
            sess-version = 1*(DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PMedia">
      <summary>
            media = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PFmt">
      <summary>
            fmt = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PProto">
      <summary>
            proto  = token *("/" token)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PPort">
      <summary>
            port = 1*(DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAttField">
      <summary>
            att-field = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAttValue">
      <summary>
            att-value = byte-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PConnectionAddress">
      <summary>
            connection-address =  multicast-address / unicast-address
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PMulticastAddress">
      <summary>
            multicast-address =   IP4-multicast / IP6-multicast / fqdn / extn-addr
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PIP4Multicast">
      <summary>
            IP4-multicast = m1 3( "." decimal-uchar ) "/" ttl [ "/" integer ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PM1">
      <summary>
            m1 = ("22" ("4"/"5"/"6"/"7"/"8"/"9")) / ("23" DIGIT )
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PIP6Multicast">
      <summary>
            IP6-multicast = hexpart [ "/" integer ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PTtl">
      <summary>
            ttl = (POSDIGIT *2DIGIT) / "0"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PStartTime">
      <summary>
            start-time = time | "0"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PStopTime">
      <summary>
            stop-time = time | "0"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PTime">
      <summary>
            time = POS-DIGIT 9*(DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PRepeatInterval">
      <summary>
            repeat-interval = POSDIGIT *DIGIT [fixed-len-time-unit]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PTypedTime(System.Int64)">
      <summary>
            typed-time = 1*(DIGIT) [fixed-len-time-unit]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PFixedLenTimeUnit">
      <summary>
            fixed-len-time-unit = "d" | "h" | "m" | "s"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PBwType">
      <summary>
            bwtype =  token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PBandwidth">
      <summary>
            bandwidth = 1*(DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PEmailAddress">
      <summary>
            email-address = address-and-comment / dispname-and-address
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAddressAndComment">
      <summary>
            address-and-comment  = addr-spec [1*SP "(" 1*email-safe ")"]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAddrSpec">
      <summary>
            addr-spec = 1*(alpha-numeric / ".") "@" 1*(alpha-numeric / ".") 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PUri">
      <summary>
            uri = ;defined in RFC1630 regexp =&gt; ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PPhone">
      <summary>
            phone = ["+"] DIGIT 1*(SP / "-" / DIGIT)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PNetType">
      <summary>
            nettype = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAddrType">
      <summary>
            addrtype = token
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PAddr">
      <summary>
            addr = FQDN | unicast-address
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PFqdn">
      <summary>
            FQDN = 4*(alpha-numeric|"-"|".")
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PUnicastAddress">
      <summary>
            unicast-address = IP4-address / IP6-address / fqdn / extn-addr
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PIP4Address">
      <summary>
            IP4-address =  b1 3("." decimal-uchar)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PB1">
      <summary>
            b1 = decimal-uchar
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PIP6Address">
      <summary>
            IP6-address = hexpart [ ":" IP4-address ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PHexPart">
      <summary>
            hexpart = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PHexSeq">
      <summary>
            hexseq  = hex4 *( ":" hex4)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PExtnAddr">
      <summary>
            extn-addr = non-ws-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PText">
      <summary>
            text = byte-string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PByteString">
      <summary>
            byte-string = 1*(0x01..0x09|0x0b|0x0c|0x0e..0xff)
            byte-string =         1*(%x01-09/%x0B-0C/%x0E-FF)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PNonWsString">
      <summary>
            non-ws-string = 1*(VCHAR/%x80-FF)
            VCHAR =  %x21-7E
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PToken">
      <summary>
            token = 1*(token-char)
               token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PDecimalUchar">
      <summary>
            decimal-uchar = DIGIT
                            | POS-DIGIT DIGIT
                            | ("1" 2*(DIGIT))
                            | ("2" ("0"|"1"|"2"|"3"|"4") DIGIT)
                            | ("2" "5" ("0"|"1"|"2"|"3"|"4"|"5"))
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.Parser.SDP4566Parser.PEmailSafePlus">
      <summary>
            email-safe = %x01-09/%x0B-0C/%x0E-27/%x2A-3B/%x3D/%x3F-FF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SDP.Message.Parser.SDPParserEx">
      <summary>
            Szálbiztos változat
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SDP.Message.SDPData.BandwidthType.CT">
      <summary>
            It is supplied for the session giving the proposed upper limit to the bandwidth.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SDP.Message.SDPData.BandwidthType.AS">
      <summary>
            The bandwidth is interpreted to be application specific.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SDP.Message.SDPData.BandwidthType.TIAS">
      <summary>
            Transport Independent Application Specific maximum, a bandwidth modifier.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPBandwidth.PrintSDPData">
      <summary>
            "b=" bwtype ":" bandwidth CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SDP.Message.SDPData.Origin">
      <summary>
            The Origin gives the originator of the session (her username and the address of the user's host)
            plus a session identifier and version number.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPData.Origin.#ctor(System.String,System.String,System.String,Ozeki.VoIP.SDP.Message.SDPData.NetType,Ozeki.VoIP.SDP.Message.SDPData.AddressType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SDP.Message.SDPData.Origin" /> class.
            </summary>
      <param name="username">The user name part of the originator.</param>
      <param name="sessionId">The unique identifier of the session.</param>
      <param name="sessionVersion">The version number for the session description.</param>
      <param name="netType">Type of network</param>
      <param name="addressType">Type of the uri address</param>
      <param name="uri">The address of the machine from which the session was created.</param>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPData.Origin.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.VoIP.SDP.Message.SDPData.Origin" /> class.
            </summary>
      <param name="username">The user name part of the originator.</param>
      <param name="sessionId">The unique identifier of the session.</param>
      <param name="sessionVersion">The version number for the session description.</param>
      <param name="uri">The address of the machine from which the session was created.</param>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.Username">
      <summary>
            Gets the user name part of the originator. Must not contain spaces.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.SessionId">
      <summary>
            Gets the unique identifier of the session.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.SessionVersion">
      <summary>
            Gets the version number for the session description.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.NetType">
      <summary>
            Gets the type of network.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.AddressType">
      <summary>
            Gets the type of the uri address. Initially IPv4 or IPv6.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPData.Origin.Uri">
      <summary>
            Gets the address of the machine from which the session was created.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPData.SDPMediaDescription.PrintSDPData">
      <summary>
            media-description =    ( media-field
                                     information-field
                                     *(connection-field)
                                     bandwidth-fields
                                     key-field
                                     attribute-fields ) */
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPData.SDPTimeData.PrintSDPData">
      <summary>
            time-fields = 1*( %x74 "=" start-time SP stop-time crlf *(repeat-fields crlf)) [zone-adjustments crlf]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPData.ZoneAdjustment.PrintSDPData">
      <summary>
            zone-adjustments = "z=" time SP ["-"] typed-time *(SP time SP ["-"] typed-time)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.SDP.Message.SDPFields.SDPAttributes.ICE.SDPAttrIceLite">
      <summary>
            Ice-lite is a session-level attribute only, and indicates that an agent is a lite implementation.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SDP.Message.SDPFields.SDPAttributes.ICE.SDPAttrIceMismatch">
      <summary>
            "ice-mismatch" is a media-level attribute only, and when present in an answer, indicates that
            the offer arrived with a default destination for a media component that didn't have a corresponding candidate attribute.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SDP.Message.SDPFields.SDPAttributes.ICE.SDPAttrIceOptions">
      <summary>
            The "ice-options" attribute is a session-level attribute.  It contains a series of tokens that identify the options supported by the agent.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPEmail.PrintSDPData">
      <summary>
            "e=" email-address CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPInformation.PrintSDPData">
      <summary>
            i=text CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPMedia.PrintSDPData">
      <summary>
            media-field = "m=" media space port ["/" integer] space proto 1*(space fmt) CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.SDP.Message.SDPFields.SDPMedia.Fmt">
      <summary>
            List of codec parameters. Usually the numbers of rtp codec payload types, represented as strings.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPOrigin.PrintSDPData">
      <summary>
            origin-field = %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address crlf
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPRepeated.PrintSDPData">
      <summary>
            repeat-fields = "r=" repeat-interval space typed-time 1*(space typed-time)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPSessionName.PrintSDPData">
      <summary>
            session-name-field =  "s=" text CRLF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPTime.PrintSDPData">
      <summary>
            time-field = "t=" start-time SP stop-time crlf *(repeat-fields crlf))
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.Message.SDPFields.SDPUri.PrintSDPData">
      <summary>
             uri-field = ["u=" uri CRLF]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket">
      <summary>
              0                   1
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |   RR    |P|V|   PLEN    |PEBIT|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket.RR">
      <summary>
            Reserved bits.  It SHALL be zero and MUST be ignored by receivers.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket.P">
      <summary>
            Picture start
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket.V">
      <summary>
            Indicates the presence of an 8-bit field containing information
            for Video Redundancy Coding (VRC), which follows immediately after
            the initial 16 bits of the payload header, if present.  For syntax
            and semantics of that 8-bit VRC field
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket.PLEN">
      <summary>
            Length, in bytes, of the extra picture header.  If no extra
            picture header is attached, PLEN is 0.  If PLEN&gt;0, the extra
            picture header is attached immediately following the rest of the
            payload header.  Note that the length reflects the omission of the
            first two bytes of the picture start code (PSC).
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacket.PEBIT">
      <summary>
            Indicates the number of bits that shall be ignored in the last
            byte of the picture header.  If PLEN is not zero, the ignored bits
            shall be the least significant bits of the byte.  If PLEN is zero,
            then PEBIT shall also be zero.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packetizer.Split(System.Byte[])">
      <summary>
            Splitteli a pattern szerint az eredményben a minta is szerepelni fog
            </summary>
      <param name="array">
      </param>
      <param name="pattern">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packetizer.SearchPattern(System.Byte[])">
      <summary>
            Megkeresi az adott tömbben az összes GOB v Slice v EOS v OSBS elejének az index-ét, mindegyik 00 val kezdődik és a 3. byte-ban a 128 as helyiértéken 1 áll
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.RTP.IRTPPacketProvider">
      <summary>
            Provides methods for creating <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.IRTPPacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
      <summary>
            Creates <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects from a <see cref="T:Ozeki.Media.MediaPacket" />.
            </summary>
      <returns>Created <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects. If no RTP packets created returns an empty list.</returns>
      <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.RTP.IRTPPacketProvider.CreateMediaPacket(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
      <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket" /> object from a <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
      <summary>
            Creates <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects from a <see cref="T:Ozeki.Media.MediaPacket" />.
            </summary>
      <returns>Created <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects. If no RTP packets created returns an empty list.</returns>
      <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263Plus.H263PlusPacketProvider.CreateMediaPacket(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
      <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket" /> object from a <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> object.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.PacketProviders.H263Plus.VRCHeader">
      <summary>
                0 1 2 3 4 5 6 7
               +-+-+-+-+-+-+-+-+
               | TID | Trun  |S|
               +-+-+-+-+-+-+-+-+
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263Plus.VRCHeader.TID">
      <summary>
            Thread ID
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet">
      <summary>
              0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |F|P|SBIT |EBIT | SRC |I|U|S|A|R      |DBQ| TRB |    TR         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.F">
      <summary>
            F: 1 bit
            The flag bit indicates the mode of the payload header. F=0, mode A;
            F=1, mode B or mode C depending on P bit defined below.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.P">
      <summary>
             P: 1 bit
             Optional PB-frames mode as defined by the H.263 [4]. "0" implies
             normal I or P frame, "1" PB-frames. When F=1, P also indicates modes:
             mode B if P=0, mode C if P=1.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.EBit">
      <summary>
            EBIT: 3 bits
            End bit position specifies number of least significant bits that
             shall be ignored in the last data byte.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.SRC">
      <summary>
            SRC : 3 bits
            Source format, bit 6,7 and 8 in PTYPE defined by H.263 [4], specifies
            the resolution of the current picture.
            001 SUB-CIF 128x96
            010 QCIF    176x144
            011 CIF     352x288
            100 4CIF    704x576
            101 16CIF   1408x1152
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.I">
      <summary>
            I:  1 bit.
            Picture coding type, bit 9 in PTYPE defined by H.263[4], "0" is
            intra-coded, "1" is inter-coded.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.U">
      <summary>
            U: 1 bit
            Set to 1 if the Unrestricted Motion Vector option, bit 10 in PTYPE
            defined by H.263 [4] was set to 1 in the current picture header,
            otherwise 0. 
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.S">
      <summary>
            S: 1 bit
            Set to 1 if the Syntax-based Arithmetic Coding option, bit 11 in
            PTYPE defined by the H.263 [4] was set to 1 for current picture
            header, otherwise 0.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.A">
      <summary>
               A: 1 bit
            Set to 1 if the Advanced Prediction option, bit 12 in PTYPE defined
            by H.263 [4] was set to 1 for current picutre header, otherwise 0.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.R">
      <summary>
                R: 4 bits
            Reserved, must be set to zero.
             </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.DBQ">
      <summary>
               DBQ: 2 bits
            Differential quantization parameter used to calculate quantizer for
            the B frame based on quantizer for the P frame, when PB-frames option
            is used. The value should be the same as DBQUANT defined by H.263
            [4].  Set to zero if PB-frames option is not used.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.TRB">
      <summary>
            TRB: 3 bits
            Temporal Reference for the B frame as defined by H.263 [4]. Set to
            zero if PB-frames option is not used.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H263.H263Packet.TR">
      <summary>
            TR: 8 bits
            Temporal Reference for the P frame as defined by H.263 [4]. Set to
            zero if the PB-frames option is not used.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263.H263PacketProvider.CreateRTPPackets(Ozeki.Media.MediaPacket,System.UInt32,System.UInt32,System.UInt16)">
      <summary>
            Creates <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects from a <see cref="T:Ozeki.Media.MediaPacket" />.
            </summary>
      <returns>Created <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> objects. If no RTP packets created returns an empty list.</returns>
      <remarks>
            A visszateresi ertek azert lista, mert elofordulhat, hogy darabolni kell a kikuldendo csomagot tobb RTP packetre (pl. H.264)
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H263.H263PacketProvider.CreateMediaPacket(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
      <summary>
            Creates a <see cref="T:Ozeki.Media.MediaPacket" /> object from a <see cref="T:Ozeki.VoIP.RTP.RTPPackets.RTPPacket" /> object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet.#ctor(System.UInt32,System.Byte[])">
      <summary>
            Leparzolja az adatot
            </summary>
      <param name="timestamp">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary>
            Létrehoz egy fragmentált packet-et
            </summary>
      <param name="timestamp">
      </param>
      <param name="nri">
      </param>
      <param name="nalType">
      </param>
      <param name="startBit">
      </param>
      <param name="endBit">
      </param>
      <param name="payload">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet.Add(Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet)">
      <summary>
            Egyes packet ek fragmentálva lehetnek, ezért össze kell őket rakni
            </summary>
      <param name="nalPacket">
      </param>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet.StartBit">
      <summary>
             Csak fragmentált packet összerakásánál és fragmentált packetre történő darabolásnál van jelentősége
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packet.EndBit">
      <summary>
            Csak fragmentált packet összerakásánál és fragmentált packetre történő darabolásnál van jelentősége
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.PacketProviders.H264.H264Packetizer.Split(System.Byte[])">
      <summary>
            Splitteli a pattern szerint az eredményben a minta nem fog szerepelni
            </summary>
      <param name="array">
      </param>
      <param name="pattern">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.RTP.IPacketProviderFactory.CreateRTPPacketProvider(Ozeki.Media.MediaPacketType)">
      <summary>
            Megadott parameterek alapjan keszit egy <see cref="T:Ozeki.VoIP.RTP.IRTPPacketProvider" /> objektumot.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.IPacketProviderFactory.CreateRTPPacketProvider(System.Int32,System.Int32)">
      <summary>
            Megadott parameterek alapjan keszit egy <see cref="T:Ozeki.VoIP.RTP.IRTPPacketProvider" /> objektumot.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTPTransportLayer">
      <summary>
            RTP Tranpsort Layer
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTPTransportLayer.BufferAlgorithmWithoutRTCPDynamicBuffer(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
      <summary>
            Bufferelo algoritmus ha nincs RTCP kapcsolat, változó buffermérettel
            </summary>
      <param name="rtpPacket">
      </param>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTCPManager">
      <summary>
            Vezérli hívás közben az rtcp üzeneteket és elvégzi az RTCP alapján az optimalizálást
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.SendersPacketCount">
      <summary>
            RTP adatcsomagok teljes száma az átvitel kezdete óta, 0-ázni ha az ssrcváltozik
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.SendersOctetCount">
      <summary>
            Az átvitt adatok teljes száma bájtokban, 0-ázni ha az ssrc-változik
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.remoteSSRC">
      <summary>
            Ugyanaz az azonosító mint az RTP-nél      
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.ExtendedHighestSequenceNumberReceived">
      <summary>
            A SSRC_n forrástól érkezett legnagyobb sorozatszámú RTPcsomag sorszáma
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.LastSRTimestamp">
      <summary>
            A középső 32 bitje a 64 bites NTP timestamp-nek, mely a legutoljára érkezett RTCP csomagban érkezett a SSRC_n forrástól
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.DelaySinceLastSRDLSR">
      <summary>
            Időkésleltés az utolsó SR csomag és az adott reportblock között 1/65536 mp-es egységekben (SSRC_n forrás felé)
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.RTP.RTCPManager.r">
      <summary>
            Küldési intervallum kiszámítása
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPManager.RTCPPacketSenderElapsed(System.Object,System.Timers.ElapsedEventArgs)">
      <summary>
            Az RTCP csomagok küldése időközönként
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPManager.RemoteHostEndPoint(System.String,System.Int32)">
      <summary>
             távoli cím és port beállítása ekkor connectel a transport réteg
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPManager.RTCPInterval(System.Double,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)">
      <param name="rtcpBandwidth">sávszélesség byte/sec</param>
      <param name="weSent">Mi küldünk</param>
      <param name="packetSize">csomag méret</param>
      <param name="initial">Első csomag</param>
            /// <param name="members">tagok</param><param name="senders">küldők</param><returns></returns></member>
    <member name="M:Ozeki.VoIP.RTP.RTCPManager.JitterNumber">
      <summary>
            A jitter értéke
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPManager.FractionLostNumber">
      <summary>
            Fraction Lost értéke
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.RTP.RTCPManager.SelfSSRC">
      <summary>
            Ugyan az az azonosító mint az RTP-nél, ha változik akkor bizonyos értékeket 0-ra kell álítani
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacket.GetDataByte">
      <summary>
              A nyers adat visszaadása
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacket.GetPachetType">
      <summary>
              A csomag tipus visszadása
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketBye">
      <summary>
              Bye pack (RTCP)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketBye.#ctor(System.UInt32)">
      <summary>
              Bye packet (RTCP)
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketRR">
      <summary>
              Received report pack (RTCP)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketRR.GetDataByte">
      <summary>
              A nyers byte-ok vissza adása, ezt kell a transport-nak tovább küldeni
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketRR.Parse(System.Byte[])">
      <summary>
              A nyers byte-bol Receiver Report (RR) elöállítása
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketSDES">
      <summary>
              SDES Packet (RTCP)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketSDES.GetDataByte">
      <summary>
              A nyers byte-ok visszaadása, ezt kell a transport-nak tovább küldeni
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketSR">
      <summary>
              Sender report pack (RTCP)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.RTP.RTCPPackets.RTCPPacketSR.GetDataByte">
      <summary>
              RTCP Sender Packet
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.RTP.MediaChannel">
      <summary>
            Egy media kommunikacios csatornat reprezental.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCipherCTR.getCipherStream(Org.BouncyCastle.Crypto.IBlockCipher,System.Byte[],System.Int32,System.Byte[])">
            Computes the cipher stream for AES CM mode. See section 4.1.1 in RFC3711
            for detailed description.
            
            @param outC
                       byte array holding the output cipher stream
            @param length
                       length of the cipher stream to produce, in bytes
            @param iv
                       initialization vector used to generate this cipher stream
        </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.REPLAY_WINDOW_SIZE">
      <summary>
            The replay check windows size
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.seqNumSet">
      <summary>
            Whether we have the sequence number of current packet
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.keyDerivationRate">
      <summary>
            Key Derivation Rate, used to derive session keys from master keys
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.replayWindow">
      <summary>
            Bit mask for replay check
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.masterKey">
      <summary>
            Master encryption key
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.masterSalt">
      <summary>
            Master salting key
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.encKey">
      <summary>
            Derived session encryption key
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.authKey">
      <summary>
            Derived session authentication key
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.saltKey">
      <summary>
            Derived session salting key
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.tagStore">
      <summary>
            Temp store. 
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.policy">
      <summary>
            Encryption / Authentication policy for this session
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.mac">
      <summary>
            The HMAC object we used to do packet authentication
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.cipherCtr">
      <summary>
            implements the counter cipher mode for RTP according to RFC 3711
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.cipher">
      <summary>
             The symmetric cipher engines
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.rbStore">
      <summary>
            Temp store.
            </summary>
    </member>
    <member name="F:Ozeki.VoIP.SRTP.SRTPCryptoContext.tempStore">
      <summary>
             this is a working store, used by some methods to avoid new operations
            the methods must use this only to store results for immediate processing
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.DeriveSrtpKeys(System.Int64)">
      <summary>
            Derives the srtp session keys from the master key
            </summary>
      <param name="index">the 48 bit SRTP packet index</param>
    </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.ComputeIv(System.Int64,System.Int64)">
             Compute the initialization vector, used later by encryption algorithms,
             based on the lable, the packet index, key derivation rate and master
             salt key.
            
             @param label label specified for each type of iv
             @param index 48bit RTP packet index
        </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.ReverseTransformPacket(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
             Transform a SRTP packet into a RTP packet.
             This method is called when a SRTP packet is received.
            
             Operations done by the this operation include:
             Authentication check, Packet replay check and decryption.
            
             Both encryption and authentication functionality can be turned off
             as long as the SRTPPolicy used in this SRTPCryptoContext is requires no
             encryption and no authentication. Then the packet will be sent out
             untouched. However this is not encouraged. If no SRTP feature is enabled,
             then we shall not use SRTP TransformConnector. We should use the original
             method (RTPManager managed transportation) instead.
            
             @param pkt the RTP packet that is just received
             @return true if the packet can be accepted
                     false if the packet failed authentication or failed replay check
        </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.checkReplay(System.Int32,System.Int64)">
             Checks if a packet is a replayed on based on its sequence number.
            
             This method supports a 64 packet history relative the the given
             sequence number.
            
             Sequence Number is guaranteed to be real (not faked) through
             authentication.
            
             @param seqNo sequence number of the packet
             @param guessedIndex guessed roc
             @return true if this sequence number indicates the packet is not a
             replayed one, false if not
        </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.update(System.Int32,System.Int64)">
             Update the SRTP packet index.
            
             This method is called after all checks were successful.
             See section 3.3.1 in RFC3711 for detailed description.
            
             @param seqNo sequence number of the accepted packet
             @param guessedIndex guessed roc
        </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.processPacketAESCM(Ozeki.VoIP.RTP.RTPPackets.RTPPacket)">
            Perform Counter Mode AES encryption / decryption
            @param pkt the RTP packet to be encrypted / decrypted
        </member>
    <member name="M:Ozeki.VoIP.SRTP.SRTPCryptoContext.authenticatePacketHMCSHA1(Ozeki.VoIP.RTP.RTPPackets.RTPPacket,System.Int32)">
             Authenticate a packet.
             Calculated authentication tag is returned.
            
             @param pkt the RTP packet to be authenticated
             @param rocIn Roll-Over-Counter
        </member>
    <member name="P:Ozeki.VoIP.SRTP.SRTPCryptoContext.Ssrc">
      <summary>
            RTP SSRC of this cryptographic context
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SRTP.SRTPCryptoContext.Mki">
      <summary>
            Master key identifier
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SRTP.SRTPCryptoContext.Roc">
      <summary>
             Roll-Over-Counter, see RFC3711 section 3.2.1 for detailed description
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SRTP.SRTPCryptoContext.guessedRoc">
      <summary>
            Roll-Over-Counter guessed from packet
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.SRTP.SRTPCryptoContext.seqNum">
      <summary>
             RTP sequence number of the packet current processing
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.SRTP.SRTPEngine">
      <summary>
            Megkapja az RTP csomagot dekódolja
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecMediaType">
      <summary>
            Codec type enumeration.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.CodecMediaType.Unknown">
      <summary>
            Unknown codec type
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.CodecMediaType.Audio">
      <summary>
            Audio codec
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.CodecMediaType.Video">
      <summary>
            Video codec
            </summary>
    </member>
    <member name="T:Ozeki.Media.Session.SRTPEncryptAlogirthm">
      <summary>
            Az srtp implementáció által jelenleg támogatott titkosítási algoritmusok
            </summary>
    </member>
    <member name="T:Ozeki.Media.Session.ChannelStateChange">
      <summary>
            Provides information about changes made on a media channel of a phone call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Session.ChannelStateChange.#ctor(Ozeki.Media.MediaType,Ozeki.Media.Session.ChannelState)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Session.ChannelStateChange" /> class.
            </summary>
      <param name="mediaType">
      </param>
      <param name="remoteOperation">
      </param>
    </member>
    <member name="P:Ozeki.Media.Session.ChannelStateChange.MediaType">
      <summary>
            Gets the media type of the channel.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.ChannelStateChange.State">
      <summary>
            Gets the new state of a media channel.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Session.ChannelState">
      <summary>
            Specifies the current state of a media channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteAccepted">
      <summary>
            The other party accepted the offered channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteRejected">
      <summary>
            The other party rejected the offered channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemotePendingSendOnly">
      <summary>
            The other party accepted the offered channel, but only wants to send media.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemotePendingReceiveOnly">
      <summary>
            The other party accepted the offered channel, but only wants to receive media.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteOffer">
      <summary>
            The other party wants to communicate via that channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteOfferReceiveOnly">
      <summary>
            The other party wants to communicate, but wants to receive media only.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteHold">
      <summary>
            The other party put the call on hold.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteUnhold">
      <summary>
            The other party released the hold.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteCancelled">
      <summary>
            The other party cancelled an existing channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.RemoteModifiedReceiveOnly">
      <summary>
            The other party modified the communication mode of the channel. From now on he only wants to receive data via that channel.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.LocalAccepted">
      <summary>
            Channel accepted locally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.LocalRejected">
      <summary>
            Channel rejected locally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.LocalCancel">
      <summary>
            An existing channel has been cancelled locally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.LocalHold">
      <summary>
            Put the call on hold locally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.LocalUnhold">
      <summary>
            The call has been resumed locally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Session.ChannelState.Unknown">
      <summary>
            Unknown operation.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Session.CommunicationModeHelper">
      <summary>
             Todo: ?
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.#ctor(Ozeki.Media.Codec.ICodecFactoryManager,System.String)">
      <summary>
            Konstruktor, ami a rendszerben található ICodecManager objektumot vár
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateOffer(System.String,System.Collections.Generic.List{Ozeki.Media.Session.MediaChannelDescription},Ozeki.VoIP.SDP.Message.SDPData.Origin,System.Boolean)">
      <summary>
            Media felajánlás generálása a másik félnek.
            </summary>
      <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
      <param name="channelDescriptions">Csatornák</param>
      <param name="unicast">Egy címre akarunk-e küldeni</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateAnswer(System.String,Ozeki.VoIP.SDP.Message.SDPData.Origin,Ozeki.Media.Session.MediaDescription,System.Boolean)">
      <summary>
            Média felajánláshoz válasz generálása, amiben tartalmazza, hogy a csatornák milyen címen érhetőek el,
            és milyen kodekeket támogatnak.
            </summary>
      <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
      <param name="offer">A felajánlás</param>
      <param name="unicast">Egy címre akarunk-e küldeni</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateChannelAnswer(Ozeki.Media.Session.MediaChannelDescription,Ozeki.Media.Session.CommunicationMode,System.Int32,System.Boolean)">
      <summary>
            Egy távoli féltől érkező csatornára generál egy választ.
            </summary>
      <param name="offer">Másik féltől érkezett felajánlás.</param>
      <param name="unicast">Egy címre akarunk-e küldeni</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.GenerateAnswer(System.String,Ozeki.VoIP.SDP.Message.SDPData.Origin,System.Collections.Generic.List{Ozeki.Media.Session.MediaChannelDescription},System.Boolean)">
      <summary>
            Média felajánláshoz válasz generálása, amiben tartalmazza, hogy a csatornák milyen címen érhetőek el,
            és milyen kodekeket támogatnak.
            </summary>
      <param name="connection">Lokális IP cím, amire fogadjuk a media-t</param>
      <param name="mediaStreams">Csatornák</param>
      <param name="unicast">Egy címre akarunk-e küldeni</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.MediaDescriptionFactory.RejectMediaChannel(Ozeki.Media.Session.MediaChannelDescription)">
      <summary>
            Ha nincs közös kodek, akkor el kell utasítani a csatornát.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.IVideoCodecConfigurable.SetEncoderConfig(System.Int32,System.Int32,System.Double)">
      <summary>
            Átállítja az encoder konfigurációt
            </summary>
      <returns>True, ha megváltozott a konfig</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.ICodec">
      <summary>
      </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:Ozeki.Media.Codec.ICodec.Encode(System.Byte[])">
      <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.ICodec.Decode(System.Byte[])">
      <summary>
            A kódolt(tömörített) adatot nyers formámban adja vissza
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.Description">
      <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.SampleRate">
      <summary>
            Mintavételezési ráta
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.PayloadType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.MediaType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.EncodingName">
      <summary>
            A kodek azonosítási neve
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.Channels">
      <summary>
            Adatcsatornák száma.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.ICodec.PacketizationTime">
      <summary>
            Default ms/packet (csak audionál van szerepe)
            </summary>
    </member>
    <member name="T:Ozeki.Media.IMediaChannel">
      <summary>
            A kiépült, egy adott híváshoz tartozó médiacsatorna,ami a pbx-en keresztül megy.
            </summary>
    </member>
    <member name="M:Ozeki.Media.IMediaChannel.SendMediaData(Ozeki.Media.MediaPacket)">
      <summary>
            Média adatot küldünk a csatornán keresztül. 
            </summary>
      <param name="mediaPacket">
      </param>
      <remarks>A kódolás a Call-ban történhet.</remarks>
    </member>
    <member name="M:Ozeki.Media.IMediaChannel.Close">
      <summary>
            A csatorna lezárása
            </summary>
    </member>
    <member name="M:Ozeki.Media.IMediaChannel.ConnectToRemoteHost(System.String,System.Int32)">
      <summary>
             távoli cím és port beállítása
            </summary>
    </member>
    <member name="P:Ozeki.Media.IMediaChannel.ChannelID">
      <summary>
            A csatorna azonosítója.
            </summary>
    </member>
    <member name="P:Ozeki.Media.IMediaChannel.Reliability">
      <summary>
            Csomagok százalékos aránya melyek valamelyik oldalt célt értek.
            </summary>
    </member>
    <member name="P:Ozeki.Media.IMediaChannel.LocalPort">
      <summary>
            Lokális port amin megy a média adás
            </summary>
    </member>
    <member name="P:Ozeki.Media.IMediaChannel.LocalAddress">
      <summary>
            Lokális cím amin megy a média adás
            </summary>
    </member>
    <member name="E:Ozeki.Media.IMediaChannel.MediaDataReceived">
      <summary>
            Média adat érkezett.
            </summary>
    </member>
    <member name="M:Ozeki.Media.IMediaChannelFactory.CreateChannel(System.String,Ozeki.Media.MediaProtocol)">
      <summary>
            A megadott információk alapján visszad egy channelt
            </summary>
      <param name="localAddress">
      </param>
      <param name="mediaProtocol">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Ozeki.Media.MediaPacketType.H263Plus">
      <summary>
            H283Plus = H263-1998
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaProtocol.RTP_AVP">
      <summary>
            RTP+RTCP
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaProtocol.RTP_SAVP">
      <summary>
            SRTP+SRTCP
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Unknown">
      <summary>
            Unknown media type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Audio">
      <summary>
            Audio type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Video">
      <summary>
            Video type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Application">
      <summary>
            Application type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Data">
      <summary>
            Data type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Control">
      <summary>
            Control type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Text">
      <summary>
            Text type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaType.Message">
      <summary>
            Message type
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.CodecPayloadType">
      <summary>
            Numerical ID of the codec in the given side.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.Name">
      <summary>
            The name of the codec
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.SampleRate">
      <summary>
            SampleRate.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.Channels">
      <summary>
            Number of channels, typically 1 or 2.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.MediaType">
      <summary>
            Codec Media Type
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.CodecDescription.EncodingParameters">
      <summary>
            For audio streams, indicates the number of audio channels.
            For video streams, no encoding parameters are currently specified.
            Additional encoding parameters MAY be defined in the future, butt codec-specific parameters SHOULD NOT be added.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Session.CryptoDescription.#ctor(System.UInt32,System.String)">
      <summary>
            unicast channel answer offer esetén 
            </summary>
      <param name="tag">
      </param>
      <param name="cryptoSuite">
      </param>
    </member>
    <member name="M:Ozeki.Media.Session.MediaChannelDescription.#ctor(Ozeki.Media.MediaType,System.Int32,Ozeki.Media.MediaProtocol,Ozeki.Media.Session.CommunicationMode)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Session.MediaChannelDescription" /> class.
            </summary>
      <param name="mediaType">Media type. (e.g. Audio)</param>
      <param name="mediaProtocol">Media protocol. (e.g. RTP)</param>
      <param name="port">Port used during the communication.</param>
      <param name="communicationMode">Communication mode. (e.g sendrecv)</param>
    </member>
    <member name="M:Ozeki.Media.Session.MediaChannelDescription.#ctor(Ozeki.Media.MediaType,System.Int32,Ozeki.Media.MediaProtocol,Ozeki.Media.Session.CommunicationMode,System.Collections.Generic.IEnumerable{Ozeki.Media.Session.CodecDescription})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Session.MediaChannelDescription" /> class.
            </summary>
      <param name="mediaType">Media type. (e.g. Audio)</param>
      <param name="port">Media protocol. (e.g. RTP)</param>
      <param name="mediaProtocol">
      </param>
      <param name="communicationMode">Communication mode. (e.g sendrecv)</param>
      <param name="codecs">Supported codecs.</param>
      <remarks>
            No connections set, so the connection must be set in session level.
            </remarks>
    </member>
    <member name="P:Ozeki.Media.Session.MediaChannelDescription.MediaType">
      <summary>
            Gets the type of the media channel.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.MediaChannelDescription.Port">
      <summary>
            Gets the transport port to which the media stream is sent.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.MediaChannelDescription.MediaProtocol">
      <summary>
            Gets the transport protocol used.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.MediaChannelDescription.SupportedCodecs">
      <summary>
            Gets the list of the supported codecs of the media channel.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Session.MediaChannelDescription.CommunicationMode">
      <summary>
            Gets the communication mode of the media channel.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Session.MediaChannelPair">
      <summary>
            Hívás során előforduló média csatorna pár.
            </summary>
      <remarks>
            A hívás során a média csatornákat párosítva kezeljük. Ami jött a felajánlásban,
            ugyanazokat a csatornákat kell visszaküldeni. Tehát egy távoli csatornához
            egy lokális csatornát párosítunk.
            
            Eltároljuk az előző communication mode-ot a távoli és lokális csatornához is,
            mivel ha meg akarjuk nézni, mi változott az előző állapothoz képest, akkor
            azt is figyelembe kell venni.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.Session.MediaChannelPair.CheckForChannelUpdatesRemote">
      <summary>
            Másik fél küldte a media felajánlást, és megnézzük, változott-e valami
            </summary>
    </member>
    <member name="M:Ozeki.Media.Session.MediaChannelPair.CheckForChannelUpdatesLocal">
      <summary>
            Mi küldtük a felajánlást, és megnézzük, változott-e valami
            </summary>
    </member>
    <member name="M:Ozeki.Media.Session.MediaDescriptionEx.GetFmtpString(Ozeki.Media.Session.MediaDescription,Ozeki.Media.MediaType,System.Int32)">
      <summary>
            Adott payload type-al rendelkezo kodek parametereit keri le, ami az adott tipusu csatornahoz tartozik.
            </summary>
      <returns>Ha van beallitva, akkor egy string; ha nincs, akkor null.</returns>
    </member>
    <member name="M:Ozeki.Media.Session.MediaDescriptionEx.GetChannelDescription(Ozeki.Media.Session.MediaDescription,Ozeki.Media.MediaType)">
      <summary>
            Visszaadja az adott mediatipusu csatornahoz tartozo description-t.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.SDP.SDPProvider.SimpleSDPProvider.GetCodecs(Ozeki.VoIP.SDP.Message.SDPData.SDPMediaDescription,Ozeki.Media.MediaType,Ozeki.Media.Codec.ICodecDescriptionFactory)">
      <summary>
            Az SDP adott media channelebol kiszedi a codeceket.
            </summary>
    </member>
    <member name="T:Ozeki.Network.ITransportFactory">
      <summary>
              Létrehoz egy transport réteget
            </summary>
    </member>
    <member name="M:Ozeki.Network.ITransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.ITransportFactory.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.ITransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.Network.ITransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyelésérõl
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.ITransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="P:Ozeki.Network.ITransportFactory.MinPort">
      <summary>
              A legikisebb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.ITransportFactory.MaxPort">
      <summary>
              A legnagyobb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.ITransportFactory.ReservedPorts">
      <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
    </member>
    <member name="P:Ozeki.Network.ITransportFactory.LocalAddress">
      <summary>
              A lokális cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.ITransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="T:Ozeki.Network.BaseTransportFactory">
      <summary>
              A TCP és a UDP TransportFactory nek vannak közös tulajdonságai, ezért készült ez az ősosztály
            </summary>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a paraméterként átadott lokális címmel, ha a port nem esik a porttartományba vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Feliratkozunk egy port figyelésére ha ahhoz kapcsolódási kérelem érkezik,
              akkor a paraméterként átadott callback en keresztül átadjuk az új transport réteget,
              melyen keresztül kommunikálhatunk a kapcsolódott félllel
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkozunk a paraméterknét átadott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ha nincs szükségünk a továbbiakban a transport rétegre, akkor azt visszaadhatjuk a factory nek
              Figyelem!!! Mindenképpen iratkozzunk le a transportréteg eseményeiről, mielőtt visszaadjuk a factory nek
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="M:Ozeki.Network.BaseTransportFactory.NextPort">
      <summary>
      </summary>
      <returns>A következő portszámmal tér vissza</returns>
    </member>
    <member name="P:Ozeki.Network.BaseTransportFactory.MinPort">
      <summary>
              A legkisebb kiosztható cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.BaseTransportFactory.MaxPort">
      <summary>
              A legnagyobb kiosztható cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.BaseTransportFactory.ReservedPorts">
      <summary>
              Lefoglalt portok
            </summary>
    </member>
    <member name="P:Ozeki.Network.BaseTransportFactory.LocalAddress">
      <summary>
              Lokális cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.BaseTransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="T:Ozeki.Network.Collection.TransportAddressKey">
      <summary>
            Kollekciokhoz hasznalatos azonosito.
            </summary>
    </member>
    <member name="T:Ozeki.Network.ITransport">
      <summary>
              Hálózati réteg
            </summary>
    </member>
    <member name="M:Ozeki.Network.ITransport.Send(Ozeki.Network.IPacket)">
      <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Network.ITransport.Connect(System.String,System.Int32)">
      <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
      <param name="remoteEndPoint">
      </param>
      <param name="remotePort">
      </param>
    </member>
    <member name="P:Ozeki.Network.ITransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="E:Ozeki.Network.ITransport.PacketReceived">
      <summary>
              Üzenet érkezett a hálózati rétegen keresztül. Lehetséges, hogy a beérkező csomag más címről jött
            </summary>
    </member>
    <member name="T:Ozeki.Network.NetworkAddressHelper">
      <summary>
      </summary>
    </member>
    <member name="M:Ozeki.Network.NetworkAddressHelper.GetLocalIP">
      <summary>
            Detects the local IP address.
            </summary>
      <returns>Detected IP address.</returns>
    </member>
    <member name="M:Ozeki.Network.NetworkAddressHelper.GetAddressList">
      <summary>
            Gets the list of local IP addresses.
            </summary>
      <returns>List of local IP addresses.</returns>
    </member>
    <member name="M:Ozeki.Network.NetworkAddressHelper.GetLocalAddress(System.String,System.Int32)">
      <summary>
            Determines which local address will be used when sending packet to the given remote address.
            </summary>
      <param name="remoteAddress">
      </param>
      <param name="remotePort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.Network.TransportType">
      <summary>
            Defines the type of the tarnsport
            </summary>
    </member>
    <member name="F:Ozeki.Network.TransportType.Other">
      <summary>
            Other transport type
            </summary>
    </member>
    <member name="F:Ozeki.Network.TransportType.Udp">
      <summary>
            UDP 
            </summary>
    </member>
    <member name="F:Ozeki.Network.TransportType.Tcp">
      <summary>
            TCP
            </summary>
    </member>
    <member name="F:Ozeki.Network.TransportType.Tls">
      <summary>
            TLS
            </summary>
    </member>
    <member name="F:Ozeki.Network.TransportType.Stcp">
      <summary>
            STCP
            </summary>
    </member>
    <member name="T:Ozeki.Network.TransportTypeEx">
      <summary>
            Specifies the transport type according to a given string
            </summary>
    </member>
    <member name="M:Ozeki.Network.TransportTypeEx.FromString(System.String)">
      <summary>
            Static method for creating a TransportType object from a given string
            </summary>
      <param name="transportTypeString">The string that specifies the transport type</param>
      <returns>A TransportType object according to the parameter string</returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.BaseTransportFactory2.NextPort">
      <summary>
      </summary>
      <returns>A következő portszámmal tér vissza</returns>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.BaseTransportFactory2.MinPort">
      <summary>
              A legikisebb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.BaseTransportFactory2.MaxPort">
      <summary>
              A legnagyobb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.BaseTransportFactory2.ReservedPorts">
      <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.BaseTransportFactory2.LocalAddress">
      <summary>
              A lokális cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.BaseTransportFactory2.TransportType">
      <summary>
              Protokol tipusa
            </summary>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransport.Send(Ozeki.Network.IPacket)">
      <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransport.Connect(System.String,System.Int32)">
      <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
      <param name="remoteEndPoint">
      </param>
      <param name="remotePort">
      </param>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransportFactory.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.SingleThread.SingleThreadTransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransportFactory.MinPort">
      <summary>
              A legikisebb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransportFactory.MaxPort">
      <summary>
              A legnagyobb kiosztható port
            </summary>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransportFactory.ReservedPorts">
      <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransportFactory.LocalAddress">
      <summary>
              A lokális cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.SingleThread.SingleThreadTransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="T:Ozeki.Network.SocketAsyncBufferPool">
      <summary>
              Ez az osztály létrehoz egy nagyobb méretű buffert, ezt a buffert osztja szét az átadott socketAsyncEventArgsok között
              ha valamely, socketAsyncEventArgs nak már nincs rá szüksége, akkor visszaadja a Poolnak és a tömb ezen része újrafelhasználásra kerül
              Ez által csökkenthető a memória fragmentáció és kevesebbet kell dolgoznia a GC nek is. 
              Megjegyzés: a .NET ben nagyon gyors az objektum létrehozás, de elég lassú az objektum megsemmisítés, ezért ezt célszerű elkerülni
            </summary>
    </member>
    <member name="M:Ozeki.Network.SocketAsyncBufferPool.#ctor(System.Int32,System.Int32)">
      <summary>
              Létrehoz egy buffer poolt, a bufferek méretei meg kell, hogy egyezzenek
            </summary>
      <param name="bufferCount">A kezdeti bufferek száma</param>
      <param name="bufferSize">A bufferek mérete</param>
    </member>
    <member name="M:Ozeki.Network.SocketAsyncBufferPool.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
              Beállítja a paraméter bufferét
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Ozeki.Network.SocketAsyncBufferPool.FreeBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Az eventArgsnak nincs többé szüksége a bufferre, ezért újrafelhasználható a buffer
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="T:Ozeki.Network.TransportFactoryCollection">
      <summary>
            Contains multiple <see cref="T:Ozeki.Network.ITransportFactory" /> objects sort by transport type.
            </summary>
            Mivel csak az inicializálás elején vannak hozzáadva a transport factory típusok, így ez a kód nem fog hibát okozni, de a jelenlegi implementáció nem szálbiztos
        </member>
    <member name="M:Ozeki.Network.UDP.PBX.SocketEventArgsPool.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPProxyTransport2.Send(Ozeki.Network.IPacket)">
      <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPProxyTransport2.Connect(System.String,System.Int32)">
      <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
      <param name="remoteEndPoint">
      </param>
      <param name="remotePort">
      </param>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.UDPProxyTransport2.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPRealTransport2.Connect(System.String,System.Int32)">
      <summary>
              Hozzákapcsolódik egy távoli címhez, hogyha már kapcsolódott, akkor átirányítja a kapcsolatot, ha nem tudja végrehajtani false értékkel tér vissza
            </summary>
      <param name="host">
      </param>
      <param name="port">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPRealTransport2.Send(Ozeki.Network.IPacket)">
      <summary>
              Üzenet küldése a hálózati rétegen keresztül
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.UDPRealTransport2.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.CreateTransport(System.Int32)">
      <summary>
            Létrehoz egy transport réteget a lokális port alapján, ha a portot nem lehet használni vagy foglalt, akkor null értékkel tér vissza
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ezzel jelezzük, hogy a paraméterként átadott transport rétegre már nincs szükségünk
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.CreateSocket(System.Int32,System.Net.Sockets.Socket@)">
      <summary>
            Létrehozza vagy előszedi a socket pool bol a socket et
            </summary>
      <param name="localPort">
      </param>
      <param name="socket">
      </param>
      <returns>Most lett hozzáadva a socketPool hoz</returns>
    </member>
    <member name="M:Ozeki.Network.UDP.PBX.UDPTransportFactory2.CreateToken(System.Net.Sockets.Socket)">
      <summary>
            Létrehozza a socket hez a token-t
            </summary>
      <param name="socket">
      </param>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.UDPTransportFactory2.ReservedPorts">
      <summary>
              Visszaadja a jelenleg használt portokat
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.PBX.UDPTransportFactory2.TransportType">
      <summary>
              Protokol tipusa
            </summary>
    </member>
    <member name="T:Ozeki.Network.TCP.TCPTransport">
      <summary>
              TCP alapú adatátvitelre szolgál a helyi és a távoli végpont között
            </summary>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.#ctor(System.Net.Sockets.Socket,Ozeki.Common.ObjectPool{System.Net.Sockets.SocketAsyncEventArgs},Ozeki.Network.SocketAsyncBufferPool,System.Boolean)">
      <summary>
      </summary>
      <param name="socket">
      </param>
      <param name="socketEventArgsPool">
      </param>
      <param name="bufferManager">
      </param>
      <param name="connected">Akkor használd true értékkel, ha hozzánk kapcsolódtak(amikor figyeltek egy portot és ahhoz kapcsolódtak)</param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.Send(Ozeki.Network.IPacket)">
      <summary>
              Adatot küld a távoli félnek
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.Socket_OperationCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            A socketen valamilyen mûvelet befejezõdött
             </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.DisconnectOperation(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
              A távoli fél megszakította a kommunikációt
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.SendOperation(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
              Az üzenet kiküldése sikeresen befejezõdött
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.ReceiveOperation(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
              Üzenet érkezett a távoli féltõl
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransport.Close">
      <summary>
              Lezárjuk az adott transport réteget
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransport.RemoteAddress">
      <summary>
              Távoli végpont címe
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransport.LocalAddress">
      <summary>
              Helyi végpont címe IP vagy Domain név
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransport.LocalPort">
      <summary>
              Lokális port
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransport.RemotePort">
      <summary>
              Távoli port
            </summary>
    </member>
    <member name="T:Ozeki.Network.TCP.TCPTransportFactory">
      <summary>
              TCPTransport objektumok létrehozására szolgál
            </summary>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransportFactory.CreateTransport(System.Int32)">
      <summary>
              Létrehoz egy transport réteget a paraméterként átadott lokális címmel
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Az adott portot figyeli és ha érkezik rá egy kapcsolódási kérés, akkor a callback meghívódik, amelyben megkapjuk az uj transport rétegunket, melyen keresztul kommunikálhatunk az ujonnan kapcsolodoval, ha az adott portot már figyeli valaki, akkor false értékkel tér vissza
            </summary>
      <param name="port" />
      <param name="callback" />
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkorunk az adott port figyelésérõl
            </summary>
      <param name="port" />
      <param name="callback" />
      <returns />
    </member>
    <member name="M:Ozeki.Network.TCP.TCPTransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ha a paraméterben átadott transport rétegre nincs tovább szükségünk, akkor adjuk vissza azt a factroy nek
              Figyelem!!! mindenképpen iratkozzunk le a transport réteg eseményeirõl, mielõtt visszaadjuk azt a factory nek
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransportFactory.ReservedPorts">
      <summary>
              Lefoglalt portok
            </summary>
    </member>
    <member name="P:Ozeki.Network.TCP.TCPTransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="P:Ozeki.Network.Token.TransportsNumber">
      <summary>
            Azon transportok száma, amely használja a token ben lévő socketet
            </summary>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPProxyTransport.Close">
      <summary>
            Felszabadítja az erőforrásokat
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPProxyTransport.RemoteIPEndPointHashCode">
      <summary>
            A transportFactory nek van szüksége erre az infóra
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPProxyTransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPRealTransport.Connect(System.String,System.Int32)">
      <summary>
            Kapcsolódni tudunk egy távoli címhez
            </summary>
      <param name="host">
      </param>
      <param name="port">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPRealTransport.Close">
      <summary>
            Lezárja a kapcsolatot
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPRealTransport.Protocol">
      <summary>
            Gets the protocol type.
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPRealTransport.RemoteAddress">
      <summary>
            Távoli cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPRealTransport.LocalAddress">
      <summary>
            Helyi cím
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPRealTransport.LocalPort">
      <summary>
            Lokális port
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPRealTransport.RemotePort">
      <summary>
            Távoli port
            </summary>
    </member>
    <member name="T:Ozeki.Network.UDP.UDPTransportFactory">
      <summary>
              UDP transport objektumok előállítására szolgál
            </summary>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPTransportFactory.CreateTransport">
      <summary>
              Létrehoz egy transport réteget, ha a porttartományban nincs szabad port, akkor null értékkel tér vissza
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPTransportFactory.CreateTransport(System.Int32)">
      <summary>
            Létrehoz egy transport réteget a paraméterként átadott lokális címmel
            </summary>
      <param name="localPort">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPTransportFactory.ListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Feliratkozunk, egy lokális port figyelésére, ha ahhoz, "kapcsolódási kérelem"(UDP nél nincs ilyen) érkezik, akkor a paraméterként
              átadott callback en keresztül átadjuk az új transport réteget, melyen keresztül kommunikálhat a távoli félellel
            </summary>
      <param name="port">Lokális port, amelyet figyelni szeretnénk</param>
      <param name="callback">
      </param>
      <returns>False al tér vissza, ha az adott port már foglalt és emiatt nem lehet figyelni a kapcsolódási kérelmeket</returns>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPTransportFactory.UnsubscribeListenPort(System.Int32,System.EventHandler{Ozeki.Common.GenericEventArgs{Ozeki.Network.ITransport}})">
      <summary>
              Leiratkozunk egy adott port figyeléséről
            </summary>
      <param name="port">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.UDP.UDPTransportFactory.Remove(Ozeki.Network.ITransport)">
      <summary>
              Ha a paraméterben átadott transport rétegre nincs tovább szükségünk, akkor adjuk vissza azt a factroy nek
              Figyelem!!! mindenképpen iratkozzunk le a transport réteg eseményeiről, mielőtt visszaadjuk azt a factory nek
            </summary>
      <param name="transport">
      </param>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPTransportFactory.ReservedPorts">
      <summary>
              Lefoglalt portok
            </summary>
    </member>
    <member name="P:Ozeki.Network.UDP.UDPTransportFactory.TransportType">
      <summary>
              Protokoll tipusa
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.ArrayUtil.Split(System.Byte[],System.Int32)">
      <summary>
            Frame size mereture darabolja a tombot
            </summary>
      <param name="array">
      </param>
      <param name="frameSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.ArrayUtil.Aggregate(System.Collections.Generic.List{System.Byte[]})">
      <summary>
            A tombokbol egy byte tombot csinal
            </summary>
      <param name="arrays">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecFactoryG726.#ctor(System.Int32)">
      <summary>
            Támogatott bitráták
            16000, 24000, 32000, 48000
            </summary>
      <param name="bitrate">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecG722.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Codec.CodecG722" /> class with 64000 bitrate
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecG722.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Codec.CodecG722" /> class
            </summary>
      <param name="bitRate">Can be 48000, 56000 or 64000</param>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecG729">
      <summary>
            G.729 Annex-A codec
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecG729.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Codec.CodecG729" /> class
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecInfo">
      <summary>
            Provides information about a codec.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecInfo.#ctor(System.Int32,System.String,System.Int32,System.Boolean,Ozeki.Media.Codec.CodecMediaType)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Codec.CodecInfo" /> class.
            </summary>
      <param name="payload">The payload of the codec.</param>
      <param name="name">The name of the codec.</param>
      <param name="sampleRate">The name of the codec.</param>
      <param name="enabled">Boolean value whether the codec is enabled.</param>
      <param name="type">Gets the media type of the codec.</param>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
      <param name="obj">The object to compare</param>
      <returns>true if the parameter object is equal to the current object, otherwise false</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecInfo.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>The hash code of the codec</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.CodecInfo.ToString">
      <summary>
            Creates the string representation of the CodecInfo object.
            </summary>
      <returns>The string representation of the CodecInfo object.</returns>
    </member>
    <member name="P:Ozeki.Media.Codec.CodecInfo.Payload">
      <summary>
            Gets the payload of the codec.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.CodecInfo.Enabled">
      <summary>
            Gets or sets a boolean value indicating whether the codec is enabled during the following calls.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.CodecInfo.CodecName">
      <summary>
            Gets the name of the codec.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.CodecInfo.SampleRate">
      <summary>
            Gets the sample rate of the codec.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.CodecInfo.CodecType">
      <summary>
            Gets the media type of the codec.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.G723.CodecG723.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Media.Codec.G726.CodecG726.#ctor(System.Int32)">
      <summary>
            Támogatott bitráták
            16000, 24000, 32000, 40000
            </summary>
      <param name="bitrate">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.G726.CodecG726.Encode(System.Byte[])">
      <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.G726.CodecG726.Decode(System.Byte[])">
      <summary>
            A kódolt(tömörített) adatot nyers formámban adja vissza
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.G726.CodecG726.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.Description">
      <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.SampleRate">
      <summary>
            Mintavételezési ráta
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.PayloadType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.MediaType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.EncodingName">
      <summary>
            A kodek azonosítási neve
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.Channels">
      <summary>
            Adatcsatornák száma.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G726.CodecG726.PacketizationTime">
      <summary>
            Default ms/packet (csak audionál van szerepe)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.G728.CodecG728.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.BaseH263Codec.Encode(System.Byte[])">
      <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.BaseH263Codec.Decode(System.Byte[])">
      <summary>
            A kódolt(tömörített) adatot nyers formámban adja vissza
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.BaseH263Codec.SetEncoderConfig(System.Int32,System.Int32,System.Double)">
      <summary>
            Átállítja az encoder konfigurációt
            </summary>
      <returns>True, ha megváltozott a konfig</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.BaseH263Codec.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.Description">
      <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.SampleRate">
      <summary>
            Mintavételezési ráta
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.PayloadType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.MediaType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.EncodingName">
      <summary>
            A kodek azonosítási neve
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.Channels">
      <summary>
            Adatcsatornák száma.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.BaseH263Codec.PacketizationTime">
      <summary>
            Default ms/packet (csak audionál van szerepe)
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.H263.CodecH263">
      <summary>
            A szabvány szerint a másik félnek csak olyan méretű képet küldhetnénk, amit megadott az fmtp ben.
            Ha átméretezem a képet, akkor exception nel elszáll az X-Lite, Bria
            A képátméretező működik (teszteltem)
            Ha nem méretezem át, akkor nem szabványos a protokoll implementáció, de a 3CX softphone kivételével (nem jeleníti meg a képet csak ha QCIF, CIF felbontásban van a kamera) mindenhol működik
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.CodecH263.Encode(System.Byte[])">
      <summary>
            A nyers adatot kódolja(tömöríti)
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.CodecH263.Description">
      <summary>
            A kodek leírása, amit megjelenítéshez lehet használni
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.CodecH263.PayloadType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H263.CodecH263.EncodingName">
      <summary>
            A kodek azonosítási neve
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.Description">
      <summary>
            Codec neve
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.SampleRate">
      <summary>
            Mintavételezési ráta
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.PayloadType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.MediaType">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.EncodingName">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.H264.CodecH264.Channels">
      <summary>
            Adatcsatornák száma.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.CodeciLBC.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the CodeciLBC class
            </summary>
      <param name="mode">20ms or 30ms</param>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecSpeexNarrowband">
      <summary>
            8 Khz
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecSpeexUltraWideband">
      <summary>
            32 khz
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.CodecSpeexWideband">
      <summary>
            16 KHz 
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.GSM.GSMEncoder.#ctor">
            Encoder class constructor. 
        </member>
    <member name="M:Ozeki.Media.Codec.GSM.GSMEncoder.encode(System.IO.BinaryReader,System.String)">
             Encode the specified InputStream.     
            
             @param input The stream to encode.
             @param output_file The name of the GSM encoded file.
        </member>
    <member name="M:Ozeki.Media.Codec.GSM.GSMEncoder.encode(System.Int16[])">
            Encodes a block of data.
            
            	@param asBuffer	an 160-element array with the data to encode
            			int PCM 16 bit format.
            
            	@param abFrame	the encoded GSM frame (33 bytes).
        </member>
    <member name="M:Ozeki.Media.Codec.GSM.GSMEncoder.ulaw_input(System.IO.BinaryReader)">
            Read 160 bytes from a U-law stream and set up the input_signal array. 
        </member>
    <member name="M:Ozeki.Media.Codec.GSM.GSMEncoder.dump_Gsm_State(Ozeki.Media.Codec.GSM.Gsm_State)">
             Used for debugging. 
            
             @param g_s The Gsm_State object to be viewed.
        </member>
    <member name="P:Ozeki.Media.Codec.H263.CodecH263Plus.Description">
      <summary>
            Codec neve
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.H263.H263Encoder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Media.Codec.H264.H264Decoder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Media.Codec.H264.H264Encoder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Media.Codec.G722.G722Flags">
      <summary>
            G722 Flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.G722Flags.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.G722Flags.SampleRate8000">
      <summary>
            Using a G722 sample rate of 8000
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.G722Flags.Packed">
      <summary>
            Packed
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.G722.Band">
      <summary>
            Band data for G722 Codec
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.s">
      <summary>s</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.sp">
      <summary>sp</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.sz">
      <summary>sz</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.r">
      <summary>r</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.a">
      <summary>a</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.ap">
      <summary>ap</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.p">
      <summary>p</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.d">
      <summary>d</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.b">
      <summary>b</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.bp">
      <summary>bp</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.sg">
      <summary>sg</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.nb">
      <summary>nb</summary>
    </member>
    <member name="F:Ozeki.Media.Codec.G722.Band.det">
      <summary>det</summary>
    </member>
    <member name="T:Ozeki.Media.Codec.G722.G722Codec">
      <summary>
            SpanDSP - a series of DSP components for telephony
            
            g722_decode.c - The ITU G.722 codec, decode part.
            
            Written by Steve Underwood &lt;steveu@coppice.org&gt;
            
            Copyright (C) 2005 Steve Underwood
            Ported to C# by Mark Heath 2011
            
            Despite my general liking of the GPL, I place my own contributions 
            to this code in the public domain for the benefit of all mankind -
            even the slimy ones who might try to proprietize my work and use it
            to my detriment.
             
            Based in part on a single channel G.722 codec which is:
            Copyright (c) CMU 1993
            Computer Science, Speech Group
            Chengxiang Lu and Alex Hauptmann
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.G722.G722Codec.Saturate(System.Int32)">
      <summary>
            hard limits to 16 bit samples
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.G722.G722Codec.Decode(Ozeki.Media.Codec.G722.G722CodecState,System.Int16[],System.Byte[],System.Int32)">
      <summary>
            Decodes a buffer of G722
            </summary>
      <param name="state">Codec state</param>
      <param name="outputBuffer">Output buffer (to contain decompressed PCM samples)</param>
      <param name="inputG722Data">
      </param>
      <param name="inputLength">Number of bytes in input G722 data to decode</param>
      <returns>Number of samples written into output buffer</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.G722.G722Codec.Encode(Ozeki.Media.Codec.G722.G722CodecState,System.Byte[],System.Int16[],System.Int32)">
      <summary>
            Encodes a buffer of G722
            </summary>
      <param name="state">Codec state</param>
      <param name="outputBuffer">Output buffer (to contain encoded G722)</param>
      <param name="inputBuffer">PCM 16 bit samples to encode</param>
      <param name="inputBufferCount">Number of samples in the input buffer to encode</param>
      <returns>Number of encoded bytes written into output buffer</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.G722.G722CodecState">
      <summary>
            Stores state to be used between calls to Encode or Decode
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.G722.G722CodecState.#ctor(System.Int32,Ozeki.Media.Codec.G722.G722Flags)">
      <summary>
            Creates a new instance of G722 Codec State for a 
            new encode or decode session
            </summary>
      <param name="rate">Bitrate (typically 64000)</param>
      <param name="options">Special options</param>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.ItuTestMode">
      <summary>
            ITU Test Mode
            TRUE if the operating in the special ITU test mode, with the band split filters disabled.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.Packed">
      <summary>
            TRUE if the G.722 data is packed
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.EncodeFrom8000Hz">
      <summary>
            8kHz Sampling
            TRUE if encode from 8k samples/second
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.BitsPerSample">
      <summary>
            Bits Per Sample
            6 for 48000kbps, 7 for 56000kbps, or 8 for 64000kbps.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.QmfSignalHistory">
      <summary>
            Signal history for the QMF (x)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.Band">
      <summary>
            Band
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.InBuffer">
      <summary>
            In bit buffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.InBits">
      <summary>
            Number of bits in InBuffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.OutBuffer">
      <summary>
            Out bit buffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.G722.G722CodecState.OutBits">
      <summary>
            Number of bits in OutBuffer
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.iLBC.bitpack">
            @author Jean Lorchat
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.bitstream">
            @author Jean Lorchat
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.ilbc_common">
            @author Jean Lorchat
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.ilbc_constants">
            @author Jean Lorchat
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.ilbc_decoder">
            @author Jean Lorchat
        </member>
    <member name="M:Ozeki.Media.Codec.iLBC.ilbc_decoder.refiner(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Single,System.Single)">
            @param period Currently not used
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.ilbc_encoder">
            @author Jean Lorchat
        </member>
    <member name="M:Ozeki.Media.Codec.iLBC.ilbc_encoder.AbsQuantW(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            @param syntDenum Currently not used
        </member>
    <member name="T:Ozeki.Media.Codec.iLBC.ilbc_ulp">
            @author Jean Lorchat
        </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.BandMode">
      <summary>
            Indicates the mode in which the encoder/decoder is working.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.BandMode.Narrow">
      <summary>
            Narrow band. Is equal to 8kHz sample rate.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.BandMode.Wide">
      <summary>
            Wide band. Is equal to 16kHzs sample rate.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.BandMode.UltraWide">
      <summary>
            Ultra-wide band. Is equal to 32kHz sample rate.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Bits">
      <summary>
            Speex bit packing and unpacking class.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Bits.DefaultBufferSize">
      <summary>
             Default buffer size
             </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Bits.bytes">
      <summary>
            "raw" data
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Bits.bytePtr">
      <summary>
            Position of the byte "cursor"
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Bits.bitPtr">
      <summary>
            Position of the bit "cursor" within the current byte
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.#ctor">
      <summary>
            Initialise the bit packing variables.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.Advance(System.Int32)">
      <summary>
            Advance n bits.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.Peek">
      <summary>
            Take a peek at the next bit.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.ReadFrom(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read the given array into the buffer.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.Unpack(System.Int32)">
      <summary>
            Read the next N bits from the buffer.
            </summary>
      <returns>the next N bits from the buffer.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Bits.Pack(System.Int32,System.Int32)">
      <summary>
            Write N bits of the given data to the buffer.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.CodebookSearch">
      <summary>
            Abstract class that is the base for the various Codebook search methods.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.CodebookSearch.Quantify(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32)">
      <summary>
            Codebook Search Quantification.
            </summary>
      <param name="target">target vector</param>
      <param name="ak">LPCs for this subframe</param>
      <param name="awk1">Weighted LPCs for this subframe</param>
      <param name="awk2">Weighted LPCs for this subframe</param>
      <param name="p">number of LPC coeffs</param>
      <param name="nsf">number of samples in subframe</param>
      <param name="exc">excitation array.</param>
      <param name="es">position in excitation array.</param>
      <param name="r">
      </param>
      <param name="bits">Speex bits buffer.</param>
      <param name="complexity">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.CodebookSearch.Unquantify(System.Single[],System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Codebook Search Unquantification.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_20_32_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_10_16_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_10_32_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_5_256_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_5_64_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.exc_8_128_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.gain_cdbk_nb">
      <summary>
            Gain Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.gain_cdbk_lbr">
      <summary>
            Gain Codebook (LBR)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.hexc_10_32_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.hexc_table">
      <summary>
            Excitation Codebook
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.high_lsp_cdbk">
      <summary>
            LSP Codebook (high)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.high_lsp_cdbk2">
      <summary>
            LSP Codebook (high)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.cdbk_nb">
      <summary>
            Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.cdbk_nb_low1">
      <summary>
            Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.cdbk_nb_low2">
      <summary>
            Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.cdbk_nb_high1">
      <summary>
            Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.cdbk_nb_high2">
      <summary>
            Codebook (narrowband)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.h0">
      <summary>
            QMF (Quadratic Mirror Filter) table
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Codebook_Constants.h1">
      <summary>
            QMF (Quadratic Mirror Filter) table
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Filters">
      <summary>
             Filters
             </summary>
            
             @author Jim Lawrence, helloNetwork.com
             @author Marc Gimpel, Wimba S.A. (mgimpel@horizonwimba.com)
             @version $Revision: 1.2 $
        </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Filters.Comb_filter(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Single)">
      <summary>
            Comb Filter
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Filters.Qmf_decomp(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Single[])">
      <summary>
            Quadrature Mirror Filter to Split the band in two. A 16kHz signal is thus
            divided into two 8kHz signals representing the low and high bands. (used
            by wideband encoder)
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.LspQuant">
      <summary>
            Abstract class that is the base for the various LSP Quantisation and
            Unquantisation methods.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LspQuant.Quant(System.Single[],System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Line Spectral Pair Quantification.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LspQuant.Unquant(System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Line Spectral Pair Unquantification.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LspQuant.UnpackPlus(System.Single[],System.Int32[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single,System.Int32,System.Int32)">
      <summary>
            Read the next 6 bits from the buffer, and using the value read and the
            given codebook, rebuild LSP table.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LspQuant.Lsp_quant(System.Single[],System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            LSP quantification Note: x is modified
            </summary>
      <returns>the index of the best match in the codebook (NB x is also</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LspQuant.Lsp_weight_quant(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            LSP weighted quantification Note: x is modified
            </summary>
      <returns>the index of the best match in the codebook (NB x is also</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.HighLspQuant">
      <summary>
            LSP Quantisation and Unquantisation (high)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.HighLspQuant.Quant(System.Single[],System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Line Spectral Pair Quantification (high).
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.HighLspQuant.Unquant(System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Line Spectral Pair Unquantification (high).
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.IDecoder">
      <summary>
            Speex Decoder inteface, used as a base for the Narrowband and sideband
            decoders.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.IDecoder.Decode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Decode the given input bits.
            </summary>
      <returns>1 if a terminator was found, 0 if not.</returns>
      <exception cref="T:Ozeki.Media.Codec.Speex.Implementation.InvalidFormatException">If there is an error detected in the data stream.</exception>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.IDecoder.DecodeStereo(System.Single[],System.Int32)">
      <summary>
            Decode the given bits to stereo.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.IEncoder">
      <summary>
            Speex Encoder interface, used as a base for the Narrowband and sideband
            encoders.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.IEncoder.Encode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Encode the given input signal.
            </summary>
      <returns>1 if successful.</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Inband">
      <summary>
            Speex in-band and User in-band controls.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Inband.SpeexInbandRequest(Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Speex in-band request (submode=14).
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Inband.UserInbandRequest(Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            User in-band request (submode=13).
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.InvalidFormatException">
      <summary>
            Indicates a mal-formed speex stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.InvalidFormatException.#ctor(System.String)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer">
      <summary>
            Jitter buffer implemenation.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JitterBufferPacket">
      <summary>
            Represents the container for one packte in the buffer.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JITTER_BUFFER_OK">
      <summary>
            Packet has been retrieved
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JITTER_BUFFER_MISSING">
      <summary>
            Packet is lost or is late
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JITTER_BUFFER_INSERTION">
      <summary>
            A "fake" packet is meant to be inserted here to increase buffering
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JITTER_BUFFER_INTERNAL_ERROR">
      <summary>
            There was an error in the jitter buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JITTER_BUFFER_BAD_ARGUMENT">
      <summary>
            Invalid argument
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.pointer_timestamp">
      <summary>
            Timestamp of what we will *get* next
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.last_returned_timestamp">
      <summary>
            Useful for getting the next packet with the same timestamp (for fragmented media)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.next_stop">
      <summary>
            Estimated time the next get() will be called
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.buffered">
      <summary>
            Amount of data we think is still buffered by the application (timestamp units)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.packets">
      <summary>
            Packets stored in the buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.arrival">
      <summary>
            Packet arrival time (0 means it was late, even though it's a valid timestamp)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.DestroyBufferCallback">
      <summary>
            Callback for destroying a packet
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.delay_step">
      <summary>
            Size of the steps when adjusting buffering (timestamp units)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.concealment_size">
      <summary>
            Size of the packet loss concealment "units"
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.reset_state">
      <summary>
            True if state was just reset
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.buffer_margin">
      <summary>
            How many frames we want to keep in the buffer (lower bound)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.late_cutoff">
      <summary>
            How late must a packet be for it not to be considered at all
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.interp_requested">
      <summary>
            An interpolation is requested by <see cref="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.UpdateDelay" /></summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.auto_adjust">
      <summary>
            Whether to automatically adjust the delay at any time
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer._tb">
      <summary>
            Don't use those directly
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.timeBuffers">
      <summary>
            Storing arrival time of latest frames so we can compute some stats
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.window_size">
      <summary>
            Total window over which the late frames are counted
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.subwindow_size">
      <summary>
            Sub-window size for faster computation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.max_late_rate">
      <summary>
            Absolute maximum amount of late packets tolerable (in percent)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.latency_tradeoff">
      <summary>
            Latency equivalent of losing one percent of packets
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.auto_tradeoff">
      <summary>
            Latency equivalent of losing one percent of packets (automatic default)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.lost_count">
      <summary>
            Number of consecutive lost packets
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.Init(System.Int32)">
      <summary>
            Initializes the jitterbuffer with a given <paramref name="step_size" />.
            </summary>
      <param name="step_size">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.ComputeOptDelay">
      <summary>
            Based on available data, this computes the optimal delay for the jitter buffer. 
            The optimised function is in timestamp units and is:
            cost = delay + late_factor*[number of frames that would be late if we used that delay]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.UpdateTimings(System.Int32)">
      <summary>
            Take the following timing into consideration for future calculations
            </summary>
      <param name="timing">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.Put(Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JitterBufferPacket)">
      <summary>
            Put one packet into the jitter buffer
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.Get(Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.JitterBufferPacket@,System.Int32,System.Int32@)">
      <summary>
            Get one packet from the jitter buffer
            </summary>
      <param name="packet">
      </param>
      <param name="desired_span">
      </param>
      <param name="start_offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.ShiftTimings(System.Int16)">
            Compensate all timings when we do an adjustment of the buffering 
        </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.UpdateDelay">
      <summary>
            Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.JitterBuffer.Tick">
      <summary>
            Call this method to indicate one step in time (one tick).
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SpeexJitterBuffer">
      <summary>
            Jitter buffer designed for a speex decoder.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexJitterBuffer.#ctor(Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder)">
      <summary>
            Creates a new instance using the given <paramref name="decoder" /></summary>
      <param name="decoder">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexJitterBuffer.Get(System.Int16[])">
      <summary>
            Returns the next decoded frame from the buffer.
            </summary>
      <param name="decodedFrame">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexJitterBuffer.Put(System.Byte[])">
      <summary>
            Puts the <paramref name="frameData" /> into the buffer. Note that the given byte array
            is not copied so you transfer ownership to the buffer.
            </summary>
      <param name="frameData">
      </param>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.LbrLspQuant">
      <summary>
            LSP Quantisation and Unquantisation (Lbr)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LbrLspQuant.Quant(System.Single[],System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Line Spectral Pair Quantification (Lbr).
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LbrLspQuant.Unquant(System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
             Line Spectral Pair Unquantification (Lbr).
             </summary>
      <param name="lsp"> -</param>
      <param name="order">
      </param>
      <param name="bits"> -</param>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Lpc">
      <summary>
            LPC - and Reflection Coefficients.
            
            The next two functions calculate linear prediction coefficients and/or the
            related reflection coefficients from the first P_MAX+1 values of the
            autocorrelation function.
            
            Invented by N. Levinson in 1947, modified by J. Durbin in 1959.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lpc.Wld(System.Single[],System.Single[],System.Single[],System.Int32)">
      <summary>
            Returns minimum mean square error.
            </summary>
      <returns>minimum mean square error.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lpc.Autocorr(System.Single[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Compute the autocorrelation ,--, ac(i) = &gt; x(n)/// x(n-i) for all n `--'
            for lags between 0 and lag-1, and x == 0 outside 0...n-1
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Lsp">
      <summary>
            Line Spectral Pair
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lsp.#ctor">
      <summary>
             Constructor
             </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lsp.Cheb_poly_eva(System.Single[],System.Single,System.Int32)">
      <summary>
            This function evaluates a series of Chebyshev polynomials.
            </summary>
      <returns>the value of the polynomial at point x.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lsp.Lpc2lsp(System.Single[],System.Int32,System.Single[],System.Int32,System.Single)">
      <summary>
            This function converts LPC coefficients to LSP coefficients.
            </summary>
      <returns>the number of roots (the LSP coefs are returned in the array).</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lsp.Lsp2lpc(System.Single[],System.Single[],System.Int32)">
      <summary>
            Line Spectral Pair to Linear Prediction Coefficients
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Lsp.Enforce_margin(System.Single[],System.Int32,System.Single)">
      <summary>
            Makes sure the LSPs are stable.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Ltp">
      <summary>
            Abstract class that is the base for the various LTP (Long Term Prediction)
            Quantisation and Unquantisation methods.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp.Quant(System.Single[],System.Single[],System.Int32,System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[],System.Int32,System.Single[],System.Int32)">
      <summary>
            Long Term Prediction Quantification.
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp.Unquant(System.Single[],System.Int32,System.Int32,System.Single,System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32,System.Int32,System.Single)">
      <summary>
            Long Term Prediction Unquantification.
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp.Inner_prod(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
      <summary>
            Calculates the inner product of the given vectors.
            </summary>&gt;
            <returns>the inner product of the given vectors.</returns></member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp.Open_loop_nbest_pitch(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Single[],System.Int32)">
      <summary>
            Find the n-best pitch in Open Loop.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Ltp3Tap">
      <summary>
            Long Term Prediction Quantisation and Unquantisation (3Tap)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp3Tap.Quant(System.Single[],System.Single[],System.Int32,System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[],System.Int32,System.Single[],System.Int32)">
      <summary>
            Long Term Prediction Quantification (3Tap).
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp3Tap.Unquant(System.Single[],System.Int32,System.Int32,System.Single,System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32,System.Int32,System.Single)">
      <summary>
            Long Term Prediction Unquantification (3Tap).
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Ltp3Tap.Pitch_gain_search_3tap(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[],System.Int32,System.Single[],System.Int32[])">
      <summary>
            Finds the best quantized 3-tap pitch predictor by analysis by synthesis.
            </summary>
      <param name="target">Target vector</param>
      <param name="ak">LPCs for this subframe</param>
      <param name="awk1">Weighted LPCs #1 for this subframe</param>
      <param name="awk2">Weighted LPCs #2 for this subframe</param>
      <param name="exc">Excitation</param>
      <param name="es">
      </param>
      <param name="pitch">Pitch value</param>
      <param name="p">Number of LPC coeffs</param>
      <param name="nsf">Number of samples in subframe</param>
      <param name="bits">
      </param>
      <param name="exc2">
      </param>
      <param name="e2s">
      </param>
      <param name="r">
      </param>
      <param name="cdbk_index">
      </param>
      <returns>the best quantized 3-tap pitch predictor by analysis by</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.LtpForcedPitch">
      <summary>
            Long Term Prediction Quantisation and Unquantisation (Forced Pitch)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LtpForcedPitch.Quant(System.Single[],System.Single[],System.Int32,System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[],System.Int32,System.Single[],System.Int32)">
      <summary>
            Long Term Prediction Quantification (Forced Pitch).
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.LtpForcedPitch.Unquant(System.Single[],System.Int32,System.Int32,System.Single,System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32,System.Int32,System.Single)">
      <summary>
            Long Term Prediction Unquantification (Forced Pitch).
            </summary>
      <returns>pitch</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Misc">
      <summary>
            Miscellaneous functions
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Misc.Window(System.Int32,System.Int32)">
      <summary>
            Builds an Asymmetric "pseudo-Hamming" window.
            </summary>
      <returns>an Asymmetric "pseudo-Hamming" window.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Misc.LagWindow(System.Int32,System.Single)">
      <summary>
            Create the window for autocorrelation (lag-windowing).
            </summary>
      <returns>the window for autocorrelation.</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.NbCodec">
      <summary>
            Narrowband Codec. This class contains all the basic structures needed by the
            Narrowband encoder and decoder.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.VERY_SMALL">
      <summary>
            Very small initial value for some of the buffers.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.NB_SUBMODES">
      <summary>
            The Narrowband Submodes gives the number of submodes possible for the
            Narrowband codec.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.NB_SUBMODE_BITS">
      <summary>
            The Narrowband Submodes Bits gives the number bits used to encode the
            Narrowband Submode
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.NB_FRAME_SIZE">
      <summary>
            The Narrowband Frame Size gives the size in bits of a Narrowband frame
            for a given narrowband submode.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.submodes">
      <summary>
            Sub-mode data
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.submodeID">
      <summary>
            Activated sub-mode
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.first">
      <summary>
            Is this the first frame?
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.frameSize">
      <summary>
            Size of frames
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.subframeSize">
      <summary>
            Size of sub-frames
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.nbSubframes">
      <summary>
            Number of sub-frames
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.windowSize">
      <summary>
            Analysis (LPC) window length
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.lpcSize">
      <summary>
            LPC order
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.bufSize">
      <summary>
            Buffer size
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.min_pitch">
      <summary>
            Minimum pitch value allowed
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.max_pitch">
      <summary>
            Maximum pitch value allowed
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.gamma1">
      <summary>
            Perceptual filter: A(z/gamma1)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.gamma2">
      <summary>
            Perceptual filter: A(z/gamma2)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.lag_factor">
      <summary>
            Lag windowing Gaussian width
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.lpc_floor">
      <summary>
            Noise floor multiplier for A[0] in LPC analysis
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.preemph">
      <summary>
            Pre-emphasis: P(z) = 1 - a*z^-1
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.pre_mem">
      <summary>
            1-element memory for pre-emphasis
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.frmBuf">
      <summary>
            Input buffer (original signal)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.excBuf">
      <summary>
            Excitation buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.excIdx">
      <summary>
            Start of excitation frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.innov">
      <summary>
            Innovation for the frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.lpc">
      <summary>
            LPCs for current frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.qlsp">
      <summary>
            Quantized LSPs for current frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.old_qlsp">
      <summary>
            Quantized LSPs for previous frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.interp_qlsp">
      <summary>
            Interpolated quantized LSPs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.interp_qlpc">
      <summary>
            Interpolated quantized LPCs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.mem_sp">
      <summary>
            Filter memory for synthesis signal
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.pi_gain">
      <summary>
            Gain of LPC filter at theta=pi (fe/2)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbCodec.dtx_enabled">
            1 for enabling DTX, 0 otherwise 
        </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbCodec.Nbinit">
      <summary>
            Narrowband initialisation.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbCodec.Init(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialisation.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbCodec.BuildNbSubModes">
      <summary>
            Build narrowband submodes
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.NbDecoder">
      <summary>
            Narrowband Speex Decoder
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.count_lost">
      <summary>
            Packet loss
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.last_pitch">
      <summary>
            Pitch of last correctly decoded frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.last_pitch_gain">
      <summary>
            Pitch gain of last correctly decoded frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.pitch_gain_buf">
      <summary>
            Pitch gain of last decoded frames
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.pitch_gain_buf_idx">
      <summary>
            Tail of the buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.last_ol_gain">
      <summary>
            Open-loop gain for previous frame
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.Decode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Decode the given input bits.
            </summary>
      <returns>1 if a terminator was found, 0 if not.</returns>
      <exception cref="T:Ozeki.Media.Codec.Speex.Implementation.InvalidFormatException">If there is an error detected in the data stream.</exception>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.DecodeLost(System.Single[])">
      <summary>
            Decode when packets are lost.
            </summary>
      <returns>0 if successful.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbDecoder.DecodeStereo(System.Single[],System.Int32)">
      <summary>
            Decode the given bits to stereo.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.NbEncoder">
      <summary>
            Narrowband Speex Encoder
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.NB_QUALITY_MAP">
      <summary>
            The Narrowband Quality map indicates which narrowband submode to use for
            the given narrowband quality setting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.bounded_pitch">
      <summary>
            Next frame should not rely on previous frames for pitch
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.pre_mem2">
      <summary>
            1-element memory for pre-emphasis
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.exc2Buf">
      <summary>
            "Pitch enhanced" excitation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.exc2Idx">
      <summary>
            "Pitch enhanced" excitation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.swBuf">
      <summary>
            Weighted signal buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.swIdx">
      <summary>
            Start of weighted signal frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.window">
      <summary>
            Temporary (Hanning) window
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.buf2">
      <summary>
            2nd temporary buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.autocorr">
      <summary>
            auto-correlation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.lagWindow">
      <summary>
            Window applied to auto-correlation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.lsp">
      <summary>
            LSPs for current frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.old_lsp">
      <summary>
            LSPs for previous frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.interp_lsp">
      <summary>
            Interpolated LSPs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.interp_lpc">
      <summary>
            Interpolated LPCs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.bw_lpc1">
      <summary>
            LPCs after bandwidth expansion by gamma1 for perceptual weighting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.bw_lpc2">
      <summary>
            LPCs after bandwidth expansion by gamma2 for perceptual weighting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.rc">
      <summary>
            Reflection coefficients
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.mem_sw">
      <summary>
            Filter memory for perceptually-weighted signal
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.mem_sw_whole">
      <summary>
            Filter memory for perceptually-weighted signal (whole frame)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.mem_exc">
      <summary>
            Filter memory for excitation (whole frame)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.vbr">
      <summary>
            State of the VBR data
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.dtx_count">
      <summary>
            Number of consecutive DTX frames
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.complexity">
      <summary>
            Complexity setting (0-10 from least complex to most complex)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.vbr_enabled">
      <summary>
            1 for enabling VBR, 0 otherwise
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.vad_enabled">
      <summary>
            1 for enabling VAD, 0 otherwise
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.abr_enabled">
      <summary>
            ABR setting (in bps), 0 if off
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.vbr_quality">
      <summary>
            Quality setting for VBR encoding
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.relative_quality">
      <summary>
            Relative quality that will be needed by VBR
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.submodeSelect">
      <summary>
            Mode chosen by the user (may differ from submodeID if VAD is on)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.Init(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initialisation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbEncoder.Encode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Encode the given input signal.
            </summary>
      <returns>return 1 if successful.</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.NbLspQuant">
      <summary>
              LSP Quantisation and Unquantisation (narrowband)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbLspQuant.Quant(System.Single[],System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
              Line Spectral Pair Quantification (narrowband).
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NbLspQuant.Unquant(System.Single[],System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
              Line Spectral Pair Unquantification (narrowband).
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.NoiseSearch">
      <summary>
            Noise codebook search
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NoiseSearch.Quantify(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32)">
      <summary>
            Codebook Search Quantification (Noise).
            </summary>
      <param name="target">target vector</param>
      <param name="ak">LPCs for this subframe</param>
      <param name="awk1">Weighted LPCs for this subframe</param>
      <param name="awk2">Weighted LPCs for this subframe</param>
      <param name="p">number of LPC coeffs</param>
      <param name="nsf">number of samples in subframe</param>
      <param name="exc">excitation array.</param>
      <param name="es">position in excitation array.</param>
      <param name="r">
      </param>
      <param name="bits">Speex bits buffer.</param>
      <param name="complexity">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.NoiseSearch.Unquantify(System.Single[],System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
             Codebook Search Unquantification (Noise).
             </summary>
      <param name="exc"> -</param>
      <param name="es"> -</param>
      <param name="nsf"> -</param>
      <param name="bits"> -</param>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SbCodec">
      <summary>
            Sideband Codec. This class contains all the basic structures needed by the
            Sideband encoder and decoder.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbCodec.SB_SUBMODES">
      <summary>
            The Sideband Submodes gives the number of submodes possible for the
            Sideband codec.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbCodec.SB_SUBMODE_BITS">
      <summary>
            The Sideband Submodes Bits gives the number bits used to encode the
            Sideband Submode
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbCodec.QMF_ORDER">
      <summary>
            Quadratic Mirror Filter Order
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbCodec.SB_FRAME_SIZE">
      <summary>
            The Sideband Frame Size gives the size in bits of a Sideband frame for a
            given sideband submode.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbCodec.BuildWbSubModes">
      <summary>
            Build wideband submodes.
            </summary>
      <returns>the wideband submodes.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbCodec.BuildUwbSubModes">
      <summary>
            Build ultra-wideband submodes.
            </summary>
      <returns>the ultra-wideband submodes.</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SbDecoder">
      <summary>
            Sideband Speex Decoder
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.#ctor(System.Boolean)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.Wbinit">
      <summary>
            Wideband initialisation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.Uwbinit">
      <summary>
            Ultra-wideband initialisation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.Decode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Decode the given input bits.
            </summary>
      <returns>1 if a terminator was found, 0 if not.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.DecodeLost(System.Single[],System.Boolean)">
      <summary>
            Decode when packets are lost.
            </summary>
      <returns>0 if successful.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbDecoder.DecodeStereo(System.Single[],System.Int32)">
      <summary>
            Decode the given bits to stereo.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SbEncoder">
      <summary>
            Wideband Speex Encoder
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.NB_QUALITY_MAP">
      <summary>
            The Narrowband Quality map indicates which narrowband submode to use for
            the given wideband/ultra-wideband quality setting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.WB_QUALITY_MAP">
      <summary>
            The Wideband Quality map indicates which sideband submode to use for the
            given wideband/ultra-wideband quality setting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.UWB_QUALITY_MAP">
      <summary>
             The Ultra-wideband Quality map indicates which sideband submode to use
             for the given ultra-wideband quality setting
             </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.lowenc">
      <summary>
            The encoder for the lower half of the Spectrum.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.res">
      <summary>
             Weighted signal buffer
             </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.autocorr">
      <summary>
            Reflection coefficients
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.lsp">
      <summary>
            auto-correlation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.old_lsp">
      <summary>
            LSPs for current frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.interp_lsp">
      <summary>
            LSPs for previous frame
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.interp_lpc">
      <summary>
            Interpolated LSPs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.bw_lpc1">
      <summary>
            Interpolated LPCs
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.bw_lpc2">
      <summary>
            LPCs after bandwidth expansion by gamma1 for perceptual weighting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.mem_sp2">
      <summary>
            LPCs after bandwidth expansion by gamma2 for perceptual weighting
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.nb_modes">
            Filter memory for perceptually-weighted signal 
        </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.vbr_enabled">
      <summary>
            Complexity setting (0-10 from least complex to most complex)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.vad_enabled">
      <summary>
            1 for enabling VBR, 0 otherwise
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.abr_enabled">
      <summary>
            1 for enabling VAD, 0 otherwise
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.vbr_quality">
      <summary>
            ABR setting (in bps), 0 if off
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.relative_quality">
      <summary>
            Quality setting for VBR encoding
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.abr_drift">
      <summary>
            Relative quality that will be needed by VBR
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.#ctor(System.Boolean)">
            Mode chosen by the user (may differ from submodeID if VAD is on) 
        </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.Wbinit">
      <summary>
            Wideband initialisation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.Uwbinit">
      <summary>
            Ultra-wideband initialisation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SbEncoder.Encode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[])">
      <summary>
            Encode the given input signal.
            </summary>
      <returns>1 if successful.</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder">
      <summary>
            NSpeex Decoder class. This class decodes the given speex frames into
            PCM 16bit samples.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder.#ctor(Ozeki.Media.Codec.Speex.Implementation.BandMode,System.Boolean)">
      <summary>
            Constructor
            <param name="mode">The mode of the decoder.</param><param name="enhanced">Whether to enable perceptual enhancement or not.</param></summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Boolean)">
      <summary>
            Decodes the given encoded data.
            </summary>
      <param name="inData">The encoded data. Can be multiple frames.</param>
      <param name="inOffset">Start offset where to read the encoded data from.</param>
      <param name="inCount">The number of bytes to decode.</param>
      <param name="outData">The output of the decoded data in samples.</param>
      <param name="outOffset">Start offset where to start writing the decoded samples from.</param>
      <param name="lostFrame">Indicates if we are decoding a lost frame. Alternatively the <paramref name="inData" /> parameter can be <value>null</value>.</param>
      <returns>The number of samples decoded.</returns>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder.FrameSize">
      <summary>
            The frame size indicates the samples which are packed in a single Speex frame.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexDecoder.SampleRate">
      <summary>
            The sampling rate in samples per second
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder">
      <summary>
            NSpeex Encoder class. This class encodes the given PCM 16bit samples into speex
            frames.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.#ctor(Ozeki.Media.Codec.Speex.Implementation.BandMode)">
      <summary>
            Constructor
            </summary>
      <param name="mode">the mode of the encoder (0=NB, 1=WB, 2=UWB).</param>
      <returns>true if initialisation successful.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.Encode(System.Int16[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Encodes the given sample data.
            </summary>
      <param name="inData">Array of samples.</param>
      <param name="inOffset">Start offset for the inData.</param>
      <param name="inCount">Number of samples to encode. Must be a multiple of <see cref="P:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.FrameSize" />.</param>
      <param name="outData">The encoded data.</param>
      <param name="outOffset">Start offset when writing to outData</param>
      <param name="outCount">The length of the outData array (maximum number of bytes writting after encoding).</param>
      <returns>The bytes encoded.</returns>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.SampleRate">
      <summary>
            The sampling rate in samples per second
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.Quality">
      <summary>
            The encoder quality within the range [0-10].
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.VBR">
      <summary>
            Turns encoding in variable bit rate on or off.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SpeexEncoder.FrameSize">
      <summary>
            The frame size indicates the samples which are packed in a single Speex frame.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SplitShapeSearch">
      <summary>
            Split shape codebook search
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SplitShapeSearch.#ctor(System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SplitShapeSearch.Quantify(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],Ozeki.Media.Codec.Speex.Implementation.Bits,System.Int32)">
      <summary>
            Codebook Search Quantification (Split Shape).
            </summary>
      <param name="target">target vector</param>
      <param name="ak">LPCs for this subframe</param>
      <param name="awk1">Weighted LPCs for this subframe</param>
      <param name="awk2">Weighted LPCs for this subframe</param>
      <param name="p">number of LPC coeffs</param>
      <param name="nsf">number of samples in subframe</param>
      <param name="exc">excitation array.</param>
      <param name="es">position in excitation array.</param>
      <param name="r">
      </param>
      <param name="bits">Speex bits buffer.</param>
      <param name="complexity">
      </param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.SplitShapeSearch.Unquantify(System.Single[],System.Int32,System.Int32,Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Codebook Search Unquantification (Split Shape).
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Stereo.SPEEX_INBAND_STEREO">
      <summary>
             Inband code number for Stereo
             </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Stereo.balance">
      <summary>
            Left/right balance info
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Stereo.e_ratio">
      <summary>
            Ratio of energies: E(left+right)/[E(left)+E(right)]
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Stereo.smooth_left">
      <summary>
            Smoothed left channel gain
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Stereo.smooth_right">
      <summary>
            Smoothed right channel gain
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Stereo.Encode(Ozeki.Media.Codec.Speex.Implementation.Bits,System.Single[],System.Int32)">
      <summary>
            Transforms a stereo frame into a mono frame and stores intensity stereo
            info in 'bits'.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Stereo.Decode(System.Single[],System.Int32)">
      <summary>
             Transforms a mono frame into a stereo frame using intensity stereo info.
             </summary>
      <param name="data"> -</param>
      <param name="frameSize"> -</param>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Stereo.Init(Ozeki.Media.Codec.Speex.Implementation.Bits)">
      <summary>
            Callback handler for intensity stereo info
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.SubMode">
      <summary>
            Speex SubMode
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.LbrPitch">
      <summary>
            Set to -1 for "normal" modes, otherwise encode pitch using a global pitch
            and allowing a +- lbr_pitch variation (for low not-rates)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.ForcedPitchGain">
      <summary>
            Use the same (forced) pitch gain for all sub-frames
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.HaveSubframeGain">
      <summary>
            Number of bits to use as sub-frame innovation gain
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.DoubleCodebook">
      <summary>
            Apply innovation quantization twice for higher quality (and higher
            bit-rate)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.LsqQuant">
      <summary>
            LSP quantization/unquantization function
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.Ltp">
      <summary>
            Long-term predictor (pitch) un-quantizer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.Innovation">
      <summary>
            Codebook Search un-quantizer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.LpcEnhK1">
      <summary>
            Enhancer constant
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.LpcEnhK2">
      <summary>
            Enhancer constant
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.CombGain">
      <summary>
            Gain of enhancer comb filter
            </summary>
    </member>
    <member name="P:Ozeki.Media.Codec.Speex.Implementation.SubMode.BitsPerFrame">
      <summary>
            Number of bits per frame after encoding
            </summary>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.Vbr">
      <summary>
            This class analyses the signal to help determine what bitrate to use when the
            Varible BitRate option has been selected.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Vbr.nb_thresh">
      <summary>
            Narrowband threshhold table.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Vbr.hb_thresh">
      <summary>
            Wideband threshhold table.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.Speex.Implementation.Vbr.uhb_thresh">
      <summary>
            Ultra-wideband threshhold table.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Vbr.#ctor">
      <summary>
             Constructor
             </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.Vbr.Analysis(System.Single[],System.Int32,System.Int32,System.Single)">
      <summary>
             This function should analyse the signal and decide how critical the
             coding error will be perceptually. The following factors should be taken
             into account:
             <ul><li>Attacks (positive energy derivative) should be coded with more bits</li><li>Stationary voiced segments should receive more bits</li><li>Segments with (very) low absolute energy should receive less bits
             (maybe only shaped noise?)</li><li>DTX for near-zero energy?</li><li>Stationary fricative segments should have less bits</li><li>Temporal masking: when energy slope is decreasing, decrease the
             bit-rate</li><li>Decrease bit-rate for males (low pitch)?</li><li>(wideband only) less bits in the high-band when signal is very
             non-stationary (harder to notice high-frequency noise)???</li></ul></summary>
      <param name="sig">
      </param>
      <param name="len">
      </param>
      <param name="pitch">
      </param>
      <param name="pitch_coef">
      </param>
      <returns>quality</returns>
    </member>
    <member name="T:Ozeki.Media.Codec.Speex.Implementation.VQ">
      <summary>
            Vector Quantization.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.VQ.Index(System.Single,System.Single[],System.Int32)">
      <summary>
            Finds the index of the entry in a codebook that best matches the input.
            </summary>
      <returns>the index of the entry in a codebook that best matches the input.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.VQ.Index(System.Single[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Finds the index of the entry in a codebook that best matches the input.
            </summary>
      <returns>the index of the entry in a codebook that best matches the input.</returns>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.VQ.Nbest(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32[],System.Single[])">
      <summary>
            Finds the indices of the n-best entries in a codebook
            </summary>
    </member>
    <member name="M:Ozeki.Media.Codec.Speex.Implementation.VQ.Nbest_sign(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32[],System.Single[])">
      <summary>
            Finds the indices of the n-best entries in a codebook with sign
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.VideoSrcType.SUB_CIF">
      <summary>
            128x96
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.VideoSrcType.QCIF">
      <summary>
            176x144
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.VideoSrcType.CIF">
      <summary>
            352x288
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.VideoSrcType.CIF4">
      <summary>
            704x576
            </summary>
    </member>
    <member name="F:Ozeki.Media.Codec.VideoSrcType.CIF16">
      <summary>
            1408x1152
            </summary>
    </member>
    <member name="T:Ozeki.Common.DefaultLogger">
      <summary>
            Writes log messages to the parameter logger
            </summary>
    </member>
    <member name="M:Ozeki.Common.DefaultLogger.WriteLog(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Writes the messages to the logger
            </summary>
      <param name="logType">
      </param>
      <param name="level">Specifies the logging level</param>
      <param name="eventCode">
      </param>
      <param name="message">The message that the logger writes</param>
    </member>
    <member name="M:Ozeki.Common.DefaultLogger.AllowedId(System.Int32)">
      <summary>
            Ha az adott id-t tartalmazza, akkor akkor is kiírja az adott üzenetet a loggerbe, ha nem felel meg a szintnek
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.Common.FileLogger">
      <summary>
            Ezzel a loggerrel file ba logolhatunk aszinkron módon
            </summary>
    </member>
    <member name="M:Ozeki.Common.FileLogger.#ctor(System.String)">
      <summary>
            A paraméterként átadott file ba fog logolni
            </summary>
      <param name="path">A file elérési útja, ha a file nem létezik, akkor létrehozza, ha létezik, akkor pedig hozzáfűzi a további logokat </param>
    </member>
    <member name="M:Ozeki.Common.FileLogger.Close">
      <summary>
            Lezárja a log file -t
            </summary>
    </member>
    <member name="M:Ozeki.Common.FileLogger.WriteLog(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Ha valamely osztály írni szeretne a logba, akkor ez a metódus hívódik meg
            </summary>
      <param name="logType">
      </param>
      <param name="level">A logolás szinte (fileLoggernél nincs jelentősége)</param>
      <param name="id">
      </param>
      <param name="message">Az üzenet, amely kiírásra kerül</param>
    </member>
    <member name="M:Ozeki.Common.FileLogger.AllowedId(System.Int32)">
      <summary>
            Ha az adott id-t tartalmazza, akkor akkor is kiírja az adott üzenetet a loggerbe, ha nem felel meg a szintnek
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Common.LogRotator.WriteLog(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Az üzenetet kiírjuk a loggerre
            </summary>
      <param name="logType">
      </param>
      <param name="level">Ez határozza meg, a logolás szintjét</param>
      <param name="id">
      </param>
      <param name="message">Ez az üzenet, amelyet a logger ki fog írni</param>
    </member>
    <member name="M:Ozeki.Common.LogRotator.AllowedId(System.Int32)">
      <summary>
            Ha az adott id-t tartalmazza, akkor akkor is kiírja az adott üzenetet a loggerbe, ha nem felel meg a szintnek
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Common.SysLog.IPHelper.GetAddress(System.Net.Sockets.AddressFamily)">
      <summary>
            Ez a metódus a sz. gép egy olyan IP címével tér vissza, amely nem loopback és a megfelelő címcsaládba tartozik pl.: IPv4 vagy IPv6
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Kernel">
      <summary>
            kernel messages
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.User">
      <summary>
            user-level messages
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Mail">
      <summary>
            mail system
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.System">
      <summary>
            system daemons
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Security">
      <summary>
            security/authorization messages (note 1)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Internally">
      <summary>
            messages generated internally by syslogd
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Printer">
      <summary>
            line printer subsystem
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.News">
      <summary>
            network news subsystem
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Uucp">
      <summary>
            UUCP subsystem
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.Cron">
      <summary>
            clock daemon (note 2) changed to cron
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.SECURITY2">
      <summary>
            clock daemon (note 2) changed to cron
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.FTP">
      <summary>
            FTP daemon
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.NTP">
      <summary>
            NTP subsystem
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.AUDIT">
      <summary>
            log audit (note 1)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.ALERT">
      <summary>
            log alert (note 1)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.CLOCK2">
      <summary>
            clock daemon (note 2)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL0">
      <summary>
            local use 0  (local0)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL1">
      <summary>
            local use 1  (local1)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL2">
      <summary>
            local use 2  (local2)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL3">
      <summary>
            local use 3  (local3)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL4">
      <summary>
            local use 4  (local4)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL5">
      <summary>
            local use 5  (local5)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL6">
      <summary>
            local use 6  (local6)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysFacility.LOCAL7">
      <summary>
            local use 7  (local7)
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysHeader.timeStamp">
      <summary>
            Mmm dd hh:mm:ss A formátum az évet nem támogatja, ha mégis szeretnénk tudni az évet is, akkor azt a message fielden célszerű elhelyezni
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysHeader.hostName">
      <summary>
             If the originally formed message has a HOSTNAME field, then it
            will contain the hostname as it knows itself.  If it does not
            have a hostname, then it will contain its own IP address.
            </summary>
    </member>
    <member name="T:Ozeki.Common.SysLog.SysMessage">
      <summary>
            A SysLog protokollban ASCII karakterkódolás van meghatározva, ezért ékezetes karaktereket nem célszerű használni
            </summary>
    </member>
    <member name="F:Ozeki.Common.SysLog.SysMessage.tag">
      <summary>
            Kiegészítő információkat szokás ebbe a mezőbe elhelyezni, pl.: melyik folyamattól származik az adott üzenet
            </summary>
    </member>
    <member name="M:Ozeki.Common.SysLog.SysLogClient.Send(Ozeki.Common.SysLog.SysLogMessage)">
      <summary>
            Elküld egy Syslog üzenet a remote host nak 
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Ozeki.Common.SysLog.SysLogClient.Close">
      <summary>
            Bezárja a jelenlegi kapcsolatot
            </summary>
    </member>
    <member name="P:Ozeki.Common.SysLog.SysLogClient.IsActive">
      <summary>
            Le lehet kérni, hogy a távoli host létre lett e hozva
            </summary>
    </member>
    <member name="P:Ozeki.Common.SysLog.SysLogClient.RemotePort">
      <summary>
            A remote host portja
            </summary>
    </member>
    <member name="P:Ozeki.Common.SysLog.SysLogClient.RemoteIp">
      <summary>
            Remote host ip címe
            </summary>
    </member>
    <member name="M:Ozeki.Common.SysLog.SysLogLogger.WriteLog(Ozeki.Common.Logger.LogType,Ozeki.Common.Logger.LogLevel,System.Int32,System.String)">
      <summary>
            Az üzenetet kiírjuk a loggerre
            </summary>
      <param name="logType">
      </param>
      <param name="level">Ez határozza meg, a logolás szintjét</param>
      <param name="id">
      </param>
      <param name="message">Ez az üzenet, amelyet a logger ki fog írni</param>
    </member>
    <member name="M:Ozeki.Common.SysLog.SysLogLogger.AllowedId(System.Int32)">
      <summary>
            Ha az adott id-t tartalmazza, akkor akkor is kiírja az adott üzenetet a loggerbe, ha nem felel meg a szintnek
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.Common.SysLog.UDPClientEx">
      <summary>
            EZ az eredeti udp kliens osztály egy kibővítése
            </summary>
    </member>
    <member name="P:Ozeki.Common.SysLog.UDPClientEx.IsActive">
      <summary>
            Le lehet kérni, hogy a távoli host létre lett e hozva
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Binding">
      <summary>
            Egy lokális cím és a hozzá tartozó külső cím közti kapcsolatot írja le.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.Binding.GetPublicAddress">
      <summary>
            Connects to a STUN server and retreives the public address.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidatePairState.Waiting">
      <summary>
            A check has not been performed for this pair, and can be performed as soon as it is the highest-priority Waiting pair on the check list.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidatePairState.In_Progress">
      <summary>
            A check has been sent for this pair, but the transaction is in progress.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidatePairState.Succeeded">
      <summary>
            A check for this pair was already done and produced a successful result.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidatePairState.Failed">
      <summary>
            A check for this pair was already done and failed, either never producing any response or producing an unrecoverable failure response.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidatePairState.Frozen">
      <summary>
            A check for this pair hasn't been performed, and it can't yet be performed until some other check succeeds, allowing this pair to unfreeze and move into the Waiting state.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.CandidateType">
      <summary>
            Specifies the type of the candidate
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidateType.Host">
      <summary>
            A candidate obtained by binding to a specific port from an IP address on the host.
            This includes IP addresses on physical interfaces and logical ones, such as ones obtained through Virtual Private Networks (VPNs) and Realm Specific IP (RSIP)
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidateType.ServerReflexive">
      <summary>
            A candidate whose IP address and port are a binding allocated by a NAT for an agent when it sent a packet through the NAT to a server.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidateType.PeerReflexive">
      <summary>
            A candidate whose IP address and port are a binding allocated by a NAT for an agent when it sent a STUN Binding request through the NAT to its peer.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.CandidateType.Relay">
      <summary>
            A candidate obtained by sending a TURN Allocate request from a host candidate to a TURN server.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatDiscovery.Tests.Test1">
      <summary>
            TEST I
            Sends a STUN Binding Request to a server, without any flags set in the CHANGE-REQUEST attribute, and without the RESPONSE-ADDRESS attribute
            
            IF (!received) : UDP blocked
            IF (Received IP == Current IP)   : No NAT
            ELSE                             : NAT detected
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatDiscovery.Tests.Test1Again">
      <summary>
            Test I - 2
            Sends a STUN Binding Request to a server, without any flags set in the CHANGE-REQUEST attribute, and without the RESPONSE-ADDRESS attribute
            Performs test I again, but this time, does so to the address and port from the CHANGED-ADDRESS attribute from the response to test I
            
            IF (Received IP != IP from Previous Test I)  : "Symmetric" NAT
            ELSE                                         : Test III
            
            IF (!Received)                               : Response error.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatDiscovery.Tests.Test3">
      <summary>
            Test III
            Sends a Binding Request with only the "change port" flag set in the CHANGE-REQUEST attribute set
            
            IF received  : "Restricted cone" NAT
            ELSE         : "Port Restricted Cone" NAT
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatDiscovery.Tests.Test2Nat">
      <summary>
            Test II
            Sends a Binding Request with both the "change IP" and "change port" flags from the CHANGE-REQUEST attribute set
            
            IF received  : "Full-cone" NAT
            ELSE         : Do Test I again with Server #2
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatDiscovery.Tests.Test2NoNat">
      <summary>
            TEST II
            Sends a Binding Request with both the "change IP" and "change port" flags from the CHANGE-REQUEST attribute set
            
            IF received  : Open Internet
            ELSE         : "Symmetric" Firewall
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatInfo">
      <summary>
            Provides information about NAT topology.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.NatInfo.#ctor(Ozeki.Network.Nat.NatType,System.Net.IPAddress)">
      <summary>
            Creates an instance of the <see cref="T:Ozeki.Network.Nat.NatInfo" /> class
            </summary>
      <param name="type">Type of the NAT (e.g. Full-cone NAT)</param>
      <param name="ipAddress">External IP Address</param>
    </member>
    <member name="P:Ozeki.Network.Nat.NatInfo.NatType">
      <summary>
            Gets or sets the type of the NAT (e.g. Full-Cone NAT).
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatInfo.PublicAddress">
      <summary>
            Gets the public address.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatType">
      <summary>
            Specifies the types of NAT. 
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.Unknown">
      <summary>
            The system could not detect the type of the NAT.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.UdpBlocked">
      <summary>
            Firewall that blocks UDP.
            </summary>
      <remarks>
            Probably no internet connection available or firewall issue.
            </remarks>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.SymmetricFirewall">
      <summary>
            Firewall that allows UDP out.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.OpenInternet">
      <summary>
            The computer connects to the internet directly.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.FullCone">
      <summary>
            Full-cone NAT, also known as one-to-one NAT
            </summary>
      <remarks>
            Once an internal address (iAddr:iPort) is mapped to an external address (eAddr:ePort), any packets from iAddr:iPort will be sent through eAddr:ePort.
            Any external host can send packets to iAddr:iPort by sending packets to eAddr:ePort.
            </remarks>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.SymmetricNAT">
      <summary>
            Symmetric NAT
            </summary>
      <remarks>
            Each request from the same internal IP address and port to a specific destination IP address and port is mapped to a unique external source IP address and port, if the same internal host sends a packet even with the same source address and port but to a different destination, a different mapping is used.
            Only an external host that receives a packet from an internal host can send a packet back.
            
            VoIP will not work using STUN method.
            </remarks>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.RestrictedCone">
      <summary>
            (Address) restricted cone NAT
            </summary>
      <remarks>
            Once an internal address (iAddr:iPort) is mapped to an external address (eAddr:ePort), any packets from iAddr:iPort will be sent through eAddr:ePort.
            An external host (hAddr:any) can send packets to iAddr:iPort by sending packets to eAddr:ePort only if iAddr:iPort has previously sent a packet to hAddr:any. "Any" means the port number doesn't matter.
            </remarks>
    </member>
    <member name="F:Ozeki.Network.Nat.NatType.PortRestrictedCone">
      <summary>
            Port-restricted cone NAT
            </summary>
      <remarks>
            Like an address restricted cone NAT, but the restriction includes port numbers.
            
            Once an internal address (iAddr:iPort) is mapped to an external address (eAddr:ePort), any packets from iAddr:iPort will be sent through eAddr:ePort.
            An external host (hAddr:hPort) can send packets to iAddr:iPort by sending packets to eAddr:ePort only if iAddr:iPort has previously sent a packet to hAddr:hPort.
            </remarks>
    </member>
    <member name="F:Ozeki.Network.Nat.NatTraversalMethod.None">
      <summary>
            Using local address.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatTraversalMethod.STUN">
      <summary>
            Using public address.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.NatTraversalMethod.TURN">
      <summary>
            Using media relay.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.Requests.StunContext.Receive(Ozeki.Network.Nat.STUN.Message.StunMessage)">
      <summary>
            Processes the response message.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.Requests.StunContext.HandleErrorResponse">
      <summary>
            Handles the error code which is located in the response message
            </summary>
      <returns>Returns whether the request will be resent</returns>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.StunMessage">
      <summary>
            STUN messages are TLV (type-length-value) encoded using big endian (network ordered) binary.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.#ctor(Ozeki.Network.Nat.STUN.Message.MessageProtocol,Ozeki.Network.Nat.STUN.Message.MessageType)">
      <summary>
            Creates a new STUN message.
            </summary>
      <param name="protocol">Which protocol will be used</param>
      <param name="type">Type of the message</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.Parse(System.Byte[])">
      <summary>
            Converts the raw byte data to a STUN Message
            </summary>
      <param name="rawData">Input data</param>
      <returns>Stun Message</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.UpdateAuthType">
      <summary>
            Updates whether long-term credentials or short-term credentials are being used for authentication.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.ParseHeader(System.Byte[])">
      <summary>
            Parses the STUN message header from the raw data
            </summary>
      <param name="data">Raw data</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.ParseAttributes(System.Byte[])">
      <summary>
            Parses the STUN message attributes from the raw data
            </summary>
      <param name="data">Raw data</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GetBytes">
      <summary>
            Converts the entire STUN Message to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GetHeaderBytes">
      <summary>
            Converts the header of the STUN message to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.UpdateLengthBytes(System.Byte[]@)">
      <summary>
            Updates the length bytes of the STUN message header
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GetAttributeBytes">
      <summary>
            Converts the attributes of the STUN message to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.UpdateLastAttributes">
      <summary>
            When FINGERPRINT attribute is present, it MUST be the last attribute in the message, and thus will appear after MESSAGE-INTEGRITY.
            RFC 3489: The MESSAGE-INTEGRITY attribute MUST be the last attribute in any STUN message.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.ContainsAttribute(Ozeki.Network.Nat.STUN.Message.AttributeType)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.AddAttribute(Ozeki.Network.Nat.STUN.Message.STUN_Attribute)">
      <summary>
            Adds a specified STUN attribute to the STUN message
            </summary>
      <param name="attr">STUN attribute</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.AddUnknownAttribute(Ozeki.Network.Nat.STUN.Message.AttributeType)">
      <summary>
            Adds an Attribute Type to the UNKNOWN_ATTRIBUTES attribute.
            </summary>
      <param name="attributeType">The specified attribute type</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GetAttribute(Ozeki.Network.Nat.STUN.Message.AttributeType)">
      <summary>
            Retrieves an attribute from the Attributes collection.
            </summary>
      <param name="attributeType">Which attribute we want to get</param>
      <returns>The specified attribute OR null if the attribute is not present.</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.UpdateMessageLength(System.Boolean)">
      <summary>
            Calculates the length of the message (not including the 20-byte header)
            </summary>
      <param name="fullMessage">Indicates whether calculating the length of the entire message (if false, calculates only until the MESSAGE-INTEGRITY attribute)</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GetPaddingValue(System.Int32)">
      <summary>
            If the length of the attribute is not a multiple of 4, padding must immediately follow the attribute.
            </summary>
      <param name="length">Length of the value part of the attribute</param>
      <returns>Padding value</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.GenerateTransactionId">
      <summary>
            Generates a unique ID into a byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.DetermineProtocolType(System.UInt32)">
      <summary>
            Determines the RFC type of the STUN message
            </summary>
      <param name="magicCookie">
      </param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.StunMessage.IsSTUNMessage(System.Byte[])">
      <summary>
            Determines whether the data can be parsed as a STUN message or not
            </summary>
      <param name="data">Raw data</param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.StunMessage.MessageType">
      <summary>
            Gets or sets the type of the STUN message (e.g. Binding Request)
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.StunMessage.MessageLength">
      <summary>
            Gets the length of the STUN message (header length not included)
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.StunMessage.TransactionId">
      <summary>
            Gets the Transaction ID of the STUN message
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.StunMessage.TransactionIdString">
      <summary>
            Gets the Transaction ID of the STUN message
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.StunMessage.MessageProtocol">
      <summary>
            Gets or sets which protocol will be used.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.Layers.ContextLayer.SendContext(Ozeki.Network.Nat.Requests.ContextPacket)">
      <summary>
            Sends a request to the STUN/TURN server
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Layers.NatTransportLayer">
      <summary>
            STUN szerverrel valo kommunikacio transport retege.
            </summary>
    </member>
    <member name="E:Ozeki.Network.Nat.Layers.NatTransportLayer.MessageReceived">
      <summary>
            Occurs when a STUN message received from server.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatRemoteServer">
      <summary>
            Provides information about a STUN/TURN server.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.NatRemoteServer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatRemoteServer" /> class.
            </summary>
      <param name="address">The transport address of the server.</param>
    </member>
    <member name="M:Ozeki.Network.Nat.NatRemoteServer.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatRemoteServer" /> class.
            </summary>
      <param name="address">The transport address of the server.</param>
      <param name="userName">Username for authentication.</param>
      <param name="password">Password for authentication.</param>
    </member>
    <member name="M:Ozeki.Network.Nat.NatRemoteServer.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.
                            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Network.Nat.NatRemoteServer.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Network.Nat.NatRemoteServer.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.TransportAddress">
      <summary>
            Gets the transport address of the remote host.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.UserName">
      <summary>
            Gets the username used for the authentication with the remote host.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.Realm">
      <summary>
            Gets or sets the Realm component of the remote host.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.Nonce">
      <summary>
            Gets or sets the Nonce component of the remote host.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.Password">
      <summary>
            Gets the password used for the authentication with the remote host.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatRemoteServer.DefaultPort">
      <summary>
            Gets the default STUN server port.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.NatConfiguration">
      <summary>
            Provides NAT settings for phone lines.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.NatConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatConfiguration" /> class and will detect NAT settings automatically.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.NatConfiguration.#ctor(Ozeki.Network.Nat.NatTraversalMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatConfiguration" /> class.
            </summary>
      <param name="methodType">The method type used for NAT traversal.</param>
    </member>
    <member name="M:Ozeki.Network.Nat.NatConfiguration.#ctor(Ozeki.Network.Nat.NatTraversalMethod,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatConfiguration" /> class
            </summary>
      <param name="methodType">The method type used for NAT traversal.</param>
      <param name="remoteServer">Address of the STUN/TURN server.</param>
    </member>
    <member name="M:Ozeki.Network.Nat.NatConfiguration.#ctor(Ozeki.Network.Nat.NatTraversalMethod,Ozeki.Network.Nat.NatRemoteServer)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Network.Nat.NatConfiguration" /> class
            </summary>
      <param name="methodType">The method type used for NAT traversal.</param>
      <param name="remoteServer">STUN/TURN server settings.</param>
    </member>
    <member name="P:Ozeki.Network.Nat.NatConfiguration.TraversalMethodType">
      <summary>
            Gets the type of the method used for communicating with STUN server.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatConfiguration.RemoteServer">
      <summary>
            Gets the configuration of the remote server.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatConfiguration.AutoDetect">
      <summary>
            Gets a boolean value indicating whether the system detects the NAT settings automatically.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.NatConfiguration.UseNat">
      <summary>
            Gets a boolean value indicating whether the system uses public address for communication.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Requests.TURN.CreatePermissionRequest">
      <summary>
            The client who wishes to install or refresh one or more permissions can send a CreatePermission request to the server.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Requests.TURN.RefreshRequest">
      <summary>
            A Refresh transaction can be used to either (a) refresh an existing allocation and update its time-to-expiry or (b) delete an existing allocation.
            If the client wishes to immediately delete an existing allocation, it includes a LIFETIME attribute with a value of 0.  All other forms of the request refresh the allocation.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Requests.TURN.SendIndication">
      <summary>
            The client can use a Send indication to pass data to the server for relaying to a peer.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.Transport.NatTransportContainer">
      <summary>
            NAT-hoz szukseges. Transportokat tarol lokalis cim alapjan, es a koteseket alakit ki koztuk.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.TraversalMethods.ICEMethod.IceSDPProvider_CreatingSDPMessage(System.Object,System.EventArgs)">
      <summary>
            Occurs before the ICE SDP Provider creates a SDP message. Updates the ICE SDP provider with the local agent's data.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Network.Nat.TraversalMethods.ICEMethod.IceSDPProvider_PrepareConnection(System.Object,Ozeki.Common.GenericEventArgs{Ozeki.Network.Nat.ICE.ICEAgent})">
      <summary>
            Occurs when a received SDP message has been processed. (The agent received an initial offer)
            </summary>
      <param name="sender">
      </param>
      <param name="e">Information about the remote agent</param>
    </member>
    <member name="T:Ozeki.Network.Nat.ICE.Candidate">
      <summary>
            A candidate is a potential point of contact for receipt of media.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.Candidate.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.TransportAddress">
      <summary>
            Gets sor sets the transport address of the candidate
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.Base">
      <summary>
            Gets or sets the host candidate from which it was derived.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.Type">
      <summary>
            Gets or sets the type of the candidate
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.Priority">
      <summary>
            Gets or sets the priority of the candidate
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.ComponentId">
      <summary>
            Gets or sets the compontnt ID of the candidate. 
            (For RTP-based media streams, the RTP itself has a component ID of 1, and RTCP a component ID of 2.)
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.Foundation">
      <summary>
            Gets or sets foundation of the cadidate.
            The foundation is an arbitrary string that is the same for two candidates that have the same type, base IP address, protocol (UDP, TCP, etc.), and STUN or TURN server.
            Foundations are used in the frozen algorithm.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.ICE.Candidate.RefreshTimer">
      <summary>
            Gets or sets the time since the candidate was refreshed (in secs)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.ICE.CandidateGatherer">
      <summary>
            Local candidate gatherer class
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.GatherLocalCandidates">
      <summary>
            Gathers the local candidates
            </summary>
      <returns>The list that contains the local candidates</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.GatherHostCandidates">
      <summary>
            Gathers host candidates. Host candidates are obtained by binding to ports (typically ephemeral) on a IP address attached to an interface (physical or virtual, including VPN interfaces) on the host.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.GatherServerReflexiveCandidates">
      <summary>
            Gathers the Server Reflexive Candidates
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.GatherRelayedCandidates">
      <summary>
            Gathers the Relayed Candidates. The client sends an Allocate request to the server, and the server replies with an Allocate success response containing the allocated relayed transport address.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.AddCandidate(System.Net.IPEndPoint,Ozeki.Network.Nat.CandidateType)">
      <summary>
            Adds a candidate to the local candidates list
            </summary>
      <param name="list">The list to which the candidate is to be added</param>
      <param name="transportAddress">Transport address of the candidate</param>
      <param name="type">Type of the candidate</param>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.ComputeFoundations">
      <summary>
            Assigns each candidate a foundation ID.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.PrioritizeCandidates">
      <summary>
            The prioritization process results in the assignment of a priority to each candidate.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.EliminateRedundantCandidates">
      <summary>
            Eliminates redundant candidates.  A candidate is redundant if its transport address equals another candidate, and its base equals the base of that other candidate.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.ICE.CandidateGatherer.KeepAliveCandidates">
      <summary>
            Keeps alive the local candidates. Once server reflexive and relayed candidates are allocated, they MUST be kept alive until ICE processing has completed.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.CreateAttribute(Ozeki.Network.Nat.STUN.Message.AttributeType,Ozeki.Network.Nat.STUN.Message.MessageProtocol)">
      <summary>
            Creates a new STUN attribute instance
            </summary>
      <param name="attributeType">Type of the attribute we want to create</param>
      <param name="protocol">Which protocol will be used (STUN, TURN etc.)</param>
      <returns>A STUN Attribute which has type given in the "attributeType" parameter</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.CreateAttribute(Ozeki.Network.Nat.STUN.Message.AttributeType,System.Int32,Ozeki.Network.Nat.STUN.Message.MessageProtocol)">
      <summary>
            Creates a new STUN attribute instance
            </summary>
      <param name="attributeType">Type of the attribute we want to create</param>
      <param name="valueLength">The length of the value part of the attribute</param>
            /// <param name="protocol">Which protocol will be used (STUN, TURN etc.)</param><returns>A STUN Attribute which has type given in the "attributeType" parameter</returns></member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.GetBytes">
      <summary>
            Converts the entire STUN Attribute to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.GetHeaderBytes">
      <summary>
            Converts the header information to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.GetValueBytes">
      <summary>
            Converts the value to byte array
            </summary>
      <returns>Raw data</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.Parse(System.Byte[],System.Int32,Ozeki.Network.Nat.STUN.Message.MessageProtocol,System.Byte[])">
      <summary>
            Parses the raw byte array to a STUN Attribute
            </summary>
      <param name="data">Raw data</param>
      <param name="offset">The start index of the STUN attribute in the raw data</param>
      <param name="protocol">Message protocol used when parsing STUN message.</param>
      <param name="transactionId">Transaction ID</param>
      <returns>STUN attribute</returns>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.ParseHeader(System.Byte[],System.Int32)">
      <summary>
            Parses the header of the STUN attribute from the raw data
            </summary>
      <param name="data">Raw data</param>
      <param name="offset">The start index of the STUN attribute in the raw data</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.ParseValue(System.Byte[],System.Int32)">
      <summary>
            Parses the value of the STUN attribute from the raw data
            </summary>
      <param name="data">Raw data</param>
      <param name="offset">The start index of the STUN attribute in the raw data</param>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.Type">
      <summary>
            Gets or sets the type of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.ValueLength">
      <summary>
            Gets the length of the Value part of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.TotalLength">
      <summary>
            Gets the full length of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.STUN_Attribute.IsClassicSTUNAttribute">
      <summary>
            Indicates whether this attribute is used in a Classic STUN message
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.Base.AddressAttribute">
      <summary>
            Address-based STUN attribute
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.Base.AddressAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.AddressAttribute.Address">
      <summary>
            Gets or sets the IP Address part of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.AddressAttribute.AddressFamily">
      <summary>
            Gets or sets the Family part of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.AddressAttribute.Port">
      <summary>
            Gets or sets the Port number of the attribute
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.MappedAddressAttribute">
      <summary>
            The MAPPED-ADDRESS attribute indicates a reflexive transport address of the client.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.MappedAddressAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of the MappedAddressAttribute class.
            </summary>
      <param name="isClassicSTUNAttribute">Indicates whether this attribute will be used in a Classic STUN message.</param>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.AlternateServerAttribute">
      <summary>
            The alternate server represents an alternate transport address identifying a different STUN server that the STUN client should try.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.Base.StringAttribute.#ctor">
      <summary>
            Creates a new instance of the StringAttribute class. Default Encoding: UTF-8
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.StringAttribute.MaxLength">
      <summary>
            Gets or sets the maximum length of the value part of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.StringAttribute.Value">
      <summary>
            Gets or sets the value of the attribute
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.StringAttribute.Encoding">
      <summary>
            Gets or sets the encoding of the value
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.Base.UInt32Attribute.Value">
      <summary>
            Gets or sets the value of the attribute
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ChangedAddressAttribute">
      <summary>
            The CHANGED-ADDRESS attribute indicates the IP address and port where responses would have been sent from if
            the "change IP" and "change port" flags had been set in the CHANGE-REQUEST attribute of the Binding Request
            
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ChangeRequestAttribute">
      <summary>
            The CHANGE-REQUEST attribute is used by the client to request that the server use a different address and/or port when sending the response.
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ChangeRequestAttribute.ChangeIp">
      <summary>
            Change IP flag
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ChangeRequestAttribute.ChangePort">
      <summary>
            Change Port flag
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.PasswordAttribute">
      <summary>
            The PASSWORD attribute is used in Shared Secret Responses. 
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.PasswordAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ReflectedFromAttribute">
      <summary>
            The attribute contains the identity (in terms of IP address) of the source where the request came from.
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.ResponseAddressAttribute">
      <summary>
            The RESPONSE-ADDRESS attribute indicates where the response to a Binding Request should be sent
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ClassicSTUN.SourceAddressAttribute">
      <summary>
            The SOURCE-ADDRESS attribute is present in Binding Responses.  It indicates the source IP address and port that the server is sending the response from.
            (Only in Classic-STUN)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.DataAttribute">
      <summary>
            The DATA attribute is present in all Send and Data indications. The value portion of this attribute is variable length and consists of the application data.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute">
      <summary>
            The ERROR-CODE attribute is used in error response messages.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of an Error Code Attribute
            </summary>
      <param name="isClassicSTUNAttribute">Indicates whether this attribute will be used in a Classic STUN message.</param>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.#ctor(Ozeki.Network.Nat.STUN.Message.ErrorCode,System.Boolean)">
      <summary>
            Creates a specified Error Code Attribute
            </summary>
      <param name="errorCode">Error code number</param>
      <param name="isClassicSTUNAttribute">Indicates whether this attribute will be used in a Classic STUN message.</param>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.ErrorCode">
      <summary>
            Gets the numeric error code value
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.ReasonPhrase">
      <summary>
            Gets the textual reason phrase
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.Class">
      <summary>
            Gets the class of the numeric error code
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.ErrorNumber">
      <summary>
            Gets the Error Number
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.ErrorCodeAttribute.ReasonPhraseLength">
      <summary>
            Gets the length of the reason phrase after padding
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.FingerprintAttribute">
      <summary>
            This attribute is used by the client to request that the server set the DF (Don't Fragment) bit in the IP header when relaying the application data onward to the peer.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ICE.ICEControlledAttribute">
      <summary>
            The ICE-CONTROLLED attribute is present in a Binding request and indicates that the client believes it is currently in the controlled role.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ICE.ICEControllingAttribute">
      <summary>
            The ICE-CONTROLLING attribute is present in a Binding request and indicates that the client believes it is currently in the controlling role.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ICE.PriorityAttribute">
      <summary>
            The PRIORITY attribute indicates the priority that is to be associated with a peer reflexive candidate, should one be discovered by this check.
            (Only in ICE)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.ICE.UseCandidateAttribute">
      <summary>
            The USE-CANDIDATE attribute indicates that the candidate pair resulting from this check should be used for transmission of media. It serves as a flag.
            (Only in ICE)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.MessageIntegrityAttribute">
      <summary>
            The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1 of the STUN message.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.MessageIntegrityAttribute.Password">
      <summary>
            Sets the password used for the generation of the Message-Intergrity
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.MessageIntegrityAttribute.Value">
      <summary>
            Gets the value of the Message-Integrity (the HMAC-SHA1 of the STUN message)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.NonceAttribute">
      <summary>
            The value of the NONCE attribute is used for replay protection.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.RealmAttribute">
      <summary>
            The REALM attribute contains information about the server. It is RECOMMENDED that a realm string contain a hostname or domain name.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.SoftwareAttribute">
      <summary>
            The SOFTWARE attribute contains a textual description of the software being used by the agent sending the message.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.ChannelNumberAttribute">
      <summary>
            The CHANNEL-NUMBER attribute contains the number of the channel.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.ChannelNumberAttribute.ChannelNumber">
      <summary>
            Number of the channel
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.ConnectionIdAttribute">
      <summary>
            The CONNECTION-ID attribute uniquely identifies a peer data connection.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.ConnectionIdAttribute.ID">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.DontFramgentAttribute">
      <summary>
            This attribute is used by the client to request that the server set the DF (Don't Fragment) bit in the IP header when relaying the application data onward to the peer.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.EvenPortAttribute">
      <summary>
            This attribute allows the client to request that the port in the relayed transport address be even, and (optionally) that the server reserve the next-higher port number.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.EvenPortAttribute.ReservePortNumber">
      <summary>
            Indicates whether the server is requested to reserve the next-higher port number (on the same IP address) for a subsequent allocation.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.LifetimeAttribute">
      <summary>
            The LIFETIME attribute represents the duration for which the server will maintain an allocation in the absence of a refresh in seconds. Default value is 300 sec.
            (Only in TURN)
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.RequestedTransportAttribute">
      <summary>
            This attribute is used by the client to request a specific transport protocol for the allocated transport address.
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.RequestedTransportAttribute.Protocol">
      <summary>
            Gets or sets the protocol number.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.ReservationTokenAttribute">
      <summary>
            The RESERVATION-TOKEN attribute contains a token that uniquely identifies a relayed transport address being held in reserve by the server.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.XorMappedAddressAttribute">
      <summary>
            The XOR-MAPPED-ADDRESS attribute is identical to the MAPPED-ADDRESS attribute, except that the reflexive transport address is obfuscated through the XOR function.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.TURN.XorPeerAddressAttribute">
      <summary>
            The XOR-PEER-ADDRESS specifies the address and port of the peer as seen from the TURN server.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.UnknownAttributesAttribute">
      <summary>
            The attribute contains a list of 16 bit values, each of which represents an attribute type that was not understood by the server.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.UnknownAttributesAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of an UnknownAttributes Attribute
            </summary>
      <param name="isClassicSTUNAttribute">Indicates whether this attribute will be used in a Classic STUN message.</param>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.Attributes.UnknownAttributesAttribute.Attributes">
      <summary>
            Gets the unknown attribute types
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.UsernameAttribute">
      <summary>
            The USERNAME attribute is used for message integrity.  It identifies the username and password combination used in the message-integrity check.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.UsernameAttribute.#ctor">
      <summary>
            Creates an instance of the UsernameAttribute class using RFC 5389 (STUN) standards.
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.Attributes.UsernameAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of the UsernameAttribute class.
            </summary>
      <param name="isClassicSTUNAttribute">Indicates whether this attribute will be used in a Classic STUN message</param>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Attributes.XorRelayedAddressAttribute">
      <summary>
            The XOR-RELAYED-ADDRESS is present in Allocate responses.  It specifies the address and port that the server allocated to the client.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.AttributeValidationResult">
      <summary>
            Result of the STUN attribute validation
            </summary>
    </member>
    <member name="M:Ozeki.Network.Nat.STUN.Message.AttributeValidationResult.#ctor(Ozeki.Network.Nat.STUN.Message.AttributeErrorCode,System.String)">
      <summary>
            Creates a new instance of the AttributeValidationResult class
            </summary>
      <param name="errorCode">Numeric error code</param>
      <param name="message">Error message</param>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.AttributeValidationResult.ErrorCode">
      <summary>
            Gets the numeric error code value
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.AttributeValidationResult.Message">
      <summary>
            Gets or sets the error message
            </summary>
    </member>
    <member name="P:Ozeki.Network.Nat.STUN.Message.AttributeValidationResult.Valid">
      <summary>
            This property gets a valid attribute result
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.AttributeType">
      <summary>
            Specifies the type of a STUN attribute
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.MessageType">
      <summary>
            The message type defines the message class (request, success response, failure response, or indication) and the message method (the primary function) of the STUN message.
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.ErrorCode">
      <summary>
            Specifies STUN attribute error codes
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.BadRequest">
      <summary>
            A request was received by the server that requires an allocation to be in place, but no allocation exists, or a request was received that requires no allocation, but an allocation exists.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.Unauthorized">
      <summary>
            The Binding Request did not contain a MESSAGE-INTEGRITY attribute.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.UnknownAttribute">
      <summary>
            The server did not understand a mandatory attribute in the request.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.StaleCredentials">
      <summary>
            The Binding Request did contain a MESSAGE-INTEGRITY attribute, but it used a shared secret that has expired.  The client should obtain a new shared secret and try again.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.IntegrityCheckFailure">
      <summary>
            The Binding Request contained a MESSAGE-INTEGRITY attribute, but the HMAC failed verification. This could be a sign of a potential attack, or client implementation error.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.MissingUsername">
      <summary>
            The Binding Request contained a MESSAGE-INTEGRITY attribute, but not a USERNAME attribute.  Both must be present for integrity checks.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.UseTLS">
      <summary>
            The Shared Secret request has to be sent over TLS, but was not received over TLS.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.ServerError">
      <summary>
            The server has suffered a temporary error. The client should try again.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.GlobalFailure">
      <summary>
            The server is refusing to fulfill the request. The client should not retry.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.TryAlternate">
      <summary>
            The client should contact an alternate server for this request. This error response MUST only be sent if the request included a USERNAME attribute and a valid MESSAGE-INTEGRITY attribute; otherwise, it MUST NOT be sent and error code 400 (Bad Request) is suggested. This error response MUST be protected with the MESSAGE-INTEGRITY attribute, and receivers MUST validate the MESSAGE-INTEGRITY of this response before redirecting themselves to an alternate server.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.StaleNonce">
      <summary>
            The NONCE used by the client was no longer valid. The client should retry, using the NONCE provided in the response.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.Forbidden">
      <summary>
            The request was valid but cannot be performed due to administrative or similar restrictions.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.AllocationMismatch">
      <summary>
            A request was received by the server that requires an allocation to be in place, but no allocation exists, or a request was received that requires no allocation, but an  allocation exists.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.WrongCredentials">
      <summary>
            The credentials in the (non-Allocate) request do not match those used to create the allocation.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.UnsupportedTransportProtocol">
      <summary>
            The Allocate request asked the server to use a transport protocol between the server and the peer  that the server does not support.  NOTE: This does NOT refer to the transport protocol used in the 5-tuple.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.AllocationQuotaReached">
      <summary>
            No more allocations using this username can be created at the present time.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.InsufficientCapacity">
      <summary>
            The server is unable to carry out the request due to some capacity limit being reached.  In an Allocate response, this could be due to the server having no more relayed transport addresses available at that time, having none with the requested properties, or the one that corresponds to the specified reservation token is not available.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.ConnectionAlreadyExists">
      <summary>
            The connection to the server has been already established.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.ConnectionTimeoutOrFailure">
      <summary>
            Couldn't connect to the server
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ErrorCode.RoleConflict">
      <summary>
            If the agent's tie-breaker is larger than or equal to the contents of the ICE-CONTROLLING attribute, the agent generates a Binding error response and includes an ERROR-CODE attribute with a value of 487 (Role Conflict) but retains its role.
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.MessageProtocol.ClassicSTUN">
      <summary>
            Simple Traversal of User Datagram Protocol (RFC 3489)
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.MessageProtocol.STUN">
      <summary>
            Session Traversal Utilities for NAT (RFC 5389)
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.MessageProtocol.TURN">
      <summary>
            Traversal Using Relays around NAT (RFC 5766, RFC 6062)
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.MessageProtocol.MS_TURN">
      <summary>
            MS-TURN
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.ContextState">
      <summary>
            Specifies the state of a request
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ContextState.Idle">
      <summary>
            Initial state (the request has not yet been sent)
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ContextState.Pending">
      <summary>
            Have not received any response yet
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ContextState.Succeeded">
      <summary>
            Success response received
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ContextState.Failed">
      <summary>
            Error response received
            </summary>
    </member>
    <member name="F:Ozeki.Network.Nat.STUN.Message.ContextState.TimedOut">
      <summary>
            No response received
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.AddressFamily">
      <summary>
            IP Address Family
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.AuthMechanism">
      <summary>
            Specifies Authentication and Message-Integrity Mechanisms
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.Protocols">
      <summary>
            Protocols
            </summary>
    </member>
    <member name="T:Ozeki.Network.Nat.STUN.Message.AttributeErrorCode">
      <summary>
            Attribute validation error codes
            </summary>
    </member>
    <member name="M:Ozeki.Media.IMediaControl.Start">
      <summary>
            Starts the media.
            </summary>
    </member>
    <member name="M:Ozeki.Media.IMediaControl.Stop">
      <summary>
            Stops the media.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.IAudioControl">
      <summary>
            Audio Control interface
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.IAudioControl.ChangeFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Changes the wave format of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.IAudioControl.DeviceInfo">
      <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.IAudioControl.Initialized">
      <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.IAudioControl.Volume">
      <summary>
            Gets or sets the volume for this device. (Range: 0-1)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.IAudioControl.Level">
      <summary>
            Gets the level of the input/output. (Range: 0-100)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.IAudioControl.Muted">
      <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.IAudioControl.Stopped">
      <summary>
            Occurs when the audio has stopped.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveOut.IWaveOut">
      <summary>
            Interface for audio playback
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.AudioPlayer">
      <summary>
            Provides an interface for audio playback
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.#ctor">
      <summary>
            Creates a new AudioPlayer with default WaveFormat (8 KHz, 16 bit, mono) that plays audio through the speaker
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Creates a new AudioPlayer with the specified WaveFormat
            </summary>
      <param name="waveFormat">The given wave format</param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.Filler(System.IntPtr,System.Int32)">
      <summary>
            A natív playernek újabb adatrészre van szüksége a lejátszáshoz, ha nincs elegendő mennyiségű adat, akkor leállítja a lejátszást.
            </summary>
      <param name="data">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.Start">
      <summary>
            Starts the playback. If the playback has been paused then resumes it.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.Pause">
      <summary>
            Pauses the playback
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.Stop">
      <summary>
            Stops the playback
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.ChangeDevice(System.Int32)">
      <summary>
            Changes the playback device. If the player is already playing then restarts it.
            </summary>
      <param name="deviceId">The identifier of the selected device</param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.Write(System.Byte[])">
      <summary>
            Writes the specified data to the stream
            </summary>
      <param name="data">Raw PCM data</param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioPlayer.GetDevices">
      <summary>
            Retrieves the available recording devices
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.AudioPlayer.DeviceID">
      <summary>
            Gets the identifier of the selected device
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.AudioPlayer.Stopped">
      <summary>
            Occurs when the playback has been stopped
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveIn.IWaveIn">
      <summary>
            Interface for audio recording
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.IWaveIn.State">
      <summary>
            Gets the state of the recording.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Waveform.WaveIn.IWaveIn.DataAvailable">
      <summary>
            Occurs when recorded data is available 
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Waveform.WaveIn.IWaveIn.LevelChanged">
      <summary>
            Occurs when the level of the recording has changed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.AudioRecorder">
      <summary>
            Provides an interface for capturing audio data.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.#ctor">
      <summary>
            Creates a new AudioRecorder with default WaveFormat (8 KHz, 16 bit, mono)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Creates a new AudioRecorder
            </summary>
      <param name="waveFormat">The given wave format</param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.Start">
      <summary>
            Begins the recording
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.Pause">
      <summary>
            Pauses the recording (not implemented)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.Stop">
      <summary>
            Stops the recording
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.ChangeDevice(System.Int32)">
      <summary>
            Changes the input device. If the recorder is already recording then restarts it.
            </summary>
      <param name="deviceId">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.AudioRecorder.GetDevices">
      <summary>
            Retrieves the available recording devices
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.AudioRecorder.IsRecording">
      <summary>
            Returns a boolean value indicating whether the recorder is recording or not.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.AudioRecorder.DeviceID">
      <summary>
            Gets the identifier of the selected device
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.AudioRecorder.BufferSize">
      <summary>
            Gets or sets the latency of the audio buffer. This value must set before starting the recording.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.AudioRecorder.DataAvailable">
      <summary>
            Occurs when recorded data is available 
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.AudioRecorder.Stopped">
      <summary>
            Occurs when the recording has been stopped
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Converter.AudioDataConverter">
      <summary>
            Converts audio from a specified WaveFormat to another WaveFormat.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Converter.AudioDataConverter" /> class.
            </summary>
      <param name="sourceFormat">The WaveFormat of the source.</param>
      <param name="destinationFormat">The WaveFormat of the destination.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.Finalize">
      <summary>
      </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.Convert(System.Byte[])">
      <summary>
            Converts the value of the source WaveFormat to the destination WaveFormat.
            </summary>
      <param name="source">Raw PCM data</param>
      <returns>Converted PCM data</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.DestToSource(System.Int32)">
      <summary>
            Azt adja vissza, hogy megadott konvertált hosszt, hány byteon lehet ábrázolni a forrásban
            </summary>
      <param name="dest">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.SourceToDest(System.Int32)">
      <summary>
            Azt adja vissza, hogy megadott source hosszt, hány byteon lehet ábrázolni a konvertálás után
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.AudioDataConverter.Dispose">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.AudioDataConverter.SourceFormat">
      <summary>
            Gets the source WaveFormat
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.AudioDataConverter.DestinationFormat">
      <summary>
            Gets the destination WaveFormat
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.AudioDataConverter.Disposed">
      <summary>
            Gets a boolean value indicating whether the <see cref="T:Ozeki.Media.Audio.Converter.AudioDataConverter" /> has been disposed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Converter.Mp3DataConverter">
      <summary>
            Converts MP3 to WAV
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.Mp3DataConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Converter.Mp3DataConverter" /> class. with default WaveFormat (8 KHz, 16 bit, mono)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.Mp3DataConverter.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Converter.Mp3DataConverter" /> class.
            </summary>
      <param name="destinationFormat">The specified WaveFormat</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.Mp3DataConverter.Convert(System.Byte[])">
      <summary>
            Converts mp3 data into wave data.
            </summary>
      <param name="data">The mp3 data.</param>
      <returns>The wave data.</returns>
    </member>
    <member name="T:Ozeki.Media.Audio.Converter.StreamConverter">
      <summary>
            Can write a stream to another stream and converting its format.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.StreamConverter.#ctor(Ozeki.Media.Audio.Streams.WaveFileReader,Ozeki.Media.Audio.Streams.WaveFileWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Converter.StreamConverter" /> class.
            </summary>
      <param name="sourceStream">The source stream.</param>
      <param name="destinationStream">The destination stream.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.StreamConverter.ConvertAsync">
      <summary>
            Begins converting asynchronously the source stream into the destination stream. 
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.StreamConverter.Convert">
      <summary>
            Converts the source stream into the destination stream. 
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.StreamConverter.IsBusy">
      <summary>
            Gets a boolean value indicating whether the <see cref="T:Ozeki.Media.Audio.Converter.StreamConverter" /> is busy.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Converter.StreamConverter.ConversionCompleted">
      <summary>
            Occurs when the conversion finished.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.ConvertFlags.BlockAlign">
      <summary>
            Only integral numbers of blocks will be converted. Converted data will end on block-aligned boundaries. An application should use this flag for all conversions on a stream until there is not enough source data to convert to a block-aligned destination. In this case, the last conversion should be specified without this flag.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.ConvertFlags.Start">
      <summary>
            ACM conversion stream should begin returning pending instance data. For example, if a conversion stream holds instance data, such as the end of an echo filter operation, this flag will cause the stream to start returning this remaining data with optional source data. This flag can be specified with the ACM_STREAMCONVERTF_START flag.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.ConvertFlags.End">
      <summary>
            ACM conversion stream should reinitialize its instance data. For example, if a conversion stream holds instance data, such as delta or predictor information, this flag will restore the stream to starting defaults. This flag can be specified with the ACM_STREAMCONVERTF_END flag.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.DriverDetails">
      <summary>
            Interop structure for ACM driver details (ACMDRIVERDETAILS)
            http://msdn.microsoft.com/en-us/library/dd742889(v=VS.85).aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.cbSize">
      <summary>
            Size, in bytes, of the valid information contained in the ACMDRIVERDETAILS structure. An application should initialize this member to the size, in bytes, of the desired information. The size specified in this member must be large enough to contain the cbStruct member of the ACMDRIVERDETAILS structure. When the acmDriverDetails function returns, this member contains the actual size of the information returned. The returned information will never exceed the requested size.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.fccType">
      <summary>
            Type of the driver. For ACM drivers, set this member to ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.fccComp">
      <summary>
            Subtype of the driver. This member is currently set to ACMDRIVERDETAILS_FCCCOMP_UNDEFINED (zero).
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.manufacturerId">
      <summary>
            Manufacturer identifier. Manufacturer identifiers are defined in Manufacturer and Product Identifiers.
            http://msdn.microsoft.com/en-us/library/dd757146(v=VS.85).aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.productId">
      <summary>
            Product identifier. Product identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.ACMVersion">
      <summary>
            Version of the ACM for which this driver was compiled. The version number is a hexadecimal number in the format 0xAABBCCCC, where AA is the major version number, BB is the minor version number, and CCCC is the build number. The version parts (major, minor, and build) should be displayed as decimal numbers.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.driverVersion">
      <summary>
            Version of the driver. The version number is a hexadecimal number in the format 0xAABBCCCC, where AA is the major version number, BB is the minor version number, and CCCC is the build number. The version parts (major, minor, and build) should be displayed as decimal numbers
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.supportFlags">
      <summary>
            Support flags for the driver. The following values are defined:
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.formatTagsCount">
      <summary>
            Number of unique format tags supported by this driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.filterTagsCount">
      <summary>
            Number of unique filter tags supported by this driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.hicon">
      <summary>
            Handle to a custom icon for this driver. An application can use this icon for referencing the driver visually. This member can be NULL.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.shortName">
      <summary>
            Null-terminated string that describes the name of the driver. This string is intended to be displayed in small spaces.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.longName">
      <summary>
            Null-terminated string that describes the full name of the driver. This string is intended to be displayed in large (descriptive) spaces.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.copyright">
      <summary>
            Null-terminated string that provides copyright information for the driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.licensing">
      <summary>
            Null-terminated string that provides special licensing information for the driver 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetails.features">
      <summary>
            Null-terminated string that provides special feature information for the driver.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags">
      <summary>
            Driver-support flags specific to the driver specified by hadid. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This parameter can be a combination of the following values.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Codec">
      <summary>ACMDRIVERDETAILS_SUPPORTF_CODEC - Codec</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Converter">
      <summary>ACMDRIVERDETAILS_SUPPORTF_CONVERTER - Converter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Filter">
      <summary>ACMDRIVERDETAILS_SUPPORTF_FILTER - Filter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Hardware">
      <summary>ACMDRIVERDETAILS_SUPPORTF_HARDWARE - Hardware</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Async">
      <summary>ACMDRIVERDETAILS_SUPPORTF_ASYNC - Async</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Local">
      <summary>ACMDRIVERDETAILS_SUPPORTF_LOCAL - Local</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverDetailsSupportFlags.Disabled">
      <summary>ACMDRIVERDETAILS_SUPPORTF_DISABLED - Disabled</summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.ACMDriverEnumCallback">
      <summary>
            The acmDriverEnumCallback function specifies a callback function used with the acmDriverEnum function. The acmDriverEnumCallback name is a placeholder for an application-defined function name.
            http://msdn.microsoft.com/en-us/library/dd742891(VS.85).aspx
            </summary>
      <param name="hACMDriverId">Handle to an ACM driver identifier.</param>
      <param name="instance">Application-defined value specified in acmDriverEnum.</param>
      <param name="flags">Driver-support flags specific to the driver specified by hadid. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This parameter can be a combination of the following values.</param>
      <returns>The callback function must return TRUE to continue enumeration or FALSE to stop enumeration.</returns>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.DriverEnumFlags">
      <summary>
            Flags for enumerating ACM drivers. The following values are defined.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverEnumFlags.NoLocal">
      <summary>
            Disabled ACM drivers should be included in the enumeration. Drivers can be disabled by the user through the Control Panel or by an application using the acmDriverPriority function. If a driver is disabled, the fdwSupport parameter to the callback function will have the ACMDRIVERDETAILS_SUPPORTF_DISABLED flag set.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.DriverEnumFlags.Disabled">
      <summary>
            Only global drivers should be included in the enumeration.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.FormatDetails">
      <summary>
            The ACMFORMATDETAILS structure details a waveform-audio format for a specific format tag for an ACM driver. 
            http://msdn.microsoft.com/en-us/library/dd742913(v=VS.85).aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.structSize">
      <summary>
            Size, in bytes, of the ACMFORMATDETAILS structure. This member must be initialized before an application calls the acmFormatDetails or acmFormatEnum function. The size specified by this member must be large enough to contain the base ACMFORMATDETAILS structure. When the acmFormatDetails function returns, this member contains the actual size of the information returned. The returned information will never exceed the requested size.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.formatIndex">
      <summary>
            Index of the format to retrieve details for. The index ranges from zero to one less than the number of standard formats supported by an ACM driver for a format tag. The number of standard formats supported by a driver for a format tag is contained in the cStandardFormats member of the ACMFORMATTAGDETAILS structure. The dwFormatIndex member is used only when an application queries standard format details about a driver by index; otherwise, this member should be zero. Also, this member will be set to zero by the ACM when an application queries for details on a format; in other words, this member is used only for input and is never returned by the ACM or an ACM driver. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.formatTag">
      <summary>
            Waveform-audio format tag that the ACMFORMATDETAILS structure describes. This member is used for input for the ACM_FORMATDETAILSF_INDEX query flag. For the ACM_FORMATDETAILSF_FORMAT query flag, this member must be initialized to the same format tag as the pwfx member specifies. If a call to the acmFormatDetails function is successful, this member is always returned. This member should be set to WAVE_FORMAT_UNKNOWN for all other query flags.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.supportFlags">
      <summary>
            Driver-support flags specific to the specified format. These flags are identical to the fdwSupport flags of the ACMDRIVERDETAILS structure. This member can be a combination of the following values and indicates which operations the driver supports for the format tag: 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.waveFormatPointer">
      <summary>
            Pointer to a WAVEFORMATEX structure that will receive the format details. This structure requires no initialization by the application unless the ACM_FORMATDETAILSF_FORMAT flag is specified in the acmFormatDetails function. In this case, the wFormatTag member of the WAVEFORMATEX structure must be equal to the dwFormatTag of the ACMFORMATDETAILS structure.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.waveFormatByteSize">
      <summary>
            Size, in bytes, available for pwfx to receive the format details. The acmMetrics and acmFormatTagDetails functions can be used to determine the maximum size required for any format available for the specified driver (or for all installed ACM drivers). 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatDetails.formatDescription">
      <summary>
            String that describes the format for the dwFormatTag type. If the acmFormatDetails function is successful, this string is always returned.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags">
      <summary>
            Format Enumeration Flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Convert">
      <summary>
            ACM_FORMATENUMF_CONVERT
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will only enumerate destination formats that can be converted from the given pwfx format. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Hardware">
      <summary>
            ACM_FORMATENUMF_HARDWARE
            The enumerator should only enumerate formats that are supported as native input or output formats on one or more of the installed waveform-audio devices. This flag provides a way for an application to choose only formats native to an installed waveform-audio device. This flag must be used with one or both of the ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT flags. Specifying both ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT will enumerate only formats that can be opened for input or output. This is true regardless of whether this flag is specified. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Input">
      <summary>
            ACM_FORMATENUMF_INPUT
            Enumerator should enumerate only formats that are supported for input (recording). 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Channels">
      <summary>
            ACM_FORMATENUMF_NCHANNELS 
            The nChannels member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.SamplesPerSecond">
      <summary>
            ACM_FORMATENUMF_NSAMPLESPERSEC
            The nSamplesPerSec member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Output">
      <summary>
            ACM_FORMATENUMF_OUTPUT 
            Enumerator should enumerate only formats that are supported for output (playback). 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.Suggest">
      <summary>
            ACM_FORMATENUMF_SUGGEST
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate all suggested destination formats for the given pwfx format. This mechanism can be used instead of the ACMFormatSuggest function to allow an application to choose the best suggested format for conversion. The dwFormatIndex member will always be set to zero on return. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.BitsPerSample">
      <summary>
            ACM_FORMATENUMF_WBITSPERSAMPLE
            The wBitsPerSample member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatEnumFlags.FormatTag">
      <summary>
            ACM_FORMATENUMF_WFORMATTAG
            The wFormatTag member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. The dwFormatTag member of the ACMFORMATDETAILS structure must be equal to the wFormatTag member. 
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags.FormatTag">
      <summary>
            ACM_FORMATSUGGESTF_WFORMATTAG
            The wFormatTag member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wFormatTag or fail.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags.Channels">
      <summary>
            ACM_FORMATSUGGESTF_NCHANNELS
            The nChannels member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching nChannels or fail.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags.SamplesPerSecond">
      <summary>
            ACM_FORMATSUGGESTF_NSAMPLESPERSEC
            The wBitsPerSample member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wBitsPerSample or fail.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags.BitsPerSample">
      <summary>
            ACM_FORMATSUGGESTF_WBITSPERSAMPLE
            The wBitsPerSample member of the structure pointed to by pwfxDst is valid. The ACM will query acceptable installed drivers that can suggest a destination format matching wBitsPerSample or fail.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags.TypeMask">
      <summary>
            ACM_FORMATSUGGESTF_TYPEMASK
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.structureSize">
      <summary>
            DWORD cbStruct; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.formatTagIndex">
      <summary>
            DWORD dwFormatTagIndex; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.formatTag">
      <summary>
            DWORD dwFormatTag; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.formatSize">
      <summary>
            DWORD cbFormatSize; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.supportFlags">
      <summary>
            DWORD fdwSupport;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.standardFormatsCount">
      <summary>
            DWORD cStandardFormats; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.FormatTagDetails.formatDescription">
      <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.ACMFormatTagEnumCallback">
      <summary>
            http://www.opennetcf.com/library/sdf/html/9790b4f8-24ef-3376-4e9e-31e5cd77f722.htm
            </summary>
      <param name="hACMDriverId">
      </param>
      <param name="formatTagDetails">
      </param>
      <param name="dwInstance">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.ACMInterop">
      <summary>
            Interop definitions for Windows ACM (Audio Compression Manager) API
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMDriverClose(System.IntPtr,System.Int32)">
      <summary>
            The acmDriverClose function closes a previously opened ACM driver instance. If the function is successful, the handle is invalidated.
            More information: http://msdn.microsoft.com/en-us/library/dd742886%28VS.85%29.aspx
            </summary>
      <param name="hACMDriver">Handle to the open driver instance to be closed.</param>
      <param name="closeFlags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMDriverEnum(Ozeki.Media.Audio.Core.ACM.ACMDriverEnumCallback,System.Int32,Ozeki.Media.Audio.Core.ACM.DriverEnumFlags)">
      <summary>
            The acmDriverEnum function enumerates the available ACM drivers, continuing until there are no more drivers or the callback function returns FALSE.
            More information: http://msdn.microsoft.com/en-us/library/dd742890%28VS.85%29.aspx
            </summary>
      <param name="fnCallback">Procedure instance address of the application-defined callback function.</param>
      <param name="dwInstance">A 64-bit (DWORD_PTR) or 32-bit (DWORD) application-defined value that is passed to the callback function along with ACM driver information.</param>
      <param name="flags">Flags for enumerating ACM drivers. The following values are defined.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMDriverDetails(System.Int32,Ozeki.Media.Audio.Core.ACM.DriverDetails@,System.Int32)">
      <summary>
            The acmDriverDetails function queries a specified ACM driver to determine its capabilities.
            More information: http://msdn.microsoft.com/en-us/library/dd742887%28VS.85%29.aspx
            </summary>
      <param name="hACMDriver">The driver identifier of an installed ACM driver. Disabled drivers can be queried for details.</param>
      <param name="driverDetails">Pointer to an DriverDetails structure that will receive the driver details. The cbStruct member must be initialized to the size, in bytes, of the structure.</param>
      <param name="reserved">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMDriverOpen(System.IntPtr@,System.Int32,System.Int32)">
      <summary>
            The acmDriverOpen function opens the specified ACM driver and returns a driver instance handle that can be used to communicate with the driver.
            More information: http://msdn.microsoft.com/en-us/library/dd742894%28VS.85%29.aspx
            </summary>
      <param name="pACMDriver">Pointer to a buffer that receives the new driver instance handle that can be used to communicate with the driver.</param>
      <param name="hACMDriverId">Handle to the driver identifier of an installed and enabled ACM driver.</param>
      <param name="openFlags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMFormatEnum(System.IntPtr,Ozeki.Media.Audio.Core.ACM.FormatDetails@,Ozeki.Media.Audio.Core.ACM.ACMFormatEnumCallback,System.IntPtr,Ozeki.Media.Audio.Core.ACM.FormatEnumFlags)">
      <summary>
            The acmFormatEnum function enumerates waveform-audio formats available for a given format tag from an ACM driver. This function continues enumerating until there are no more suitable formats for the format tag or the callback function returns FALSE.
            More information: http://msdn.microsoft.com/en-us/library/dd742914%28VS.85%29.aspx
            </summary>
      <param name="hACMDriver">Handle to the ACM driver to query for waveform-audio format details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.</param>
      <param name="formatDetails">Pointer to an FormatDetails structure to contain the format details passed to the fnCallback function. This structure must have the cbStruct, pwfx, and cbwfx members of the FormatDetails structure initialized. The dwFormatTag member must also be initialized to either WAVE_FORMAT_UNKNOWN or a valid format tag. The fdwSupport member of the structure must be initialized to zero. To find the required size of the pwfx buffer, call acmMetrics with the ACM_METRIC_MAX_SIZE_FORMAT flag.</param>
      <param name="callback">Address of an application-defined callback function. See acmFormatEnumCallback. This parameter cannot be NULL.</param>
      <param name="instance">
      </param>
      <param name="flags">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMFormatSuggest(System.IntPtr,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32,Ozeki.Media.Audio.Core.ACM.FormatSuggestFlags)">
      <summary>
            The acmFormatSuggest function queries the ACM or a specified ACM driver to suggest a destination format for the supplied source format. For example, an application can use this function to determine one or more valid PCM formats to which a compressed format can be decompressed.
            More information: http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            </summary>
      <param name="hACMDriver">Handle to an open instance of a driver to query for a suggested destination format. If this parameter is NULL, the ACM attempts to find the best driver to suggest a destination format.</param>
      <param name="sourceFormat">Pointer to a WAVEFORMATEX structure that identifies the source format for which a destination format will be suggested by the ACM or specified driver.</param>
      <param name="destinationFormat">Pointer to a WAVEFORMATEX structure that will receive the suggested destination format for the pwfxSrc format. Depending on the fdwSuggest parameter, some members of the structure pointed to by pwfxDst may require initialization.</param>
      <param name="sizeDestFormat">Size, in bytes, available for the destination format. The acmMetrics and acmFormatTagDetails functions can be used to determine the maximum size required for any format available for the specified driver (or for all installed ACM drivers).</param>
      <param name="suggestFlags">Flags for matching the desired destination format. The following values are defined.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMFormatTagEnum(System.IntPtr,Ozeki.Media.Audio.Core.ACM.FormatTagDetails@,Ozeki.Media.Audio.Core.ACM.ACMFormatTagEnumCallback,System.IntPtr,System.Int32)">
      <summary>
            The acmFormatEnum function enumerates waveform-audio formats available for a given format tag from an ACM driver. This function continues enumerating until there are no more suitable formats for the format tag or the callback function returns FALSE.
            More Information: http://msdn.microsoft.com/en-us/library/dd742914%28VS.85%29.aspx
            </summary>
      <param name="hACMDriver">Handle to the ACM driver to query for waveform-audio format details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.</param>
      <param name="formatTagDetails">Pointer to an ACMFORMATDETAILS structure to contain the format details passed to the fnCallback function. This structure must have the cbStruct, pwfx, and cbwfx members of the ACMFORMATDETAILS structure initialized. The dwFormatTag member must also be initialized to either WAVE_FORMAT_UNKNOWN or a valid format tag. The fdwSupport member of the structure must be initialized to zero. To find the required size of the pwfx buffer, call acmMetrics with the ACM_METRIC_MAX_SIZE_FORMAT flag.</param>
      <param name="callback">Address of an application-defined callback function. See acmFormatEnumCallback. This parameter cannot be NULL.</param>
      <param name="instance">A 64-bit (DWORD_PTR) or 32-bit (DWORD) application-defined value that is passed to the callback function along with ACM format details.</param>
      <param name="reserved">Flags for enumerating the formats for a given format tag. The following values are defined.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMMetics(System.IntPtr,Ozeki.Media.Audio.Core.ACM.Metrics,System.Int32@)">
      <summary>
            The acmMetrics function returns various metrics for the ACM or related ACM objects.
            More information: http://msdn.microsoft.com/en-us/library/dd742922%28VS.85%29.aspx
            </summary>
      <param name="hACMObject">Handle to the ACM object to query for the metric specified in uMetric. For some queries, this parameter can be NULL.</param>
      <param name="metric">Metric index to be returned in pMetric.</param>
      <param name="output">Buffer to receive the metric details. The exact definition depends on the uMetric index.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamClose(System.IntPtr,System.Int32)">
      <summary>
            The acmStreamClose function closes an ACM conversion stream. If the function is successful, the handle is invalidated.
            More inforamtion: http://msdn.microsoft.com/en-us/library/dd742923(VS.85).aspx
            </summary>
      <param name="hACMStream">Handle to the open conversion stream to be closed.</param>
      <param name="closeFlags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamConvert(System.IntPtr,Ozeki.Media.Audio.Core.ACM.StreamHeaderStruct@,Ozeki.Media.Audio.Core.ACM.ConvertFlags)">
      <summary>
            The acmStreamConvert function requests the ACM to perform a conversion on the specified conversion stream. A conversion may be synchronous or asynchronous, depending on how the stream was opened.
            More information: http://msdn.microsoft.com/en-us/library/dd742924%28VS.85%29.aspx
            </summary>
      <param name="hACMStream">Handle to the open conversion stream.</param>
      <param name="streamHeader">Pointer to a stream header that describes source and destination buffers for a conversion. This header must have been prepared previously by using the acmStreamPrepareHeader function.</param>
      <param name="streamConvertFlags">Flags for doing the conversion. The following values are defined.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamPrepareHeader(System.IntPtr,Ozeki.Media.Audio.Core.ACM.StreamHeaderStruct@,System.Int32)">
      <summary>
            The acmStreamPrepareHeader function prepares an ACMSTREAMHEADER structure for an ACM stream conversion. This function must be called for every stream header before it can be used in a conversion stream. An application needs to prepare a stream header only once for the life of a given stream. The stream header can be reused as long as the sizes of the source and destination buffers do not exceed the sizes used when the stream header was originally prepared.
            More information: http://msdn.microsoft.com/en-us/library/dd742929(VS.85).aspx
            </summary>
      <param name="hACMStream">Handle to the conversion steam.</param>
      <param name="streamHeader">Pointer to an StreamHeader structure that identifies the source and destination buffers to be prepared.</param>
      <param name="prepareFlags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamReset(System.IntPtr,System.Int32)">
      <summary>
            The acmStreamReset function stops conversions for a given ACM stream. All pending buffers are marked as done and returned to the application.
            More information: http://msdn.microsoft.com/en-us/library/dd742930(VS.85).aspx
            </summary>
      <param name="hACMStream">Handle to the conversion stream.</param>
      <param name="resetFlags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamSize(System.IntPtr,System.Int32,System.Int32@,Ozeki.Media.Audio.Core.ACM.StreamSizeFlags)">
      <summary>
            The acmStreamSize function returns a recommended size for a source or destination buffer on an ACM stream.
            More information: http://msdn.microsoft.com/en-us/library/dd742931(VS.85).aspx
            </summary>
      <param name="hACMStream">Handle to the conversion stream.</param>
      <param name="inputBufferSize">Size, in bytes, of the source or destination buffer. The fdwSize flags specify what the input parameter defines. This parameter must be nonzero.</param>
      <param name="outputBufferSize">Pointer to a variable that contains the size, in bytes, of the source or destination buffer. The fdwSize flags specify what the output parameter defines. If the acmStreamSize function succeeds, this location will always be filled with a nonzero value.</param>
      <param name="flags">Flags for the stream size query. The following values are defined:</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamUnprepareHeader(System.IntPtr,Ozeki.Media.Audio.Core.ACM.StreamHeaderStruct@,System.Int32)">
      <summary>
            The acmStreamUnprepareHeader function cleans up the preparation performed by the acmStreamPrepareHeader function for an ACM stream. This function must be called after the ACM is finished with the given buffers. An application must call this function before freeing the source and destination buffers.
            More information: http://msdn.microsoft.com/en-us/library/dd742932(VS.85).aspx
            </summary>
      <param name="hACMStream">Handle to the conversion steam.</param>
      <param name="streamHeader">Pointer to an StreamHeader structure that identifies the source and destination buffers to be unprepared.</param>
      <param name="flags">Reserved; must be zero.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Core.ACM.ACMInterop.ACMStreamOpen(System.IntPtr@,System.IntPtr,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Core.ACM.WaveFilter,System.Int32,System.Int32,Ozeki.Media.Audio.Core.ACM.StreamOpenFlags)">
      <summary>
            The acmStreamOpen function opens an ACM conversion stream. Conversion streams are used to convert data from one specified audio format to another.
            More inforamtion: http://msdn.microsoft.com/en-us/library/dd742928%28VS.85%29.aspx
            </summary>
      <param name="hACMStream">Pointer to a handle that will receive the new stream handle that can be used to perform conversions. This handle is used to identify the stream in calls to other ACM stream conversion functions. If the ACM_STREAMOPENF_QUERY flag is specified, this parameter should be NULL.</param>
      <param name="hACMDriver">Handle to an ACM driver. If this handle is specified, it identifies a specific driver to be used for a conversion stream. If this parameter is NULL, all suitable installed ACM drivers are queried until a match is found.</param>
      <param name="sourceFormat">Pointer to a WAVEFORMATEX structure that identifies the desired source format for the conversion.</param>
      <param name="destFormat">Pointer to a WAVEFORMATEX structure that identifies the desired destination format for the conversion.</param>
      <param name="waveFilter">Pointer to a WAVEFILTER structure that identifies the desired filtering operation to perform on the conversion stream. If no filtering operation is desired, this parameter can be NULL. If a filter is specified, the source (pwfxSrc) and destination (pwfxDst) formats must be the same.</param>
      <param name="callback">Pointer to a callback function, a handle of a window, or a handle of an event. A callback function will be called only if the conversion stream is opened with the ACM_STREAMOPENF_ASYNC flag. A callback function is notified when the conversion stream is opened or closed and after each buffer is converted. If the conversion stream is opened without the ACM_STREAMOPENF_ASYNC flag, this parameter should be set to zero.</param>
      <param name="instance">User-instance data passed to the callback function specified by the dwCallback parameter. This parameter is not used with window and event callbacks. If the conversion stream is opened without the ACM_STREAMOPENF_ASYNC flag, this parameter should be set to zero.</param>
      <param name="openFlags">Flags for opening the conversion stream. The following values are defined.</param>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.Metrics">
      <summary>
            Metric index to be returned in pMetric.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountDrivers">
      <summary>
            ACM_METRIC_COUNT_DRIVERS
            Returned value is the total number of enabled global ACM drivers (of all support types) in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountCodecs">
      <summary>Returned value is the number of global ACM compressor or decompressor drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountConverters">
      <summary>
            ACM_METRIC_COUNT_CONVERTERS
            Returned value is the number of global ACM converter drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountFilters">
      <summary>
            ACM_METRIC_COUNT_FILTERS
            Returned value is the number of global ACM filter drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountDisabled">
      <summary>
            ACM_METRIC_COUNT_DISABLED
            Returned value is the total number of global disabled ACM drivers (of all support types) in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value. The sum of the ACM_METRIC_COUNT_DRIVERS and ACM_METRIC_COUNT_DISABLED metric indices is the total number of globally installed ACM drivers.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountHardware">
      <summary>
            ACM_METRIC_COUNT_HARDWARE
            Returned value is the number of global ACM hardware drivers in the system. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountLocalDrivers">
      <summary>
            ACM_METRIC_COUNT_LOCAL_DRIVERS
            Returned value is the total number of enabled local ACM drivers (of all support types) for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountLocalCodecs">
      <summary>
            ACM_METRIC_COUNT_LOCAL_CODECS
            Returned value is the number of local ACM compressor drivers, ACM decompressor drivers, or both for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountLocalConverters">
      <summary>
            ACM_METRIC_COUNT_LOCAL_CONVERTERS
            Returned value is the number of local ACM converter drivers for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountLocalFilters">
      <summary>
            ACM_METRIC_COUNT_LOCAL_FILTERS
            Returned value is the number of local ACM filter drivers for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.CountLocalDisabled">
      <summary>
            ACM_METRIC_COUNT_LOCAL_DISABLED
            Returned value is the total number of local disabled ACM drivers, of all support types, for the calling task. The hao parameter must be NULL for this metric index. The pMetric parameter must point to a buffer of a size equal to a DWORD value. The sum of the ACM_METRIC_COUNT_LOCAL_DRIVERS and ACM_METRIC_COUNT_LOCAL_DISABLED metric indices is the total number of locally installed ACM drivers.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.HardwareWaveInput">
      <summary>
            ACM_METRIC_HARDWARE_WAVE_INPUT
            Returned value is the waveform-audio input device identifier associated with the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type that supports the ACMDRIVERDETAILS_SUPPORTF_HARDWARE flag. If no waveform-audio input device is associated with the driver, MMSYSERR_NOTSUPPORTED is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.HardwareWaveOutput">
      <summary>
            ACM_METRIC_HARDWARE_WAVE_OUTPUT
            Returned value is the waveform-audio output device identifier associated with the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type that supports the ACMDRIVERDETAILS_SUPPORTF_HARDWARE flag. If no waveform-audio output device is associated with the driver, MMSYSERR_NOTSUPPORTED is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.MaxSizeFormat">
      <summary>
            ACM_METRIC_MAX_SIZE_FORMAT
            Returned value is the size of the largest WAVEFORMATEX structure. If hao is NULL, the return value is the largest WAVEFORMATEX structure in the system. If hao identifies an open instance of an ACM driver of the HACMDRIVER data type or an ACM driver identifier of the HACMDRIVERID data type, the largest WAVEFORMATEX structure for that driver is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value. This metric is not allowed for an ACM stream handle of the HACMSTREAM data type.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.MaxSizeFilter">
      <summary>
            ACM_METRIC_MAX_SIZE_FILTER
            Returned value is the size of the largest WAVEFILTER structure. If hao is NULL, the return value is the largest WAVEFILTER structure in the system. If hao identifies an open instance of an ACM driver of the HACMDRIVER data type or an ACM driver identifier of the HACMDRIVERID data type, the largest WAVEFILTER structure for that driver is returned. The pMetric parameter must point to a buffer of a size equal to a DWORD value. This metric is not allowed for an ACM stream handle of the HACMSTREAM data type.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.DriverSupport">
      <summary>
            ACM_METRIC_DRIVER_SUPPORT
            Returned value is the fdwSupport flags for the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.Metrics.DriverPriority">
      <summary>
            ACM_METRIC_DRIVER_PRIORITY
            Returned value is the current priority for the specified driver. The hao parameter must be a valid ACM driver identifier of the HACMDRIVERID data type. The pMetric parameter must point to a buffer of a size equal to a DWORD value.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.StreamHeaderStatusFlags">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742926(v=VS.85).aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamHeaderStatusFlags.Done">
      <summary>
            ACMSTREAMHEADER_STATUSF_DONE
            Set by the ACM or driver to indicate that it is finished with the conversion and is returning the buffers to the application.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamHeaderStatusFlags.Prepared">
      <summary>
            ACMSTREAMHEADER_STATUSF_PREPARED
            Set by the ACM or driver to indicate that the buffers are queued for conversion.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamHeaderStatusFlags.InQueue">
      <summary>
            ACMSTREAMHEADER_STATUSF_INQUEUE
            Set by the ACM to indicate that the buffers have been prepared by using the acmStreamPrepareHeader function.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.StreamHeaderStruct">
      <summary>
            Interop structure for ACM stream headers.
            http://msdn.microsoft.com/en-us/library/dd742926(v=VS.85).aspx
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags">
      <summary>
            Flags for opening the conversion stream. The following values are defined.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.Query">
      <summary>
            ACM_STREAMOPENF_QUERY, ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag.
            ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.Async">
      <summary>
            ACM_STREAMOPENF_ASYNC, Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag.
            ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.NonRealTime">
      <summary>
            ACM_STREAMOPENF_NONREALTIME, ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackTypeMask">
      <summary>
            CALLBACK_TYPEMASK, callback type mask
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackNull">
      <summary>
            CALLBACK_NULL, no callback
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackWindow">
      <summary>
            CALLBACK_WINDOW, dwCallback is a HWND
            The dwCallback parameter is a window handle.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackTask">
      <summary>
            CALLBACK_TASK, dwCallback is a HTASK
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackFunction">
      <summary>
            CALLBACK_FUNCTION, dwCallback is a FARPROC
            The dwCallback parameter is a callback procedure address. The function prototype must conform to the acmStreamConvertCallback prototype.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackThread">
      <summary>
            CALLBACK_THREAD, thread ID replaces 16 bit task
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamOpenFlags.CallbackEvent">
      <summary>
            CALLBACK_EVENT, dwCallback is an EVENT Handle
            The dwCallback parameter is a handle of an event.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.StreamSizeFlags">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742931(VS.85).aspx
            Flags for the stream size query. The following values are defined:
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamSizeFlags.Source">
      <summary>
            ACM_STREAMSIZEF_SOURCE
            The cbInput parameter contains the size of the destination buffer. The pdwOutputBytes parameter will receive the recommended source buffer size, in bytes.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.StreamSizeFlags.Destination">
      <summary>
            ACM_STREAMSIZEF_DESTINATION
            The cbInput parameter contains the size of the source buffer. The pdwOutputBytes parameter will receive the recommended destination buffer size, in bytes.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Core.ACM.WaveFilter">
      <summary>
            Summary description for WaveFilter.
            http://msdn.microsoft.com/en-us/library/dd757711(v=VS.85).aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.WaveFilter.StructureSize">
      <summary>
            cbStruct
            Size, in bytes, of the WAVEFILTER structure. The size specified in this member must be large enough to contain the base WAVEFILTER structure.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.WaveFilter.FilterTag">
      <summary>
            dwFilterTag
            Waveform-audio filter type. Filter tags are registered with Microsoft Corporation for various filter algorithms.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.WaveFilter.Filter">
      <summary>
            fdwFilter
            Flags for the dwFilterTag member. The flags defined for this member are universal to all filters. Currently, no flags are defined.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Core.ACM.WaveFilter.Reserved">
      <summary>
            reserved
            Reserved for system use; should not be examined or modified by an application.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.DeviceInfo">
      <summary>
            Contains information about an audio device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.DeviceInfo.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>The string representation of the current DeviceInfo object</returns>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.DeviceID">
      <summary>
            Gets the device ID
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.Manufacturer">
      <summary>
            Gets the manufacturer for the device driver.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.ProductID">
      <summary>
            Gets the product identifier.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.DriverVersion">
      <summary>
            Gets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.ProductName">
      <summary>
            Gets the product name in a null-terminated string.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.Channels">
      <summary>
            Gets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.Type">
      <summary>
            Gets the type of the device
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.DeviceInfo.SupportedWaveFormats">
      <summary>
            Gets or sets the standard formats that are supported.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.DtmfGenerator">
      <summary>
            Can generate DTMF tones.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.DtmfGenerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.DtmfGenerator" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.DtmfGenerator.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.DtmfGenerator" /> class.
            </summary>
      <param name="waveFormat">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.DtmfGenerator.StartGeneratingDtmf(System.Int32)">
      <summary>
            Starts generating the given DTMF signal. If the generator is already active then does nothing.
            </summary>
      <param name="signal">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.DtmfGenerator.StopGeneratingDtmf">
      <summary>
            Stops generating the current DTMF signal.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.DtmfGenerator.GenerateDtmf">
      <summary>
            Generates the DTMF signal.
            </summary>
      <returns>The generated DTMF signal as an array of bytes.</returns>
    </member>
    <member name="T:Ozeki.Media.Audio.DeviceType">
      <summary>
            Specifies the types of the audio devices
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.DeviceType.Playback">
      <summary>
            Playback audio device
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.DeviceType.Recording">
      <summary>
            Recording audio device
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.PlaybackState">
      <summary>
            Specifies the states of a playback.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.PlaybackState.Playing">
      <summary>
            Playback is playing. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.PlaybackState.Paused">
      <summary>
            Playback is paused.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.PlaybackState.Stopped">
      <summary>
            Playback is stopped.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.CaptureState">
      <summary>
            Specifies the states of a capture.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.CaptureState.Recording">
      <summary>
            Capturing is active.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.CaptureState.Paused">
      <summary>
            Capturing is paused.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.CaptureState.Stopped">
      <summary>
            Capturing is stopped.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.ChannelMode">
      <summary>
            Channel Mode
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.ChannelMode.Stereo">
      <summary>
            Stereo
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.ChannelMode.JointStereo">
      <summary>
            Joint Stereo
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.ChannelMode.DualChannel">
      <summary>
            Dual Channel
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.ChannelMode.Mono">
      <summary>
            Mono
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Mp3WaveFormatFlags">
      <summary>
            Wave Format Padding Flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatFlags.PaddingIso">
      <summary>
            MPEGLAYER3_FLAG_PADDING_ISO
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatFlags.PaddingOn">
      <summary>
            MPEGLAYER3_FLAG_PADDING_ON
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatFlags.PaddingOff">
      <summary>
            MPEGLAYER3_FLAG_PADDING_OFF
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Mp3WaveFormatId">
      <summary>
            Wave Format ID
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatId.Unknown">
      <summary>MPEGLAYER3_ID_UNKNOWN</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatId.Mpeg">
      <summary>MPEGLAYER3_ID_MPEG</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.Mp3WaveFormatId.ConstantFrameSize">
      <summary>MPEGLAYER3_ID_CONSTANTFRAMESIZE</summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.MpegLayer">
      <summary>
            MPEG Layer flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegLayer.Reserved">
      <summary>
            Reserved
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegLayer.Layer3">
      <summary>
            Layer 3
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegLayer.Layer2">
      <summary>
            Layer 2
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegLayer.Layer1">
      <summary>
            Layer 1
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.MpegVersion">
      <summary>
            MPEG Version Flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegVersion.Version25">
      <summary>
            Version 2.5
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegVersion.Reserved">
      <summary>
            Reserved
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegVersion.Version2">
      <summary>
            Version 2
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MpegVersion.Version1">
      <summary>
            Version 1
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.VADDetector.#ctor">
      <summary>
            Supported pcm format
            Frequency: 8000 khz
            BitsPerSample: 16 bit
            Channel: 1 channel
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.VADDetector.DetectVoice(System.Byte[])">
      <summary>
            PCM data length must be equal 160
            </summary>
      <param name="pcmData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.VADDetector.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.CallbackStrategies.EventCallbackStrategy">
      <summary>
            Event alapu callback.
            </summary>
      <remarks>
            ResetEvent.WaitOne() addig, amig nem jon uzenet, amikor is ResetEvent.Set()-re feldolgozza az adatot.
            Ezzel kicsit rosszabb minosegu volt a hang, fokent ha nagyon kattingatnak a GUI-n.
            </remarks>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.CallbackStrategies.FunctionCallbackStrategy">
      <summary>
            Function alapu callback.
            </summary>
      <remarks>
            Ha egy aktiv eszkoz lehal, vagy USB eseten kihuzzak, akkor nativ oldali deadlock-ot eredmenyez.
            </remarks>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.CallbackStrategies.NewWindowCallbackStrategy">
      <summary>
            Virtualis WinForms ablakos callback.
            </summary>
      <remarks>
            A Form-on jon fel az audio message (WndProc), ami majd tovabbitja az eszkoznek (pl. WaveOutPlayer).
            Ha nincs GUI / nem GUI szalon inditjuk el az eszkozt, akkor nem fog hallatszani semmi,  mivel a Form-on nem indul el a message loop.
            </remarks>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.CallbackStrategies.NewWindowCallbackStrategyThreaded">
      <summary>
            Window based callback, kulon szalat indit a window message loop-nak
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase">
      <summary>
            Provides an interface for capturing audio data.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase" /> class.
            </summary>
      <param name="waveFormat">The capturing wave format.</param>
      <param name="deviceID">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.#ctor(Ozeki.Media.Audio.DeviceInfo,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase" /> class.
            </summary>
      <param name="deviceInfo">
      </param>
      <param name="waveFormat">The capturing wave format.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Start">
      <summary>
            Starts the recording.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Stop">
      <summary>
            Stops the recording.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.ChangeFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Changes the wave format of the device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.LogDebug(System.String)">
      <summary>
            Helyi debuggolasra szant metodus. Olyanokra hasznaljuk foleg, hogy pl. ne hivjunk meg valamit ketszer.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Dispose(System.Boolean)">
      <summary>
            Closes the <see cref="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase" /> and disposes the buffers.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Dispose">
      <summary>
            Closes the <see cref="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase" />.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Finalize">
      <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see></summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.DeviceInfo">
      <summary>
            Gets some information about the device such as device ID or product name.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.State">
      <summary>
            Gets the state of the recording.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Initialized">
      <summary>
            Gets a boolean value indicating whether the device is initialized and ready to use.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Volume">
      <summary>
            Gets or sets the volume of the recorder. (Range: 0-1)
            If the value is -1, the volume of the selected device is fixed and cannot be changed.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Level">
      <summary>
            Gets the level of the input data. (Range: 0-100)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBase.Muted">
      <summary>
            Gets or sets a boolean value indicating whether the audio device is muted.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDeviceHelper.GetDevices">
      <summary>
            Retrieves the available recording devices.
            </summary>
      <returns>The list containing the devices.</returns>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDeviceHelper.NumberOfDevices">
      <summary>
            Gets the number of the available recording devices.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase">
      <summary>
            Provides an interface for audio data playback.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32)">
      <summary>
            Creates a new <see cref="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase" /> with the specified WaveFormat.
            </summary>
      <param name="waveFormat">The given wave format.</param>
      <param name="deviceID">The identifier of the device.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.#ctor(Ozeki.Media.Audio.DeviceInfo,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Creates a new <see cref="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase" /> with the specified WaveFormat.
            </summary>
      <param name="deviceInfo">
      </param>
      <param name="waveFormat">The given wave format.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Init">
      <summary>
            Initializes the <see cref="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase" /></summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Start">
      <summary>
            Starts the playback. If the playback has been paused then resumes it.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Pause">
      <summary>
            Pauses the playback
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Stop">
      <summary>
            Stops the playback
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Write(System.Byte[])">
      <summary>
            Writes PCM data to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
      <param name="data">The specified PCM data</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.ChangeFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Changes the format of the playback.
            </summary>
      <param name="waveFormat">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.LogDebug(System.String)">
      <summary>
            Helyi debuggolasra szant metodus. Olyanokra hasznaljuk foleg, hogy pl. ne hivjunk meg valamit ketszer.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Dispose">
      <summary>
            Closes the AudioPlayer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Dispose(System.Boolean)">
      <summary>
            Closes the AudioPlayer and disposes the buffers
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Finalize">
      <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see></summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.DeviceInfo">
      <summary>
            Gets some information about the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.PlaybackState">
      <summary>
            Gets the state of the playback.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Initialized">
      <summary>
            Returns a boolean value indicating whether the playback device is ready.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Volume">
      <summary>
            Gets or sets the volume of the playback. (Range: 0-1)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Level">
      <summary>
            Gets the level of the output data. (Range: 0-100)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Muted">
      <summary>
            Gets or sets a boolean value indicating whether the playback is muted.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.Stopped">
      <summary>
            Occurs when the playback has been stopped
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBase.LevelChanged">
      <summary>
            Occurs when the playback level has changed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutEventPlayer">
      <summary>
            Event callback based audio player.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutDeviceHelper.GetDevices">
      <summary>
            Retrieves the available playback devices.
            </summary>
      <returns>The list containing the devices.</returns>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutDeviceHelper.NumberOfDevices">
      <summary>
            Gets the number of the available playback devices.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAlgorithmType.Subband">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAlgorithmType.FullBand">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAlgorithmType.FastSubband">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.DSP.IppAecAdaptationMode">
      <summary>
            Defines values determining how fast will the echo canceller adopt.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAdaptationMode.Off">
      <summary>
            No adaptation.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAdaptationMode.Full">
      <summary>
            Full adaptation.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecAdaptationMode.Lite">
      <summary>
            Lite adaptation.
            </summary>
    </member>
    <member name="T:Ozeki.Media.DSP.IppAecNoiseReductionLevel">
      <summary>
            Noise mitigation level enumeration.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.NoReduction">
      <summary>
            No noise reduction will be made.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.Low">
      <summary>
            Low filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.Medium">
      <summary>
            Medium filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.Normal">
      <summary>
            Normal filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.High">
      <summary>
            High filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionLevel.Auto">
      <summary>
            Automatically detects the level of the noise reduction.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionSmoothing.NoSmoothing">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionSmoothing.Static">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.IppAecNoiseReductionSmoothing.Dynamic">
      <summary>
      </summary>
    </member>
    <member name="M:Ozeki.Media.DSP.EchoCanceller.Filters.IPPEchoFilter.Filter(System.Byte[],System.Byte[])">
      <summary>
            Performs echo cancellation.
            </summary>
      <param name="localFrame">Contains speech with echo.</param>
      <param name="remoteFrame">Contains echo.</param>
      <returns>Speech without echo.</returns>
    </member>
    <member name="M:Ozeki.Media.DSP.EchoCanceller.Filters.SpeexEchoFilter.Filter(System.Byte[],System.Byte[])">
      <summary>
            Performs echo cancellation.
            </summary>
      <param name="localFrame">Contains speech with echo.</param>
      <param name="remoteFrame">Contains echo.</param>
      <returns>Speech without echo.</returns>
    </member>
    <member name="T:Ozeki.Media.DSP.NoiseReductionLevel">
      <summary>
            Noise mitigation level enumeration.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.NoiseReductionLevel.NoReduction">
      <summary>
            No noise reduction will be made.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.NoiseReductionLevel.Low">
      <summary>
            Low filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.NoiseReductionLevel.Medium">
      <summary>
            Medium filtering.
            </summary>
    </member>
    <member name="F:Ozeki.Media.DSP.NoiseReductionLevel.High">
      <summary>
            High filtering.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.AudioMixer">
      <summary>
            Can mix audio from different sources.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.AudioMixer.disposed">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Mixer.AudioMixer" /> class.
            </summary>
      <param name="waveFormat">The format of the mixed data.</param>
      <param name="interval">The time between the mixing events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.AddSource(System.Int32)">
      <summary>
            Adds a new source to the mixing queue.
            </summary>
      <param name="uid">The unique identifier of the source.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.RemoveSource(System.Int32)">
      <summary>
            Removes an existing source from the mixing queue.
            </summary>
      <param name="uid">The unique identifier of the source.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.EnqueueData(System.Int32,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Byte[])">
      <summary>
            Adds audio data to the mixing queue.
            </summary>
      <param name="sourceId">The unique identifier of the source.</param>
      <param name="format">The format of the enqueued data.</param>
      <param name="data">The raw data.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.Dispose">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.AudioMixer.Finalize">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.AudioMixer.WaveFormat">
      <summary>
            Gets or sets the WaveFormat of the mixed audio.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Audio.Mixer.AudioMixer.DataMixed">
      <summary>
            Occurs when the <see cref="T:Ozeki.Media.Audio.Mixer.AudioMixer" /> has mixed some data.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.Handle">
      <summary>
            MIXER_OBJECTF_HANDLE 	= 0x80000000;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.Mixer">
      <summary>
            MIXER_OBJECTF_MIXER 	= 0x00000000;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.MixerHandle">
      <summary>
            MIXER_OBJECTF_HMIXER
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.WaveOut">
      <summary>
            MIXER_OBJECTF_WAVEOUT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.WaveOutHandle">
      <summary>
            MIXER_OBJECTF_HWAVEOUT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.WaveIn">
      <summary>
            MIXER_OBJECTF_WAVEIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.WaveInHandle">
      <summary>
            MIXER_OBJECTF_HWAVEIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.MidiOut">
      <summary>
            MIXER_OBJECTF_MIDIOUT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.MidiOutHandle">
      <summary>
            MIXER_OBJECTF_HMIDIOUT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.MidiIn">
      <summary>
            MIXER_OBJECTF_MIDIIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.MidiInHandle">
      <summary>
            MIXER_OBJECTF_HMIDIIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.Aux">
      <summary>
            MIXER_OBJECTF_AUX
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.Value">
      <summary>
            MIXER_GETCONTROLDETAILSF_VALUE      	= 0x00000000;
            MIXER_SETCONTROLDETAILSF_VALUE      	= 0x00000000;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.ListText">
      <summary>
            MIXER_GETCONTROLDETAILSF_LISTTEXT   	= 0x00000001;
            MIXER_SETCONTROLDETAILSF_LISTTEXT   	= 0x00000001;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.QueryMask">
      <summary>
            MIXER_GETCONTROLDETAILSF_QUERYMASK  	= 0x0000000F;
            MIXER_SETCONTROLDETAILSF_QUERYMASK  	= 0x0000000F;
            MIXER_GETLINECONTROLSF_QUERYMASK    	= 0x0000000F;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.All">
      <summary>
            MIXER_GETLINECONTROLSF_ALL          	= 0x00000000;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.OneById">
      <summary>
            MIXER_GETLINECONTROLSF_ONEBYID      	= 0x00000001;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.OneByType">
      <summary>
            MIXER_GETLINECONTROLSF_ONEBYTYPE    	= 0x00000002;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfDestination">
      <summary>
            MIXER_GETLINEINFOF_DESTINATION      	= 0x00000000;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfSource">
      <summary>
            MIXER_GETLINEINFOF_SOURCE           	= 0x00000001;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfLineId">
      <summary>
            MIXER_GETLINEINFOF_LINEID           	= 0x00000002;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfComponentType">
      <summary>
            MIXER_GETLINEINFOF_COMPONENTTYPE    	= 0x00000003;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfTargetType">
      <summary>
            MIXER_GETLINEINFOF_TARGETTYPE       	= 0x00000004;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags.GetLineInfoOfQueryMask">
      <summary>
            MIXER_GETLINEINFOF_QUERYMASK        	= 0x0000000F;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine_LineFlags.Active">
      <summary>
            Audio line is active. An active line indicates that a signal is probably passing through the line.
            (MIXERLINE_LINEF_ACTIVE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine_LineFlags.Disconnected">
      <summary>
            Audio line is disconnected. A disconnected line's associated controls can still be modified, but the changes have no effect until the line is connected.
            (MIXERLINE_LINEF_DISCONNECTED)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine_LineFlags.Source">
      <summary>
            Audio line is an audio source line associated with a single audio destination line. 
            If this flag is not set, this line is an audio destination line associated with zero or more audio source lines.
            (MIXERLINE_LINEF_SOURCE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationUndefined">
      <summary>
            Audio line is a destination that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_DST_UNDEFINED
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationDigital">
      <summary>
            Audio line is a digital destination (for example, digital input to a DAT or CD audio device).
            MIXERLINE_COMPONENTTYPE_DST_DIGITAL 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationLine">
      <summary>
            Audio line is a line level destination (for example, line level input from a CD audio device) that will be the final recording source for the analog-to-digital converter (ADC). Because most audio cards for personal computers provide some sort of gain for the recording audio source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_DST_WAVEIN type.
            MIXERLINE_COMPONENTTYPE_DST_LINE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationMonitor">
      <summary>
            Audio line is a destination used for a monitor.
            MIXERLINE_COMPONENTTYPE_DST_MONITOR
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationSpeakers">
      <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive speakers. This is the typical component type for the audio output of audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_SPEAKERS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationHeadphones">
      <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive headphones. Most audio cards use the same audio destination line for speakers and headphones, in which case the mixer device simply uses the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS type.
            MIXERLINE_COMPONENTTYPE_DST_HEADPHONES
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationTelephone">
      <summary>
            Audio line is a destination that will be routed to a telephone line.
            MIXERLINE_COMPONENTTYPE_DST_TELEPHONE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationWaveIn">
      <summary>
            Audio line is a destination that will be the final recording source for the waveform-audio input (ADC). This line typically provides some sort of gain or attenuation. This is the typical component type for the recording line of most audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_WAVEIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.DestinationVoiceIn">
      <summary>
            Audio line is a destination that will be the final recording source for voice input. This component type is exactly like MIXERLINE_COMPONENTTYPE_DST_WAVEIN but is intended specifically for settings used during voice recording/recognition. Support for this line is optional for a mixer device. Many mixer devices provide only MIXERLINE_COMPONENTTYPE_DST_WAVEIN.
            MIXERLINE_COMPONENTTYPE_DST_VOICEIN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceUndefined">
      <summary>
            Audio line is a source that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceDigital">
      <summary>
            Audio line is a digital source (for example, digital output from a DAT or audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_DIGITAL
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceLine">
      <summary>
            Audio line is a line-level source (for example, line-level input from an external stereo) that can be used as an optional recording source. Because most audio cards for personal computers provide some sort of gain for the recording source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY type.
            MIXERLINE_COMPONENTTYPE_SRC_LINE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceMicrophone">
      <summary>
            Audio line is a microphone recording source. Most audio cards for personal computers provide at least two types of recording sources: an auxiliary audio line and microphone input. A microphone audio line typically provides some sort of gain. Audio cards that use a single input for use with a microphone or auxiliary audio line should use the MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE component type.
            MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceSynthesizer">
      <summary>
            Audio line is a source originating from the output of an internal synthesizer. Most audio cards for personal computers provide some sort of MIDI synthesizer (for example, an Adlib®-compatible or OPL/3 FM synthesizer).
            MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceCompactDisc">
      <summary>
            Audio line is a source originating from the output of an internal audio CD. This component type is provided for audio cards that provide an audio source line intended to be connected to an audio CD (or CD-ROM playing an audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceTelephone">
      <summary>
            Audio line is a source originating from an incoming telephone line.
            MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourcePcSpeaker">
      <summary>
            Audio line is a source originating from personal computer speaker. Several audio cards for personal computers provide the ability to mix what would typically be played on the internal speaker with the output of an audio card. Some audio cards support the ability to use this output as a recording source.
            MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceWaveOut">
      <summary>
            Audio line is a source originating from the waveform-audio output digital-to-analog converter (DAC). Most audio cards for personal computers provide this component type as a source to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination. Some cards also allow this source to be routed to the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceAuxiliary">
      <summary>
            Audio line is a source originating from the auxiliary audio line. This line type is intended as a source with gain or attenuation that can be routed to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination and/or recorded from the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLineComponentType.SourceAnalog">
      <summary>
            Audio line is an analog source (for example, analog output from a video-cassette tape).
            MIXERLINE_COMPONENTTYPE_SRC_ANALOG
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Custom">
      <summary>Custom</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.BooleanMeter">
      <summary>Boolean meter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.SignedMeter">
      <summary>Signed meter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.PeakMeter">
      <summary>Peak meter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.UnsignedMeter">
      <summary>Unsigned meter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Boolean">
      <summary>Boolean</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.OnOff">
      <summary>On Off</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Mute">
      <summary>Mute</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Mono">
      <summary>Mono</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Loudness">
      <summary>Loudness</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.StereoEnhance">
      <summary>Stereo Enhance</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Button">
      <summary>Button</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Decibels">
      <summary>Decibels</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Signed">
      <summary>Signed</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Unsigned">
      <summary>Unsigned</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Percent">
      <summary>Percent</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Slider">
      <summary>Slider</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Pan">
      <summary>Pan</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.QSoundPan">
      <summary>Q-sound pan</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Fader">
      <summary>Fader</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Volume">
      <summary>Volume</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Bass">
      <summary>Bass</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Treble">
      <summary>Treble</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Equalizer">
      <summary>Equaliser</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.SingleSelect">
      <summary>Single Select</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Mux">
      <summary>Mux</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.MultipleSelect">
      <summary>Multiple select</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.Mixer">
      <summary>Mixer</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.MicroTime">
      <summary>Micro time</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType.MilliTime">
      <summary>Milli time</summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.#ctor(System.Int32)">
      <summary>Connects to the specified mixer</summary>
      <param name="mixerIndex">The index of the mixer to use. 
            This should be between zero and NumberOfDevices - 1</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.GetDestination(System.Int32)">
      <summary>Retrieve the specified MixerDestination object</summary>
      <param name="destinationIndex">The ID of the destination to use.
            Should be between 0 and DestinationCount - 1</param>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.NumberOfDevices">
      <summary>The number of mixer devices available</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.DestinationCount">
      <summary>The number of destinations this mixer supports</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.Name">
      <summary>The name of this mixer device</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.Manufacturer">
      <summary>The manufacturer code for this mixer device</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.ProductID">
      <summary>The product identifier code for this mixer device</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.Destinations">
      <summary>
            A way to enumerate the destinations
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.Mixer.Mixers">
      <summary>
            A way to enumerate all available devices
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl">
      <summary>
            Represents a mixer control
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.mixerHandle">
      <summary>
            Mixer Handle
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.nChannels">
      <summary>
            Number of Channels
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.mixerHandleType">
      <summary>
            Mixer Handle Type
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.GetMixerControls(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Gets all the mixer controls
            </summary>
      <param name="mixerHandle">
      </param>
      <param name="mixerLine">
      </param>
      <param name="mixerHandleType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.GetMixerControl(System.IntPtr,System.Int32,System.Int32,System.Int32,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Gets a specified Mixer Control
            </summary>
      <param name="mixerHandle">Mixer Handle</param>
      <param name="nLineID">Line ID</param>
      <param name="controlId">Control ID</param>
      <param name="nChannels">Number of Channels</param>
      <param name="mixerFlags">Flags to use (indicates the meaning of mixerHandle)</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.GetControlDetails">
      <summary>
            Gets the control details
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.GetDetails(System.IntPtr)">
      <summary>
            Gets the control details
            </summary>
      <param name="pDetails">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsControlBoolean(Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType)">
      <summary>
            Returns true if this is a boolean control
            </summary>
      <param name="controlType">Control type</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsControlListText(Ozeki.Media.Audio.Mixer.MixerInterop.MixerControlType)">
      <summary>
            Determines whether a specified mixer control type is a list text control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.ToString">
      <summary>
            String representation for debug purposes
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.Name">
      <summary>
            Mixer control name
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.ControlType">
      <summary>
            Mixer control type
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsBoolean">
      <summary>
            Is this a boolean control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsListText">
      <summary>
            True if this is a list text control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsSigned">
      <summary>
            True if this is a signed control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsUnsigned">
      <summary>
            True if this is an unsigned control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.MixerControl.IsCustom">
      <summary>
            True if this is a custom control
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.BooleanMixerControl">
      <summary>
            Boolean mixer control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.BooleanMixerControl.GetDetails(System.IntPtr)">
      <summary>
            Gets the details for this control
            </summary>
      <param name="pDetails">memory pointer</param>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.BooleanMixerControl.Value">
      <summary>
            The current value of the control
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.CustomMixerControl">
      <summary>
            Custom Mixer control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.CustomMixerControl.GetDetails(System.IntPtr)">
      <summary>
            Get the data for this custom control
            </summary>
      <param name="pDetails">pointer to memory to receive data</param>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.ListTextMixerControl">
      <summary>
            List text mixer control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.ListTextMixerControl.GetDetails(System.IntPtr)">
      <summary>
            Get the details for this control
            </summary>
      <param name="pDetails">Memory location to read to</param>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl">
      <summary>
            Represents a signed mixer control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.GetDetails(System.IntPtr)">
      <summary>
            Gets details for this contrl
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.ToString">
      <summary>
            String Representation for debugging purposes
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.Value">
      <summary>
            The value of the control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.MinValue">
      <summary>
            Minimum value for this control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.MaxValue">
      <summary>
            Maximum value for this control
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.SignedMixerControl.Percent">
      <summary>
            Value of the control represented as a percentage
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl">
      <summary>
            Represents an unsigned mixer control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.GetDetails(System.IntPtr)">
      <summary>
            Gets the details for this control
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.ToString">
      <summary>
            String Representation for debugging purposes
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.Value">
      <summary>
            The control value
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.MinValue">
      <summary>
            The control's minimum value
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.MaxValue">
      <summary>
            The control's maximum value
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerControls.UnsignedMixerControl.Percent">
      <summary>
            Value of the control represented as a percentage
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop">
      <summary>
            Functions are used with audio mixers.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd756704%28v=VS.85%29.aspx
            </remarks>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerClose(System.IntPtr)">
      <summary>
            Closes the specified mixer device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetControlDetails(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS@,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Retrieves details about a single control associated with an audio line.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetDevCaps(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS@,System.Int32)">
      <summary>
            Queries a specified mixer device to determine its capabilities.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetID(System.IntPtr,System.Int32@,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Retrieves the device identifier for a mixer device associated with a specified device handle.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetLineControls(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS@,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Retrieves one or more controls associated with an audio line.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetLineInfo(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE@,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Retrieves information about a specific line of a mixer device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerGetNumDevs">
      <summary>
            Retrieves the number of mixer devices present in the system.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
            Sends a custom mixer driver message directly to a mixer driver.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerOpen(System.IntPtr@,System.Int32,System.IntPtr,System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Opens a specified mixer device and ensures that the device will not be removed until the application closes the handle.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerInterop.mixerSetControlDetails(System.IntPtr,Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS@,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Sets properties of a single control associated with an audio line.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine">
      <summary>
            Represents a mixer line (source or destination)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.#ctor(System.IntPtr,System.Int32,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Creates a new mixer destination
            </summary>
      <param name="mixerHandle">Mixer Handle</param>
      <param name="destinationIndex">Destination Index</param>
      <param name="mixerHandleType">Mixer Handle Type</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.#ctor(System.IntPtr,System.Int32,System.Int32,Ozeki.Media.Audio.Mixer.MixerInterop.MixerFlags)">
      <summary>
            Creates a new Mixer Source For a Specified Source
            </summary>
      <param name="mixerHandle">Mixer Handle</param>
      <param name="destinationIndex">Destination Index</param>
      <param name="sourceIndex">Source Index</param>
      <param name="mixerHandleType">Flag indicating the meaning of mixerHandle</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.GetMixerIdForWaveIn(System.Int32)">
      <summary>
            Creates a new Mixer Source
            </summary>
      <param name="waveInDevice">Wave In Device</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.GetSource(System.Int32)">
      <summary>
            Gets the specified source
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.ToString">
      <summary>
            Describes this Mixer Line (for diagnostic purposes)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.Name">
      <summary>
            Mixer Line Name
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.ShortName">
      <summary>
            Mixer Line short name
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.LineId">
      <summary>
            The line ID
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.ComponentType">
      <summary>
            Component Type
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.TypeDescription">
      <summary>
            Mixer destination type description
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.Channels">
      <summary>
            Number of channels
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.SourceCount">
      <summary>
            Number of sources
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.ControlsCount">
      <summary>
            Number of controls
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.IsActive">
      <summary>
            Is this destination active
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.IsDisconnected">
      <summary>
            Is this destination disconnected
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.IsSource">
      <summary>
            Is this destination a source
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.Controls">
      <summary>
            Enumerator for the controls on this Mixer Limne
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.Sources">
      <summary>
            Enumerator for the sources on this Mixer Line
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Mixer.MixerInterop.MixerLine.TargetName">
      <summary>
            The name of the target output device
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds">
      <summary>
            BOUNDS structure
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.minimum">
      <summary>
            dwMinimum / lMinimum / reserved 0
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.maximum">
      <summary>
            dwMaximum / lMaximum / reserved 1
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.reserved2">
      <summary>
            reserved 2
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.reserved3">
      <summary>
            reserved 3
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.reserved4">
      <summary>
            reserved 4
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Bounds.reserved5">
      <summary>
            reserved 5
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics">
      <summary>
            METRICS structure
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.step">
      <summary>
            cSteps / reserved[0]
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.customData">
      <summary>
            cbCustomData / reserved[1], number of bytes for control details
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.reserved2">
      <summary>
            reserved 2
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.reserved3">
      <summary>
            reserved 3
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.reserved4">
      <summary>
            reserved 4
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.Metrics.reserved5">
      <summary>
            reserved 5
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget">
      <summary>
            Target media information. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.dwType">
      <summary>
            Target media device type associated with the audio line described in the MIXERLINE structure. An application must ignore target information for media device types it does not use.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.dwDeviceID">
      <summary>
            Current device identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the current media device index of the associated media device. When calling the mixerGetLineInfo function with the MIXER_GETLINEINFOF_TARGETTYPE flag, this member is ignored on input and will be returned to the caller by the audio mixer manager. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.wMid">
      <summary>
            Manufacturer identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the wMid member of the device-capabilities structure for the associated media. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.wPid">
      <summary>
            Product identifier of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This identifier is identical to the wPid member of the device-capabilities structure for the associated media.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.vDriverVersion">
      <summary>
            Driver version of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This version is identical to the vDriverVersion member of the device-capabilities structure for the associated media. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MixeLineTarget.szPname">
      <summary>
            Product name of the target media device when the dwType member is a target type other than MIXERLINE_TARGETTYPE_UNDEFINED. This name is identical to the szPname member of the device-capabilities structure for the associated media. 
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS">
      <summary>
            The MIXERCAPS structure describes the capabilities of a mixer device.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757291%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.wMid">
      <summary>
            Gets or sets the manufacturer identifier for the mixer device driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.wPid">
      <summary>
            Gets or sets the product identifier for the mixer device driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.vDriverVersion">
      <summary>
            Gets or sets the version number of the mixer device driver. The high-order byte is the major version number, and the low-order byte is the minor version number. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.szPname">
      <summary>
            Gets or sets the name of the product. If the mixer device driver supports multiple cards, this string must uniquely and easily identify (potentially to a user) the specific card.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.fdwSupport">
      <summary>
            Gets or sets various support information for the mixer device driver. No extended support bits are currently defined.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCAPS.cDestinations">
      <summary>
            Gets or sets the number of audio line destinations available through the mixer device.
            </summary>
      <remarks>
            All mixer devices must support at least one destination line, so this member cannot be zero.
            Destination indexes used in the dwDestination member of the MIXERLINE structure range from zero to the value specified in the cDestinations member minus one.
            </remarks>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL">
      <summary>
            The MIXERCONTROL structure describes the state and metrics of a single control for an audio line.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757293%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.cbStruct">
      <summary>
            The size of the MIXERCONTROL structure in bytes.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.dwControlID">
      <summary>
            Audio mixer-defined identifier that uniquely refers to the control described by the MIXERCONTROL structure.
            This identifier can be in any format supported by the mixer device.
            An application should use this identifier only as an abstract handle. No two controls for a single mixer device can ever have the same control identifier.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.dwControlType">
      <summary>
            Class of the control for which the identifier is specified in dwControlID.
            An application must use this information to display the appropriate control for input from the user.
            An application can also display tailored graphics based on the control class or search for a particular control class on a specific line.
            If an application does not know about a control class, this control must be ignored.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.fdwControl">
      <summary>
            Status and support flags for the audio line control. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.cMultipleItems">
      <summary>
            Number of items per channel that make up a MIXERCONTROL_CONTROLF_MULTIPLE control. This number is always two or greater for multiple-item controls. If the control is not a multiple-item control, do not use this member; it will be zero.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.szShortName">
      <summary>
            Short string that describes the audio line control specified by dwControlID. This description should be appropriate to use as a concise label for the control.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.szName">
      <summary>
            String that describes the audio line control specified by dwControlID. This description should be appropriate to use as a complete description for the control.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.Bounds">
      <summary>
            Union of boundary types.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROL.Metrics">
      <summary>
            Union of boundary metrics.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS">
      <summary>
            The MIXERCONTROLDETAILS structure refers to control-detail structures, retrieving or setting state information of an audio mixer control. All members of this structure must be initialized before calling the mixerGetControlDetails and mixerSetControlDetails functions.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757294%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.cbStruct">
      <summary>
            Size, in bytes, of the MIXERCONTROLDETAILS structure.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.dwControlID">
      <summary>
            Control identifier on which to get or set properties.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.cChannels">
      <summary>
            Number of channels on which to get or set control properties.
            0: Use this value when the control is a MIXERCONTROL_CONTROLTYPE_CUSTOM control.
            1: Use this value when the control is a MIXERCONTROL_CONTROLF_UNIFORM control or when an application needs to get and set all channels as if they were uniform
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.hwndOwner">
      <summary>
            Handle to the window that owns a custom dialog box for a mixer control. This member is used when the MIXER_SETCONTROLDETAILSF_CUSTOM flag is specified in the mixerSetControlDetails function.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.cbDetails">
      <summary>
            Size of one of the paDetails in bytes.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS.paDetails">
      <summary>
            Pointer to an array of one or more structures in which properties for the specified control are retrieved or set. 
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_BOOLEAN">
      <summary>
            The MIXERCONTROLDETAILS_BOOLEAN structure retrieves and sets Boolean control properties for an audio mixer control.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757295%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_BOOLEAN.fValue">
      <summary>
            Boolean value for a single item or channel.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_LISTTEXT">
      <summary>
            The MIXERCONTROLDETAILS_LISTTEXT structure retrieves list text, label text, and/or band-range information for multiple-item controls. This structure is used when the MIXER_GETCONTROLDETAILSF_LISTTEXT flag is specified in the mixerGetControlDetails function.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757296%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_LISTTEXT.dwParam1">
      <summary>
            Control class-specific values.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_LISTTEXT.dwParam2">
      <summary>
            Control class-specific values.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_LISTTEXT.szName">
      <summary>
            Name describing a single item in a multiple-item control. This text can be used as a label or item text, depending on the control class.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_SIGNED">
      <summary>
            The MIXERCONTROLDETAILS_SIGNED structure retrieves and sets signed type control properties for an audio mixer control.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757297%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_SIGNED.lValue">
      <summary>
            Signed integer value for a single item or channel.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_UNSIGNED">
      <summary>
            The MIXERCONTROLDETAILS_UNSIGNED structure retrieves and sets unsigned type control properties for an audio mixer control.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757298%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERCONTROLDETAILS_UNSIGNED.dwValue">
      <summary>
            Unsigned integer value for a single item or channel.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE">
      <summary>
            The MIXERLINE structure describes the state and metrics of an audio line.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757305%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.cbStruct">
      <summary>
            Size, in bytes, of the MIXERLINE structure. This member must be initialized before calling the mixerGetLineInfo function. The size specified in this member must be large enough to contain the MIXERLINE structure. When mixerGetLineInfo returns, this member contains the actual size of the information returned. The returned information will not exceed the requested size.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.dwDestination">
      <summary>
            Destination line index. This member ranges from zero to one less than the value specified in the cDestinations member of the MIXERCAPS structure retrieved by the mixerGetDevCaps function. When the mixerGetLineInfo function is called with the MIXER_GETLINEINFOF_DESTINATION flag, properties for the destination line are returned. (The dwSource member must be set to zero in this case.) When called with the MIXER_GETLINEINFOF_SOURCE flag, the properties for the source given by the dwSource member that is associated with the dwDestination member are returned. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.dwSource">
      <summary>
            Index for the audio source line associated with the dwDestination member. That is, this member specifies the nth audio source line associated with the specified audio destination line. This member is not used for destination lines and must be set to zero when MIXER_GETLINEINFOF_DESTINATION is specified in the mixerGetLineInfo function. When the MIXER_GETLINEINFOF_SOURCE flag is specified, this member ranges from zero to one less than the value specified in the cConnections member for the audio destination line given in the dwDestination member.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.dwLineID">
      <summary>
            An identifier defined by the mixer device that uniquely refers to the audio line described by the MIXERLINE structure. This identifier is unique for each mixer device and can be in any format. An application should use this identifier only as an abstract handle. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.fdwLine">
      <summary>
            Status and support flags for the audio line. This member is always returned to the application and requires no initialization.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.dwUser">
      <summary>
            Instance data defined by the audio device for the line. This member is intended for custom mixer applications designed specifically for the mixer device returning this information. Other applications should ignore this data. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.dwComponentType">
      <summary>
            Component type for this audio line. An application can use this information to display tailored graphics or to search for a particular component. If an application does not use component types, this member should be ignored.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.cChannels">
      <summary>
            Maximum number of separate channels that can be manipulated independently for the audio line. The minimum value for this field is 1 because a line must have at least one channel.
            Most modern audio cards for personal computers are stereo devices; for them, the value of this member is 2.
            Channel 1 is assumed to be the left channel; channel 2 is assumed to be the right channel.
            A multichannel line might have one or more uniform controls (controls that affect all channels of a line uniformly) associated with it.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.cConnections">
      <summary>
            Number of connections that are associated with the audio line. This member is used only for audio destination lines and specifies the number of audio source lines that are associated with it. This member is always zero for source lines and for destination lines that do not have any audio source lines associated with them. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.cControls">
      <summary>
            Number of controls associated with the audio line. This value can be zero. If no controls are associated with the line, the line is likely to be a source that might be selected in a MIXERCONTROL_CONTROLTYPE_MUX or MIXERCONTROL_CONTROLTYPE_MIXER but allows no manipulation of the signal. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.szShortName">
      <summary>
            Short string that describes the audio mixer line specified in the dwLineID member. This description should be appropriate as a concise label for the line. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.szName">
      <summary>
            String that describes the audio mixer line specified in the dwLineID member. This description should be appropriate as a complete description for the line. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINE.Target">
      <summary>
            Target media information.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS">
      <summary>
            The MIXERLINECONTROLS structure contains information about the controls of an audio line.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd757306%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.cbStruct">
      <summary>
            Size of the MIXERLINECONTROLS structure in bytes.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.dwLineID">
      <summary>
            Line identifier for which controls are being queried.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.dwControlID">
      <summary>
            Control identifier of the desired control. Union with UInt32 dwControlType
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.cControls">
      <summary>
            Number of MIXERCONTROL structure elements to retrieve. This member must be initialized by the application before calling the mixerGetLineControls function.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.cbmxctrl">
      <summary>
            Size of a single MIXERCONTROL structure in bytes.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Mixer.MixerInterop.Structures.MIXERLINECONTROLS.pamxctrl">
      <summary>
            Pointer to one or more MIXERCONTROL structures to receive the properties of the requested audio line controls. This member cannot be NULL and must be initialized before calling the mixerGetLineControls function. Each element of the array of controls must be at least large enough to contain a base MIXERCONTROL structure. The cbmxctrl member must specify the size, in bytes, of each element in this array. No initialization of the buffer pointed to by this member is required by the application. All members are filled in by the mixer device (including the cbStruct member of each MIXERCONTROL structure) upon returning successfully.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.WaveMixer.ozWaveMixer.WaveMix(System.Byte[],System.Byte[])">
      <summary>
            Két wave formátumú 16 bites 8000Hz es hangot kerver össze
            </summary>
      <param name="s1">
      </param>
      <param name="s2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.WaveMixer.ozWaveMixer.ComplementToSigned(System.Byte[]@,System.Int32)">
      <summary>
            In stereo wave format, samples are stored in 2's complement. For Mono, it's necessary to 
            convert those samples to their equivalent signed value. This method is used 
            by other public methods to equilibrate wave formats of different files.
            </summary>
      <param name="bytArr">Sample data in array</param>
      <param name="intPos">Array offset</param>
      <returns>Mono value as signed short</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Mixer.WaveMixer.ozWaveMixer.SignedToComplement(System.Int16)">
      <summary>
            Convert signed sample value back to 2's complement value equivalent to Stereo. This method is used 
            by other public methods to equilibrate wave formats of different files.
            </summary>
      <param name="shtVal">The mono signed value as short</param>
      <returns>Stereo 2's complement value as byte array</returns>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmDriver">
      <summary>
            Represents an installed ACM Driver
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.IsCodecInstalled(System.String)">
      <summary>
            Helper function to determine whether a particular codec is installed
            </summary>
      <param name="shortName">The short name of the function</param>
      <returns>Whether the codec is installed</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.ShowFormatChooseDialog(System.IntPtr,System.String,Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags,Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFormat@,System.String@,System.String@)">
      <summary>
            Show Format Choose Dialog
            </summary>
      <param name="ownerWindowHandle">Owner window handle, can be null</param>
      <param name="windowTitle">Window title</param>
      <param name="enumFlags">Enumeration flags. None to get everything</param>
      <param name="enumFormat">Enumeration format. Only needed with certain enumeration flags</param>
      <param name="selectedFormat">The selected format</param>
      <param name="selectedFormatDescription">Textual description of the selected format</param>
      <param name="selectedFormatTagDescription">Textual description of the selected format tag</param>
      <returns>True if a format was selected</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.FindByShortName(System.String)">
      <summary>
            Finds a Driver by its short name
            </summary>
      <param name="shortName">Short Name</param>
      <returns>The driver, or null if not found</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.EnumerateAcmDrivers">
      <summary>
            Gets a list of the ACM Drivers installed
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.DriverEnumCallback(System.IntPtr,System.IntPtr,Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags)">
      <summary>
            The callback for acmDriverEnum
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.#ctor(System.IntPtr)">
      <summary>
            Creates a new ACM Driver object
            </summary>
      <param name="hAcmDriver">Driver handle</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.ToString">
      <summary>
            ToString
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.GetFormats(Ozeki.Media.Audio.NAudio.AcmFormatTag)">
      <summary>
            Gets all the supported formats for a given format tag
            </summary>
      <param name="formatTag">Format tag</param>
      <returns>Supported formats</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.Open">
      <summary>
            Opens this driver
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.Close">
      <summary>
            Closes this driver
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmDriver.Dispose">
      <summary>
            Dispose
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmDriver.MaxFormatSize">
      <summary>
            Gets the maximum size needed to store a WaveFormat for ACM interop functions
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmDriver.ShortName">
      <summary>
            The short name of this driver
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmDriver.LongName">
      <summary>
            The full name of this driver
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmDriver.DriverId">
      <summary>
            The driver ID
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmDriver.FormatTags">
      <summary>
            The list of FormatTags for this ACM Driver
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmDriverDetails">
      <summary>
            Interop structure for ACM driver details (ACMDRIVERDETAILS)
            http://msdn.microsoft.com/en-us/library/dd742889%28VS.85%29.aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.ShortNameChars">
      <summary>
            ACMDRIVERDETAILS_SHORTNAME_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.LongNameChars">
      <summary>
            ACMDRIVERDETAILS_LONGNAME_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.CopyrightChars">
      <summary>
            ACMDRIVERDETAILS_COPYRIGHT_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.LicensingChars">
      <summary>
            ACMDRIVERDETAILS_LICENSING_CHARS 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.FeaturesChars">
      <summary>
            ACMDRIVERDETAILS_FEATURES_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.structureSize">
      <summary>
            DWORD cbStruct
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.fccType">
      <summary>
            FOURCC fccType
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.fccComp">
      <summary>
            FOURCC fccComp
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.manufacturerId">
      <summary>
            WORD   wMid; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.productId">
      <summary>
            WORD wPid
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.acmVersion">
      <summary>
            DWORD vdwACM
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.driverVersion">
      <summary>
            DWORD vdwDriver
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.supportFlags">
      <summary>
            DWORD  fdwSupport;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.formatTagsCount">
      <summary>
            DWORD cFormatTags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.filterTagsCount">
      <summary>
            DWORD cFilterTags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.hicon">
      <summary>
            HICON hicon
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.shortName">
      <summary>
            TCHAR  szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.longName">
      <summary>
            TCHAR  szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS];
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.copyright">
      <summary>
            TCHAR  szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.licensing">
      <summary>
            TCHAR  szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetails.features">
      <summary>
            TCHAR  szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS];
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags">
      <summary>
            Flags indicating what support a particular ACM driver has
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Codec">
      <summary>ACMDRIVERDETAILS_SUPPORTF_CODEC - Codec</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Converter">
      <summary>ACMDRIVERDETAILS_SUPPORTF_CONVERTER - Converter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Filter">
      <summary>ACMDRIVERDETAILS_SUPPORTF_FILTER - Filter</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Hardware">
      <summary>ACMDRIVERDETAILS_SUPPORTF_HARDWARE - Hardware</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Async">
      <summary>ACMDRIVERDETAILS_SUPPORTF_ASYNC - Async</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Local">
      <summary>ACMDRIVERDETAILS_SUPPORTF_LOCAL - Local</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverDetailsSupportFlags.Disabled">
      <summary>ACMDRIVERDETAILS_SUPPORTF_DISABLED - Disabled</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverEnumFlags.NoLocal">
      <summary>
            ACM_DRIVERENUMF_NOLOCAL, Only global drivers should be included in the enumeration
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmDriverEnumFlags.Disabled">
      <summary>
            ACM_DRIVERENUMF_DISABLED, Disabled ACM drivers should be included in the enumeration
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmFormat">
      <summary>
            ACM Format
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.FormatIndex">
      <summary>
            Format Index
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.FormatTag">
      <summary>
            Format Tag
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.SupportFlags">
      <summary>
            Support Flags
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.WaveFormat">
      <summary>
            WaveFormat
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.WaveFormatByteSize">
      <summary>
            WaveFormat Size
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormat.FormatDescription">
      <summary>
            Format Description
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmFormatChoose">
      <summary>
            ACMFORMATCHOOSE
            http://msdn.microsoft.com/en-us/library/dd742911%28VS.85%29.aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.structureSize">
      <summary>
            DWORD cbStruct; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.styleFlags">
      <summary>
            DWORD fdwStyle; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.ownerWindowHandle">
      <summary>
            HWND hwndOwner; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.selectedWaveFormatPointer">
      <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.selectedWaveFormatByteSize">
      <summary>
            DWORD cbwfx; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.title">
      <summary>
            LPCTSTR pszTitle; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.formatTagDescription">
      <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.formatDescription">
      <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.name">
      <summary>
            LPTSTR pszName; 
            n.b. can be written into
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.nameByteSize">
      <summary>
            DWORD cchName
            Should be at least 128 unless name is zero
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.formatEnumFlags">
      <summary>
            DWORD fdwEnum; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.waveFormatEnumPointer">
      <summary>
            LPWAVEFORMATEX pwfxEnum; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.instanceHandle">
      <summary>
            HINSTANCE hInstance; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.templateName">
      <summary>
            LPCTSTR pszTemplateName; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.customData">
      <summary>
            LPARAM lCustData; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChoose.windowCallbackFunction">
      <summary>
            ACMFORMATCHOOSEHOOKPROC pfnHook; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.ShowHelp">
      <summary>
            ACMFORMATCHOOSE_STYLEF_SHOWHELP
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.EnableHook">
      <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLEHOOK
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.EnableTemplate">
      <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.EnableTemplateHandle">
      <summary>
            ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.InitToWfxStruct">
      <summary>
            ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatChooseStyleFlags.ContextHelp">
      <summary>
            ACMFORMATCHOOSE_STYLEF_CONTEXTHELP
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmFormatDetails">
      <summary>
            ACMFORMATDETAILS
            http://msdn.microsoft.com/en-us/library/dd742913%28VS.85%29.aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.FormatDescriptionChars">
      <summary>
            ACMFORMATDETAILS_FORMAT_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.structSize">
      <summary>
            DWORD cbStruct; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.formatIndex">
      <summary>
            DWORD dwFormatIndex; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.formatTag">
      <summary>
            DWORD dwFormatTag; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.supportFlags">
      <summary>
            DWORD fdwSupport; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.waveFormatPointer">
      <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.waveFormatByteSize">
      <summary>
            DWORD cbwfx; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatDetails.formatDescription">
      <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS];
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags">
      <summary>
            Format Enumeration Flags
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Convert">
      <summary>
            ACM_FORMATENUMF_CONVERT
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will only enumerate destination formats that can be converted from the given pwfx format. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Hardware">
      <summary>
            ACM_FORMATENUMF_HARDWARE
            The enumerator should only enumerate formats that are supported as native input or output formats on one or more of the installed waveform-audio devices. This flag provides a way for an application to choose only formats native to an installed waveform-audio device. This flag must be used with one or both of the ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT flags. Specifying both ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT will enumerate only formats that can be opened for input or output. This is true regardless of whether this flag is specified. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Input">
      <summary>
            ACM_FORMATENUMF_INPUT
            Enumerator should enumerate only formats that are supported for input (recording). 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Channels">
      <summary>
            ACM_FORMATENUMF_NCHANNELS 
            The nChannels member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.SamplesPerSecond">
      <summary>
            ACM_FORMATENUMF_NSAMPLESPERSEC
            The nSamplesPerSec member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Output">
      <summary>
            ACM_FORMATENUMF_OUTPUT 
            Enumerator should enumerate only formats that are supported for output (playback). 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.Suggest">
      <summary>
            ACM_FORMATENUMF_SUGGEST
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate all suggested destination formats for the given pwfx format. This mechanism can be used instead of the acmFormatSuggest function to allow an application to choose the best suggested format for conversion. The dwFormatIndex member will always be set to zero on return. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.BitsPerSample">
      <summary>
            ACM_FORMATENUMF_WBITSPERSAMPLE
            The wBitsPerSample member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatEnumFlags.FormatTag">
      <summary>
            ACM_FORMATENUMF_WFORMATTAG
            The wFormatTag member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. The dwFormatTag member of the ACMFORMATDETAILS structure must be equal to the wFormatTag member. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags.FormatTag">
      <summary>
            ACM_FORMATSUGGESTF_WFORMATTAG
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags.Channels">
      <summary>
            ACM_FORMATSUGGESTF_NCHANNELS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags.SamplesPerSecond">
      <summary>
            ACM_FORMATSUGGESTF_NSAMPLESPERSEC
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags.BitsPerSample">
      <summary>
            ACM_FORMATSUGGESTF_WBITSPERSAMPLE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags.TypeMask">
      <summary>
            ACM_FORMATSUGGESTF_TYPEMASK
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmFormatTag">
      <summary>
            ACM Format Tag
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.FormatTagIndex">
      <summary>
            Format Tag Index
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.FormatTag">
      <summary>
            Format Tag
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.FormatSize">
      <summary>
            Format Size
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.SupportFlags">
      <summary>
            Support Flags
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.StandardFormatsCount">
      <summary>
            Standard Formats Count
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmFormatTag.FormatDescription">
      <summary>
            Format Description
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.FormatTagDescriptionChars">
      <summary>
            ACMFORMATTAGDETAILS_FORMATTAG_CHARS
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.structureSize">
      <summary>
            DWORD cbStruct; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.formatTagIndex">
      <summary>
            DWORD dwFormatTagIndex; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.formatTag">
      <summary>
            DWORD dwFormatTag; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.formatSize">
      <summary>
            DWORD cbFormatSize; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.supportFlags">
      <summary>
            DWORD fdwSupport;
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.standardFormatsCount">
      <summary>
            DWORD cStandardFormats; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmFormatTagDetails.formatDescription">
      <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountDrivers">
      <summary>ACM_METRIC_COUNT_DRIVERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountCodecs">
      <summary>ACM_METRIC_COUNT_CODECS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountConverters">
      <summary>ACM_METRIC_COUNT_CONVERTERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountFilters">
      <summary>ACM_METRIC_COUNT_FILTERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountDisabled">
      <summary>ACM_METRIC_COUNT_DISABLED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountHardware">
      <summary>ACM_METRIC_COUNT_HARDWARE</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountLocalDrivers">
      <summary>ACM_METRIC_COUNT_LOCAL_DRIVERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountLocalCodecs">
      <summary>ACM_METRIC_COUNT_LOCAL_CODECS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountLocalConverters">
      <summary>ACM_METRIC_COUNT_LOCAL_CONVERTERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountLocalFilters">
      <summary>ACM_METRIC_COUNT_LOCAL_FILTERS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.CountLocalDisabled">
      <summary>ACM_METRIC_COUNT_LOCAL_DISABLED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.HardwareWaveInput">
      <summary>ACM_METRIC_HARDWARE_WAVE_INPUT</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.HardwareWaveOutput">
      <summary>ACM_METRIC_HARDWARE_WAVE_OUTPUT</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.MaxSizeFormat">
      <summary>ACM_METRIC_MAX_SIZE_FORMAT</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.MaxSizeFilter">
      <summary>ACM_METRIC_MAX_SIZE_FILTER</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.DriverSupport">
      <summary>ACM_METRIC_DRIVER_SUPPORT</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmMetrics.DriverPriority">
      <summary>ACM_METRIC_DRIVER_PRIORITY</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamConvertFlags.BlockAlign">
      <summary>
            ACM_STREAMCONVERTF_BLOCKALIGN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamConvertFlags.Start">
      <summary>
            ACM_STREAMCONVERTF_START
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamConvertFlags.End">
      <summary>
            ACM_STREAMCONVERTF_END
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamHeaderStatusFlags.Done">
      <summary>
            ACMSTREAMHEADER_STATUSF_DONE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamHeaderStatusFlags.Prepared">
      <summary>
            ACMSTREAMHEADER_STATUSF_PREPARED
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamHeaderStatusFlags.InQueue">
      <summary>
            ACMSTREAMHEADER_STATUSF_INQUEUE
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmStreamHeaderStruct">
      <summary>
            Interop structure for ACM stream headers.
            ACMSTREAMHEADER 
            http://msdn.microsoft.com/en-us/library/dd742926%28VS.85%29.aspx
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamSizeFlags.Source">
      <summary>
            ACM_STREAMSIZEF_SOURCE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamSizeFlags.Destination">
      <summary>
            ACM_STREAMSIZEF_DESTINATION
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.IMp3FrameDecompressor">
      <summary>
            Interface for MP3 frame by frame decoder
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.IMp3FrameDecompressor.DecompressFrame(Ozeki.Media.Audio.NAudio.Mp3Frame,System.Byte[],System.Int32)">
      <summary>
            Decompress a single MP3 frame
            </summary>
      <param name="frame">Frame to decompress</param>
      <param name="dest">Output buffer</param>
      <param name="destOffset">Offset within output buffer</param>
      <returns>Bytes written to output buffer</returns>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.IMp3FrameDecompressor.OutputFormat">
      <summary>
            PCM format that we are converting into
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.IWaveProvider">
      <summary>
            Generic interface for all WaveProviders.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Fill the specified buffer with wave data.
            </summary>
      <param name="buffer">The buffer to fill of wave data.</param>
      <param name="offset">Offset into buffer</param>
      <param name="count">The number of bytes to read</param>
      <returns>the number of bytes written to the buffer.</returns>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.IWaveProvider.WaveFormat">
      <summary>
            Gets the WaveFormat of this WaveProvider.
            </summary>
      <value>The wave format.</value>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.MmException">
      <summary>
            Summary description for MmException.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.MmException.#ctor(Ozeki.Media.Audio.NAudio.MmResult,System.String)">
      <summary>
            Creates a new MmException
            </summary>
      <param name="result">The result returned by the Windows API call</param>
      <param name="function">The name of the Windows API that failed</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.MmException.Try(Ozeki.Media.Audio.NAudio.MmResult,System.String)">
      <summary>
            Helper function to automatically raise an exception on failure
            </summary>
      <param name="result">The result of the API call</param>
      <param name="function">The API function name</param>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.MmException.Result">
      <summary>
            Returns the Windows API result
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.MmResult">
      <summary>
            Windows multimedia error codes from mmsystem.h.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.NoError">
      <summary>no error, MMSYSERR_NOERROR</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.UnspecifiedError">
      <summary>unspecified error, MMSYSERR_ERROR</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.BadDeviceId">
      <summary>device ID out of range, MMSYSERR_BADDEVICEID</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.NotEnabled">
      <summary>driver failed enable, MMSYSERR_NOTENABLED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.AlreadyAllocated">
      <summary>device already allocated, MMSYSERR_ALLOCATED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.InvalidHandle">
      <summary>device handle is invalid, MMSYSERR_INVALHANDLE</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.NoDriver">
      <summary>no device driver present, MMSYSERR_NODRIVER</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.MemoryAllocationError">
      <summary>memory allocation error, MMSYSERR_NOMEM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.NotSupported">
      <summary>function isn't supported, MMSYSERR_NOTSUPPORTED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.BadErrorNumber">
      <summary>error value out of range, MMSYSERR_BADERRNUM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.InvalidFlag">
      <summary>invalid flag passed, MMSYSERR_INVALFLAG</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.InvalidParameter">
      <summary>invalid parameter passed, MMSYSERR_INVALPARAM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.HandleBusy">
      <summary>handle being used simultaneously on another thread (eg callback),MMSYSERR_HANDLEBUSY</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.InvalidAlias">
      <summary>specified alias not found, MMSYSERR_INVALIDALIAS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.BadRegistryDatabase">
      <summary>bad registry database, MMSYSERR_BADDB</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.RegistryKeyNotFound">
      <summary>registry key not found, MMSYSERR_KEYNOTFOUND</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.RegistryReadError">
      <summary>registry read error, MMSYSERR_READERROR</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.RegistryWriteError">
      <summary>registry write error, MMSYSERR_WRITEERROR</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.RegistryDeleteError">
      <summary>registry delete error, MMSYSERR_DELETEERROR</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.RegistryValueNotFound">
      <summary>registry value not found, MMSYSERR_VALNOTFOUND</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.NoDriverCallback">
      <summary>driver does not call DriverCallback, MMSYSERR_NODRIVERCB</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.MoreData">
      <summary>more data to be returned, MMSYSERR_MOREDATA</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.WaveBadFormat">
      <summary>unsupported wave format, WAVERR_BADFORMAT</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.WaveStillPlaying">
      <summary>still something playing, WAVERR_STILLPLAYING</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.WaveHeaderUnprepared">
      <summary>header not prepared, WAVERR_UNPREPARED</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.WaveSync">
      <summary>device is synchronous, WAVERR_SYNC</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.AcmNotPossible">
      <summary>Conversion not possible (ACMERR_NOTPOSSIBLE)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.AcmBusy">
      <summary>Busy (ACMERR_BUSY)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.AcmHeaderUnprepared">
      <summary>Header Unprepared (ACMERR_UNPREPARED)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.AcmCancelled">
      <summary>Cancelled (ACMERR_CANCELED)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.MixerInvalidLine">
      <summary>invalid line (MIXERR_INVALLINE)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.MixerInvalidControl">
      <summary>invalid control (MIXERR_INVALCONTROL)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.MmResult.MixerInvalidValue">
      <summary>invalid value (MIXERR_INVALVALUE)</summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmInterop">
      <summary>
            Interop definitions for Windows ACM (Audio Compression Manager) API
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmInterop.AcmFormatChooseHookProc">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742910%28VS.85%29.aspx
            UINT ACMFORMATCHOOSEHOOKPROC acmFormatChooseHookProc(
              HWND hwnd,     
              UINT uMsg,     
              WPARAM wParam, 
              LPARAM lParam  
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmInterop.acmFormatSuggest(System.IntPtr,Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFormat,System.Int32,Ozeki.Media.Audio.NAudio.AcmFormatSuggestFlags)">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            MMRESULT acmFormatSuggest(
            HACMDRIVER had,          
            LPWAVEFORMATEX pwfxSrc,  
            LPWAVEFORMATEX pwfxDst,  
            DWORD cbwfxDst,          
            DWORD fdwSuggest);
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmInterop.acmStreamOpen(System.IntPtr@,System.IntPtr,Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFilter,System.IntPtr,System.IntPtr,Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags)">
      <summary>
            http://msdn.microsoft.com/en-us/library/dd742928%28VS.85%29.aspx
            MMRESULT acmStreamOpen(
              LPHACMSTREAM    phas,       
              HACMDRIVER      had,        
              LPWAVEFORMATEX  pwfxSrc,    
              LPWAVEFORMATEX  pwfxDst,    
              LPWAVEFILTER    pwfltr,     
              DWORD_PTR       dwCallback, 
              DWORD_PTR       dwInstance, 
              DWORD           fdwOpen     
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmInterop.acmStreamOpen2(System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,Ozeki.Media.Audio.NAudio.WaveFilter,System.IntPtr,System.IntPtr,Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags)">
      <summary>
            A version with pointers for troubleshooting
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.AcmStream">
      <summary>
            AcmStream encapsulates an Audio Compression Manager Stream
            used to convert audio from one format to another
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.#ctor(Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFormat)">
      <summary>
            Creates a new ACM stream to convert one format to another. Note that
            not all conversions can be done in one step
            </summary>
      <param name="sourceFormat">The source audio format</param>
      <param name="destFormat">The destination audio format</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.#ctor(System.IntPtr,Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveFilter)">
      <summary>
            Creates a new ACM stream to convert one format to another, using a 
            specified driver identified and wave filter
            </summary>
      <param name="driverId">the driver identifier</param>
      <param name="sourceFormat">the source format</param>
      <param name="waveFilter">the wave filter</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.SourceToDest(System.Int32)">
      <summary>
            Returns the number of output bytes for a given number of input bytes
            </summary>
      <param name="source">Number of input bytes</param>
      <returns>Number of output bytes</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.DestToSource(System.Int32)">
      <summary>
            Returns the number of source bytes for a given number of destination bytes
            </summary>
      <param name="dest">Number of destination bytes</param>
      <returns>Number of source bytes</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.SuggestPcmFormat(Ozeki.Media.Audio.NAudio.WaveFormat)">
      <summary>
            Suggests an appropriate PCM format that the compressed format can be converted
            to in one step
            </summary>
      <param name="compressedFormat">The compressed format</param>
      <returns>The PCM format</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.Convert(System.Int32,System.Int32@)">
      <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
      <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
      <param name="sourceBytesConverted">The number of source bytes actually converted</param>
      <returns>The number of converted bytes in the DestinationBuffer</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.Convert(System.Int32)">
      <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
      <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
      <returns>The number of converted bytes in the DestinationBuffer</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.Dispose">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.Dispose(System.Boolean)">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.AcmStream.Finalize">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmStream.SourceBuffer">
      <summary>
            Returns the Source Buffer. Fill this with data prior to calling convert
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.AcmStream.DestBuffer">
      <summary>
            Returns the Destination buffer. This will contain the converted data
            after a successful call to Convert
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.Query">
      <summary>
            ACM_STREAMOPENF_QUERY, ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.Async">
      <summary>
            ACM_STREAMOPENF_ASYNC, Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag. 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.NonRealTime">
      <summary>
            ACM_STREAMOPENF_NONREALTIME, ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackTypeMask">
      <summary>
            CALLBACK_TYPEMASK, callback type mask
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackNull">
      <summary>
            CALLBACK_NULL, no callback
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackWindow">
      <summary>
            CALLBACK_WINDOW, dwCallback is a HWND
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackTask">
      <summary>
            CALLBACK_TASK, dwCallback is a HTASK
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackFunction">
      <summary>
            CALLBACK_FUNCTION, dwCallback is a FARPROC
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackThread">
      <summary>
            CALLBACK_THREAD, thread ID replaces 16 bit task
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.AcmStreamOpenFlags.CallbackEvent">
      <summary>
            CALLBACK_EVENT, dwCallback is an EVENT Handle
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Id3v2Tag">
      <summary>
            An ID3v2 Tag
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Id3v2Tag.ReadTag(System.IO.Stream)">
      <summary>
            Reads an ID3v2 tag from a stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Id3v2Tag.RawData">
      <summary>
            Raw data from this tag
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveStream">
      <summary>
            Base class for all WaveStream classes. Derives from stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.Flush">
      <summary>
            Flush does not need to do anything
            See <see cref="M:System.IO.Stream.Flush" /></summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            An alternative way of repositioning.
            See <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /></summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.SetLength(System.Int64)">
      <summary>
            Sets the length of the WaveStream. Not Supported.
            </summary>
      <param name="length">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes to the WaveStream. Not Supported.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.Skip(System.Int32)">
      <summary>
            Moves forward or backwards the specified number of seconds in the stream
            </summary>
      <param name="seconds">Number of seconds to move, can be negative</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveStream.HasData(System.Int32)">
      <summary>
            Whether the WaveStream has non-zero sample data at the current position for the 
            specified count
            </summary>
      <param name="count">Number of bytes to read</param>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.WaveFormat">
      <summary>
            Retrieves the WaveFormat for this stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.CanRead">
      <summary>
            We can read from this stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.CanSeek">
      <summary>
            We can seek within this stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.CanWrite">
      <summary>
            We can't write to this stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.BlockAlign">
      <summary>
            The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.CurrentTime">
      <summary>
            The current position in the stream in Time format
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveStream.TotalTime">
      <summary>
            Total length in real-time of the stream (may be an estimate for compressed files)
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Mp3FileReader">
      <summary>
            Class for reading from MP3 files
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.#ctor(System.String)">
      <summary>Supports opening a MP3 file</summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.#ctor(System.IO.Stream)">
      <summary>
            Opens MP3 from a stream rather than a file
            Will not dispose of this stream itself
            </summary>
      <param name="inputStream">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.TotalSeconds">
      <summary>
            Gets the total length of this file in milliseconds.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.ReadNextFrame">
      <summary>
            Reads the next mp3 frame
            </summary>
      <returns>Next mp3 frame, or null if EOF</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.ReadNextFrame(System.Boolean)">
      <summary>
            Reads the next mp3 frame
            </summary>
      <returns>Next mp3 frame, or null if EOF</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads decompressed PCM data from our MP3 file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3FileReader.Dispose(System.Boolean)">
      <summary>
            Disposes this WaveStream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.Mp3WaveFormat">
      <summary>
            The MP3 wave format (n.b. NOT the output format of this stream - see the WaveFormat property)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.Id3v2Tag">
      <summary>
            ID3v2 tag if present
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.Id3v1Tag">
      <summary>
            ID3v1 tag if present
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.Length">
      <summary>
            This is the length in bytes of data available to be read out from the Read method
            (i.e. the decompressed MP3 length)
            n.b. this may return 0 for files whose length is unknown
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.WaveFormat">
      <summary>
        <see cref="P:Ozeki.Media.Audio.NAudio.WaveStream.WaveFormat" />
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.Position">
      <summary>
        <see cref="P:System.IO.Stream.Position" />
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3FileReader.XingHeader">
      <summary>
            Xing header if present
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Mp3Frame">
      <summary>
            Represents an MP3 Frame
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3Frame.#ctor(System.IO.Stream)">
      <summary>Reads an MP3Frame from a stream</summary>
      <remarks>http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm has some good info
            also see http://www.codeproject.com/KB/audio-video/mpegaudioinfo.aspx
            </remarks>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3Frame.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Reads an MP3Frame from a stream</summary>
      <remarks>http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm 
            has some good info</remarks>
      <exception cref="T:System.IO.EndOfStreamException">Thrown when we reach the end of the stream without reading a valid frame</exception>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3Frame.IsValidHeader(System.Byte[])">
      <summary>checks if the four bytes represent a valid header,
            if they are, will parse the values into local properties
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.SampleRate">
      <summary>
            Sample rate of this frame
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.FrameLength">
      <summary>
            Frame length in bytes
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.BitRate">
      <summary>
            Bit Rate
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.RawData">
      <summary>
            Raw frame data
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.MpegVersion">
      <summary>
            MPEG Version
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.MpegLayer">
      <summary>
            MPEG Layer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.ChannelMode">
      <summary>
            Channel Mode
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3Frame.SampleCount">
      <summary>
            The number of samples in this frame
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFormat">
      <summary>
            Represents a Wave file format
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.#ctor">
      <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
      <param name="sampleRate">Sample Rate</param>
      <param name="channels">Number of channels</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
      <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
      <param name="milliseconds">The milliseconds.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.CreateCustomFormat(Ozeki.Media.Audio.NAudio.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a WaveFormat with custom members
            </summary>
      <param name="tag">The encoding</param>
      <param name="sampleRate">Sample Rate</param>
      <param name="channels">Number of channels</param>
      <param name="averageBytesPerSecond">Average Bytes Per Second</param>
      <param name="blockAlign">Block Align</param>
      <param name="bitsPerSample">Bits Per Sample</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.CreateALawFormat(System.Int32,System.Int32)">
      <summary>
            Creates an A-law wave format
            </summary>
      <param name="sampleRate">Sample Rate</param>
      <param name="channels">Number of Channels</param>
      <returns>Wave Format</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.CreateMuLawFormat(System.Int32,System.Int32)">
      <summary>
            Creates a Mu-law wave format
            </summary>
      <param name="sampleRate">Sample Rate</param>
      <param name="channels">Number of Channels</param>
      <returns>Wave Format</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
      <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
      <param name="sampleRate">sample rate</param>
      <param name="channels">number of channels</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.MarshalFromPtr(System.IntPtr)">
      <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
      <param name="pointer">WaveFormat structure</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.MarshalToPtr(Ozeki.Media.Audio.NAudio.WaveFormat)">
      <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
      <param name="format">WaveFormat</param>
      <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.#ctor(System.IO.BinaryReader)">
      <summary>
            Reads a new WaveFormat object from a stream
            </summary>
      <param name="br">A binary reader that wraps the stream</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.ToString">
      <summary>
            Reports this WaveFormat as a string
            </summary>
      <returns>String describing the wave format</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.FromFormatChunk(System.IO.BinaryReader,System.Int32)">
      <summary>
            Reads in a WaveFormat (with extra data) from a fmt chunk (chunk identifier and
            length should already have been read)
            </summary>
      <param name="br">Binary reader</param>
      <param name="formatChunkLength">Format chunk length</param>
      <returns>A WaveFormatExtraData</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.Equals(System.Object)">
      <summary>
            Compares with another WaveFormat object
            </summary>
      <param name="obj">Object to compare to</param>
      <returns>True if the objects are the same</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.GetHashCode">
      <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
      <returns>A hashcode</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormat.Serialize(System.IO.BinaryWriter)">
      <summary>
            Writes this WaveFormat object to a stream
            </summary>
      <param name="writer">the output stream</param>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.WaveFormatTag">
      <summary>format type</summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.Encoding">
      <summary>
            Returns the encoding type used
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.Channels">
      <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.SampleRate">
      <summary>
            Returns the sample rate (samples per second)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.AverageBytesPerSecond">
      <summary>
            Returns the average number of bytes used per second
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.BlockAlign">
      <summary>
            Returns the block alignment
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.BitsPerSample">
      <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormat.ExtraSize">
      <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.Mp3WaveFormat">
      <summary>
            MP3 WaveFormat, MPEGLAYER3WAVEFORMAT from mmreg.h
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new MP3 WaveFormat
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.ID">
      <summary>
            Wave format ID (wID)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.Flags">
      <summary>
            Padding flags (fdwFlags)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.BlockSize">
      <summary>
            Block Size (nBlockSize)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.FramesPerBlock">
      <summary>
            Frames per block (nFramesPerBlock)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.Mp3WaveFormat.CodecDelay">
      <summary>
            Codec Delay (nCodecDelay)
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.RiffChunk">
      <summary>
            Holds information about a RIFF file chunk
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.RiffChunk.#ctor(System.Int32,System.Int32,System.Int64)">
      <summary>
            Creates a RiffChunk object
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.RiffChunk.Identifier">
      <summary>
            The chunk identifier
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.RiffChunk.IdentifierAsString">
      <summary>
            The chunk identifier converted to a string
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.RiffChunk.Length">
      <summary>
            The chunk length
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.RiffChunk.StreamPosition">
      <summary>
            The stream position this chunk is located at
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFileReader">
      <summary>A read-only stream of WAVE data based on a wave file
            with an associated WaveFormat
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.#ctor(System.String)">
      <summary>Supports opening a WAV file</summary>
      <remarks>The WAV file format is a real mess, but we will only
            support the basic WAV file format which actually covers the vast
            majority of WAV files out there. For more WAV file format information
            visit www.wotsit.org. If you have a WAV file that can't be read by
            this class, email it to the nAudio project and we will probably
            fix this reader to support it
            </remarks>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.#ctor(System.IO.Stream)">
      <summary>
            Creates a Wave File Reader based on an input stream
            </summary>
      <param name="inputStream">The input stream containing a WAV file including header</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.ReadWaveHeader(System.IO.Stream,Ozeki.Media.Audio.NAudio.WaveFormat@,System.Int64@,System.Int32@,System.Collections.Generic.List{Ozeki.Media.Audio.NAudio.RiffChunk})">
      <summary>
            Reads the header part of a WAV file from a stream
            </summary>
      <param name="stream">The stream, positioned at the start of audio data</param>
      <param name="format">The format found</param>
      <param name="dataChunkPosition">The position of the data chunk</param>
      <param name="dataChunkLength">The length of the data chunk</param>
      <param name="chunks">Additional chunks found</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.GetChunkData(Ozeki.Media.Audio.NAudio.RiffChunk)">
      <summary>
            Gets the data for the specified chunk
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.Dispose(System.Boolean)">
      <summary>
            Cleans up the resources associated with this WaveFileReader
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads bytes from the Wave File
            <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /></summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.TryReadFloat(System.Single@)">
      <summary>
            Attempts to read a sample into a float
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileReader.Read(System.Single[][],System.Int32)">
      <summary>
            Reads floats into arrays of channels
            </summary>
      <param name="buffer">buffer</param>
      <param name="samples">number of samples to read</param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileReader.ExtraChunks">
      <summary>
            Gets a list of the additional chunks found in this file
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileReader.WaveFormat">
      <summary>
        <see cref="P:Ozeki.Media.Audio.NAudio.WaveStream.WaveFormat" />
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileReader.Length">
      <summary>
        <see cref="P:Ozeki.Media.Audio.NAudio.WaveStream.WaveFormat" />
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileReader.SampleCount">
      <summary>
            Number of Samples (if possible to calculate)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileReader.Position">
      <summary>
            Position in the wave file
            <see cref="P:System.IO.Stream.Position" /></summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFileWriter">
      <summary>
            This class writes WAV data to a .wav file on disk
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.CreateWaveFile(System.String,Ozeki.Media.Audio.NAudio.WaveStream)">
      <summary>
            Creates a Wave file by reading all the data from a WaveStream
            </summary>
      <param name="filename">The filename to use</param>
      <param name="stream">The source WaveStream</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.#ctor(System.IO.Stream,Ozeki.Media.Audio.NAudio.WaveFormat)">
      <summary>
            WaveFileWriter that actually writes to a stream
            </summary>
      <param name="outStream">Stream to be written to</param>
      <param name="format">Wave format to use</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.#ctor(System.String)">
      <summary>
            Creates a new WaveFileWriter, simply overwriting the samples on an existing file
            </summary>
      <param name="filename">The filename</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.#ctor(System.String,Ozeki.Media.Audio.NAudio.WaveFormat)">
      <summary>
            Creates a new WaveFileWriter
            </summary>
      <param name="filename">The filename to write to</param>
      <param name="format">The Wave Format of the output data</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.WriteData(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes bytes to the WaveFile (assumes they are already in the correct format)
            </summary>
      <param name="data">the buffer containing the wave data</param>
      <param name="offset">the offset from which to start writing</param>
      <param name="count">the number of bytes to write</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.WriteSample(System.Single)">
      <summary>
            Writes a single sample to the Wave file
            </summary>
      <param name="sample">the sample to write (assumed floating point with 1.0f as max value)</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
      <summary>
            Writes 16 bit samples to the Wave file
            </summary>
      <param name="data">The buffer containing the wave data</param>
      <param name="offset">The offset from which to start writing</param>
      <param name="count">The number of 16 bit samples to write</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.WriteData(System.Single[][],System.Int32,System.Int32)">
      <summary>
            Writes float samples to the Wave file
            </summary>
      <param name="data">The buffer containing the wave data</param>
      <param name="offset">The offset from which to start writing</param>
      <param name="count">The number of float samples to write</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.Flush">
      <summary>
            Ensures data is written to disk
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.Close">
      <summary>
            Closes this WaveFile (calls <see>Dispose</see>)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.Dispose">
      <summary>
            Closes this WaveFile
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.Dispose(System.Boolean)">
      <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
      <param name="disposing">True if called from <see>Dispose</see></param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.UpdateHeader(System.IO.BinaryWriter)">
      <summary>
            Updates the header with file size information
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFileWriter.Finalize">
      <summary>
            Finaliser - should only be called if the user forgot to close this WaveFileWriter
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileWriter.Filename">
      <summary>
            The wave file name
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileWriter.Length">
      <summary>
            Number of bytes of audio
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFileWriter.WaveFormat">
      <summary>
            WaveFormat of this wave file
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFilter">
      <summary>
            Summary description for WaveFilter.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFilter.StructureSize">
      <summary>
            cbStruct
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFilter.FilterTag">
      <summary>
            dwFilterTag
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFilter.Filter">
      <summary>
            fdwFilter
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFilter.Reserved">
      <summary>
            reserved
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream">
      <summary>
            WaveStream that passes through an ACM Codec
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.#ctor(Ozeki.Media.Audio.NAudio.WaveFormat,Ozeki.Media.Audio.NAudio.WaveStream)">
      <summary>
            Create a new WaveFormat conversion stream
            </summary>
      <param name="targetFormat">Desired output format</param>
      <param name="sourceStream">Source stream</param>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.SourceToDest(System.Int32)">
      <summary>
            Converts source bytes to destination bytes
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.DestToSource(System.Int32)">
      <summary>
            Converts destination bytes to source bytes
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads bytes from this stream
            </summary>
      <param name="array">Buffer to read into</param>
      <param name="offset">Offset in array to read into</param>
      <param name="count">Number of bytes to read</param>
      <returns>Number of bytes read</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.Dispose(System.Boolean)">
      <summary>
            Disposes this stream
            </summary>
      <param name="disposing">true if the user called this</param>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.Length">
      <summary>
            Returns the stream length
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.Position">
      <summary>
            Gets or sets the current position in the stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.WaveFormat">
      <summary>
            Gets the WaveFormat of this stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.WaveFormatConversionStream.BlockAlign">
      <summary>
            Gets the block alignment for this stream
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.WaveFormatEncoding">
      <summary>
            Summary description for WaveFormatEncoding.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Unknown">
      <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Pcm">
      <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Adpcm">
      <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.IeeeFloat">
      <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vselp">
      <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.IbmCvsd">
      <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.ALaw">
      <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.MuLaw">
      <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Dts">
      <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Drm">
      <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.OkiAdpcm">
      <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DviAdpcm">
      <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.ImaAdpcm">
      <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.MediaspaceAdpcm">
      <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.SierraAdpcm">
      <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.G723Adpcm">
      <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DigiStd">
      <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DigiFix">
      <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DialogicOkiAdpcm">
      <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.MediaVisionAdpcm">
      <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.CUCodec">
      <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.YamahaAdpcm">
      <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.SonarC">
      <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DspGroupTruespeech">
      <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.EchoSpeechCorporation1">
      <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.AudioFileAf36">
      <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Aptx">
      <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.AudioFileAf10">
      <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Prosody1612">
      <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Lrc">
      <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DolbyAc2">
      <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Gsm610">
      <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.MsnAudio">
      <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.AntexAdpcme">
      <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.ControlResVqlpc">
      <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DigiReal">
      <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.DigiAdpcm">
      <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.ControlResCr10">
      <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MSG723">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Mpeg">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_RT24">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_PAC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.MpegLayer3">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G729A">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SBC24">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_PACKED">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Gsm">
      <summary>WAVE_FORMAT_GSM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.G729">
      <summary>WAVE_FORMAT_G729</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.G723">
      <summary>WAVE_FORMAT_G723</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Acelp">
      <summary>WAVE_FORMAT_ACELP</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_IRAT">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO2">
      <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO3">
      <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_CS2">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_TPC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DVM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Extensible">
      <summary>WAVE_FORMAT_EXTENSIBLE</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis1">
      <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis2">
      <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis3">
      <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis1P">
      <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis2P">
      <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.NAudio.WaveFormatEncoding.Vorbis3P">
      <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.WaveFormatExtraData.#ctor">
      <summary>
            parameterless constructor for marshalling
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.NAudio.XingHeader">
      <summary>
            Represents a Xing VBR header
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.XingHeader.LoadXingHeader(Ozeki.Media.Audio.NAudio.Mp3Frame)">
      <summary>
            Load Xing Header
            </summary>
      <param name="frame">Frame</param>
      <returns>Xing Header</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.NAudio.XingHeader.#ctor">
      <summary>
            Sees if a frame contains a Xing header
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.XingHeader.Frames">
      <summary>
            Number of frames
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.XingHeader.Bytes">
      <summary>
            Number of bytes
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.XingHeader.VbrScale">
      <summary>
            VBR Scale property
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.NAudio.XingHeader.Mp3Frame">
      <summary>
            The MP3 frame
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Streams.CircularBufferStream">
      <summary>
            A very basic circular buffer implementation
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.CircularBufferStream.#ctor(System.Int32)">
      <summary>
            Create a new circular buffer
            </summary>
      <param name="size">Max buffer size in bytes</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.CircularBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Write data to the buffer
            </summary>
      <param name="data">Data to write</param>
      <param name="offset">Offset into data</param>
      <param name="count">Number of bytes to write</param>
      <returns>number of bytes written</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read from the buffer
            </summary>
      <param name="data">Buffer to read into</param>
      <param name="offset">Offset into read buffer</param>
      <param name="count">Bytes to read</param>
      <returns>Number of bytes actually read</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.CircularBufferStream.Reset">
      <summary>
            Resets the buffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.CircularBufferStream.Advance(System.Int32)">
      <summary>
            Advances the buffer, discarding bytes
            </summary>
      <param name="count">Bytes to advance</param>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.CircularBufferStream.MaxLength">
      <summary>
            Maximum length of this circular buffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.CircularBufferStream.Count">
      <summary>
            Number of bytes currently stored in the circular buffer
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Streams.WaveFileStream">
      <summary>
            Represents the base class from which the audio file reader and writer classes derive.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Streams.WaveFileStream.Stream">
      <summary>
            The underlying stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Streams.WaveFileStream" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.Close">
      <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.Flush">
      <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">he zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current stream.
            </summary>
      <param name="offset">A byte offset relative to the origin parameter.</param>
      <param name="origin">The reference point used to obtain the new position.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.SetLength(System.Int64)">
      <summary>
            Sets the length of the current stream.
            </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.Format">
      <summary>
            Gets the WaveFormat of the wave stream.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.CanSeek">
      <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.Length">
      <summary>
            Gets the length in bytes of the stream.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileStream.Position">
      <summary>
            Gets or sets the position within the current stream.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Streams.Mp3FileReader">
      <summary>
            Class for reading from MP3 files
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.#ctor(System.String)">
      <summary>Supports opening a MP3 file</summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.#ctor(System.IO.Stream)">
      <summary>
            Opens MP3 from a stream rather than a file
            Will not dispose of this stream itself
            </summary>
      <param name="inputStream">
      </param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.TotalSeconds">
      <summary>
            Gets the total length of this file in milliseconds.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.ReadNextFrame">
      <summary>
            Reads the next mp3 frame
            </summary>
      <returns>Next mp3 frame, or null if EOF</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.ReadNextFrame(System.Boolean)">
      <summary>
            Reads the next mp3 frame
            </summary>
      <returns>Next mp3 frame, or null if EOF</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads decompressed PCM data from our MP3 file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.Mp3FileReader.Dispose(System.Boolean)">
      <summary>
            Disposes this WaveStream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.Mp3WaveFormat">
      <summary>
            The MP3 wave format (n.b. NOT the output format of this stream - see the WaveFormat property)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.Id3v2Tag">
      <summary>
            ID3v2 tag if present
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.Id3v1Tag">
      <summary>
            ID3v1 tag if present
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.Length">
      <summary>
            This is the length in bytes of data available to be read out from the Read method
            (i.e. the decompressed MP3 length)
            n.b. this may return 0 for files whose length is unknown
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.Position">
      <summary>
        <see cref="P:System.IO.Stream.Position" />
      </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.Mp3FileReader.XingHeader">
      <summary>
            Xing header if present
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.OldWaveOutPlayer.Volume">
      <summary>
            Volume for this device. 100.0 is full scale
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Streams.WaveFileReader">
      <summary>
            Can read audio data from a .wav file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Streams.WaveFileReader" /> class. 
            </summary>
      <param name="path">The path of the audio file</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Streams.WaveFileReader" /> class.
            </summary>
      <param name="inputStream">The .wav stream.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileReader.ReadWaveHeader(System.IO.Stream,Ozeki.Media.Audio.Waveform.Formats.WaveFormat@,System.Int64@,System.Int32@)">
      <summary>
            Reads the header part of a WAV file from a stream
            </summary>
      <param name="stream">The stream, positioned at the start of audio data</param>
      <param name="format">The format found</param>
      <param name="dataChunkPosition">The position of the data chunk</param>
      <param name="dataChunkLength">The length of the data chunk</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
      <param name="array">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileReader.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileReader.Length">
      <summary>
            Gets the length of the audio data (and not the length of the Stream).
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileReader.SampleCount">
      <summary>
            Gets the number of samples
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Streams.WaveFileReader.Position">
      <summary>
            Gets or sets the position of the audio data within the stream.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Streams.WaveFileWriter">
      <summary>
            Writes audio data to a .wav file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileWriter.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Streams.WaveFileWriter" /> class. 
            </summary>
      <param name="format">The format of the audio.</param>
      <param name="stream">The output stream.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileWriter.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Audio.Streams.WaveFileWriter" /> class. 
            </summary>
      <param name="format">The format of the audio.</param>
      <param name="path">The path of the wave file.</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileWriter.SetWaveHeader">
      <summary>
            Writes the wave header to the stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Streams.WaveFileWriter.Close">
      <summary>
            Closes and saves the audio file. 
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.SupportedWaveFormat">
      <summary>
            Defines constants for the supported wave formats for WaveIn and WaveOut capabilities
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_1M08">
      <summary>
            11.025 kHz, Mono,   8-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_1S08">
      <summary>
            11.025 kHz, Stereo, 8-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_1M16">
      <summary>
            11.025 kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_1S16">
      <summary>
            11.025 kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_2M08">
      <summary>
            22.05  kHz, Mono,   8-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_2S08">
      <summary>
            22.05  kHz, Stereo, 8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_2M16">
      <summary>
            22.05  kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_2S16">
      <summary>
            22.05  kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_4M08">
      <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_4S08">
      <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_4M16">
      <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_4S16">
      <summary>
             44.1   kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_44M08">
      <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_44S08">
      <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_44M16">
      <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_44S16">
      <summary>
            44.1   kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_48M08">
      <summary>
            48     kHz, Mono,   8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_48S08">
      <summary>
             48     kHz, Stereo, 8-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_48M16">
      <summary>
            48     kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_48S16">
      <summary>
            48     kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_96M08">
      <summary>
            96     kHz, Mono,   8-bit 
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_96S08">
      <summary>
            96     kHz, Stereo, 8-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_96M16">
      <summary>
            96     kHz, Mono,   16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.SupportedWaveFormat.WAVE_FORMAT_96S16">
      <summary>
            96     kHz, Stereo, 16-bit
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveHeaderFlags.BeginLoop">
      <summary>
            This buffer is the first buffer in a loop. This flag is used only with output buffers. (WHDR_BEGINLOOP)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveHeaderFlags.Done">
      <summary>
            Set by the device driver to indicate that it is finished with the buffer and is returning it to the application. (WHDR_DONE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveHeaderFlags.EndLoop">
      <summary>
            This buffer is the last buffer in a loop.  This flag is used only with output buffers. (WHDR_ENDLOOP)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveHeaderFlags.InQueue">
      <summary>
            Set by Windows to indicate that the buffer is queued for playback. (WHDR_INQUEUE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveHeaderFlags.Prepared">
      <summary>
            Set by Windows to indicate that the buffer has been prepared with the waveInPrepareHeader or waveOutPrepareHeader function. (WHDR_PREPARED)
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveFormats">
      <summary>
            Defines constants for the available wave formats.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Unknown">
      <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Pcm">
      <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Adpcm">
      <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.IeeeFloat">
      <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vselp">
      <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.IbmCvsd">
      <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.ALaw">
      <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.MuLaw">
      <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Dts">
      <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Drm">
      <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.OkiAdpcm">
      <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DviAdpcm">
      <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.ImaAdpcm">
      <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.MediaspaceAdpcm">
      <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.SierraAdpcm">
      <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.G723Adpcm">
      <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DigiStd">
      <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DigiFix">
      <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DialogicOkiAdpcm">
      <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.MediaVisionAdpcm">
      <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.CUCodec">
      <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.YamahaAdpcm">
      <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.SonarC">
      <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DspGroupTruespeech">
      <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.EchoSpeechCorporation1">
      <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.AudioFileAf36">
      <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Aptx">
      <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.AudioFileAf10">
      <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Prosody1612">
      <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Lrc">
      <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DolbyAc2">
      <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Gsm610">
      <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.MsnAudio">
      <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.AntexAdpcme">
      <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.ControlResVqlpc">
      <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DigiReal">
      <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.DigiAdpcm">
      <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.ControlResCr10">
      <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatNmsVbxadpcm">
      <summary>Natural MicroSystems </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCsImaadpcm">
      <summary>Crystal Semiconductor IMA ADPCM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatEchosc3">
      <summary>Echo Speech Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatRockwellAdpcm">
      <summary>Rockwell International </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatRockwellDigitalk">
      <summary>Rockwell International </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatXebec">
      <summary>Xebec Multimedia Solutions Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG721Adpcm">
      <summary>Antex Electronics Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG728Celp">
      <summary>Antex Electronics Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMsg723">
      <summary>Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Mpeg">
      <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatRt24">
      <summary>InSoft, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatPac">
      <summary>InSoft, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.MpegLayer3">
      <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatLucentG723">
      <summary>Lucent Technologies </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCirrus">
      <summary>Cirrus Logic </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatEspcm">
      <summary>ESS Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxware">
      <summary>Voxware Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCanopusAtrac">
      <summary>Canopus, co., Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG726Adpcm">
      <summary>APICOM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG722Adpcm">
      <summary>APICOM </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDsatDisplay">
      <summary>Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareByteAligned">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareAc8">
      <summary>Voxware Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareAc10">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareAc16">
      <summary>Voxware Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareAc20">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareRt24">
      <summary>Voxware Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareRt29">
      <summary>Voxware Inc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareRt29Hw">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareVr12">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareVr18">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareTq40">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSoftsound">
      <summary>Softsound, Ltd. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVoxwareTq60">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMsrt24">
      <summary>Microsoft Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG729A">
      <summary>AT&amp;T Labs, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMviMvi2">
      <summary>Motion Pixels</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDfG726">
      <summary>DataFusion Systems (Pty) (Ltd) </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDfGsm610">
      <summary>DataFusion Systems (Pty) (Ltd) </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatIsiaudio">
      <summary>Iterated Systems, Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOnlive">
      <summary>OnLive! Technologies, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSbc24">
      <summary>Siemens Business Communications Sys</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDolbyAc3Spdif">
      <summary>Sonic Foundry </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMediasonicG723">
      <summary>MediaSonic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatProsody8Kbps">
      <summary>Aculab plc </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatZyxelAdpcm">
      <summary>ZyXEL Communications, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatPhilipsLpcbb">
      <summary> Philips Speech Processing</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatPacked">
      <summary>Studer Professional Audio AG </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMaldenPhonytalk">
      <summary>Malden Electronics Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Gsm">
      <summary>WAVE_FORMAT_GSM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.G729">
      <summary>WAVE_FORMAT_G729</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.G723">
      <summary>WAVE_FORMAT_G723</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Acelp">
      <summary>WAVE_FORMAT_ACELP</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatRhetorexAdpcm">
      <summary>Rhetorex Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatIrat">
      <summary>BeCubed Software Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVivoG723">
      <summary>Vivo Software </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVivoSiren">
      <summary>Vivo Software </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDigitalG723">
      <summary>Digital Equipment Corporation </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSanyoLdAdpcm">
      <summary>Sanyo Electric Co., Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabAceplnet">
      <summary>Sipro Lab Telecom Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabAcelp4800">
      <summary>Sipro Lab Telecom Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabAcelp8V3">
      <summary>Sipro Lab Telecom Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabG729">
      <summary>Sipro Lab Telecom Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabG729A">
      <summary>Sipro Lab Telecom Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSiprolabKelvin">
      <summary>Sipro Lab Telecom Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatG726ADPCM">
      <summary>Dictaphone Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatQualcommPurevoice">
      <summary>Qualcomm, Inc. </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatQualcommHalfrate">
      <summary>Qualcomm, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatTubgsm">
      <summary>Ring Zero Systems, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatMsaudio1">
      <summary>Microsoft Corporation 	</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatWmaudio2">
      <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatWmaudio3">
      <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatUnisysNapADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatUnisysNapUlaw">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatUnisysNapAlaw">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatUnisysNap16K">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCreativeADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCreativeFastspeech8">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCreativeFastspeech10">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatUherADPCM">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatQuarterdeck">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatIlinkVc">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatRawSport">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatEsstAc3">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatIpiHsx">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatIpiRpelp">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatCs2">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSonyScx">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatFmTownsSnd">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatBtvDigital">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatQdesignMusic">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatVmeVmpcm">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatTpc">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOligsm">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOliadpcm">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOlicelp">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOlisbc">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatOliopr">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatLhCodec">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatNorris">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatSoundspaceMusicompress">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDvm">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Extensible">
      <summary>WAVE_FORMAT_EXTENSIBLE</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.WaveFormatDevelopment">
      <summary>
      </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis1">
      <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis2">
      <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis3">
      <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis1P">
      <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis2P">
      <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveFormats.Vorbis3P">
      <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveInOpen">
      <summary>
            WIM_OPEN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveInClose">
      <summary>
            WIM_CLOSE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveInData">
      <summary>
            WIM_DATA
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveOutClose">
      <summary>
            WOM_CLOSE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveOutDone">
      <summary>
            WOM_DONE
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveMessage.WaveOutOpen">
      <summary>
            WOM_OPEN
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveCallbackStrategy.FunctionCallback">
      <summary>
            Use a function
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveCallbackStrategy.NewWindow">
      <summary>
            Create a new window (should only be done if on GUI thread)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveCallbackStrategy.ExistingWindow">
      <summary>
            Use an existing window handle
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveCallbackStrategy.Event">
      <summary>
            Use an event handle
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.CALLBACK_NULL">
      <summary>
            No callback mechanism. This is the default setting.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.CALLBACK_FUNCTION">
      <summary>
            The dwCallback parameter is a callback procedure address.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.CALLBACK_EVENT">
      <summary>
            The dwCallback parameter is an event handle.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.CALLBACK_WINDOW">
      <summary>
            The dwCallback parameter is a window handle.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.CALLBACK_THREAD">
      <summary>
            The dwCallback parameter is a thread identifier.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.WAVE_FORMAT_DIRECT">
      <summary>
            If this flag is specified, the ACM driver does not perform conversions on the audio data.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.WAVE_FORMAT_QUERY">
      <summary>
            If this flag is specified, waveOutOpen queries the device to determine if it supports the given format, but the device is not actually opened.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveInOutOpenFlags.WAVE_MAPPED">
      <summary>
            f this flag is specified, the uDeviceID parameter specifies a waveform-audio device to be mapped to by the wave mapper.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.Pitch">
      <summary>
            Supports pitch control. (WAVECAPS_PITCH)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.PlaybackRate">
      <summary>
            Supports playback rate control. (WAVECAPS_PLAYBACKRATE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.Volume">
      <summary>supports volume control (WAVECAPS_VOLUME)</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.LRVolume">
      <summary>
            Supports separate left and right volume control. (WAVECAPS_LRVOLUME)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.Sync">
      <summary>
            The driver is synchronous and will block while playing a buffer. (WAVECAPS_SYNC)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOutSupport.SampleAccurate">
      <summary>
            Returns sample-accurate position information. (WAVECAPS_SAMPLEACCURATE)
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Microsoft">
      <summary>Microsoft Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Creative">
      <summary>Creative Labs, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Mediavision">
      <summary>Media Vision, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Fujitsu">
      <summary>Fujitsu Corp.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Artisoft">
      <summary>Artisoft, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.TurtleBeach">
      <summary>Turtle Beach, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ibm">
      <summary>IBM Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Vocaltec">
      <summary>Vocaltec LTD.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Roland">
      <summary>Roland</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.DspSolutions">
      <summary>DSP Solutions, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Nec">
      <summary>NEC</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ati">
      <summary>ATI</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Wanglabs">
      <summary>Wang Laboratories, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Tandy">
      <summary>Tandy Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Voyetra">
      <summary>Voyetra</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Antex">
      <summary>Antex Electronics Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.IclPS">
      <summary>ICL Personal Systems</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Intel">
      <summary>Intel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Gravis">
      <summary>Advanced Gravis</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Val">
      <summary>Video Associates Labs, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Interactive">
      <summary>InterActive Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Yamaha">
      <summary>Yamaha Corporation of America</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Everex">
      <summary>Everex Systems, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Echo">
      <summary>Echo Speech Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Sierra">
      <summary>Sierra Semiconductor Corp</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Cat">
      <summary>Computer Aided Technologies</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Apps">
      <summary>APPS Software International</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.DspGroup">
      <summary>DSP Group, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Melabs">
      <summary>microEngineering Labs</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.ComputerFriends">
      <summary>Computer Friends, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ess">
      <summary>ESS Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Audiofile">
      <summary>Audio, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Motorola">
      <summary>Motorola, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Canopus">
      <summary>Canopus, co., Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Epson">
      <summary>Seiko Epson Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Truevision">
      <summary>Truevision</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Aztech">
      <summary>Aztech Labs, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Videologic">
      <summary>Videologic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Scalacs">
      <summary>SCALACS</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Korg">
      <summary>Korg Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Apt">
      <summary>Audio Processing Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ics">
      <summary>Integrated Circuit Systems, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Iteratedsys">
      <summary>Iterated Systems, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Metheus">
      <summary>Metheus</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Logitech">
      <summary>Logitech, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Winnov">
      <summary>Winnov, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ncr">
      <summary>NCR Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Exan">
      <summary>EXAN</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ast">
      <summary>AST Research Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Willowpond">
      <summary>Willow Pond Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Sonicfoundry">
      <summary>Sonic Foundry</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Vitec">
      <summary>Vitec Multimedia</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Moscom">
      <summary>MOSCOM Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Siliconsoft">
      <summary>Silicon Soft, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Supermac">
      <summary>Supermac</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Audiopt">
      <summary>Audio Processing Technology</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Speechcomp">
      <summary>Speech Compression</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ahead">
      <summary>Ahead, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Dolby">
      <summary>Dolby Laboratories</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Oki">
      <summary>OKI</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Auravision">
      <summary>AuraVision Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Olivetti">
      <summary>Ing C. Olivetti &amp; C., S.p.A.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Iomagic">
      <summary>I/O Magic Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Matsushita">
      <summary>Matsushita Electric Industrial Co., LTD.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Controlres">
      <summary>Control Resources Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Xebec">
      <summary>Xebec Multimedia Solutions Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Newmedia">
      <summary>New Media Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Nms">
      <summary>Natural MicroSystems</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Lyrrus">
      <summary>Lyrrus Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Compusic">
      <summary>Compusic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Opti">
      <summary>OPTi Computers Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Adlacc">
      <summary>Adlib Accessories Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Compaq">
      <summary>Compaq Computer Corp.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Dialogic">
      <summary>Dialogic Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Insoft">
      <summary>InSoft, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Mptus">
      <summary>M.P. Technologies, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Weitek">
      <summary>Weitek</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.LernoutAndHauspie">
      <summary>Lernout &amp; Hauspie</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Qciar">
      <summary>Quanta Computer Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Apple">
      <summary>Apple Computer, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Digital">
      <summary>Digital Equipment Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Motu">
      <summary>Mark of the Unicorn</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Workbit">
      <summary>Workbit Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ositech">
      <summary>Ositech Communications Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Miro">
      <summary>miro Computer Products AG</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Cirruslogic">
      <summary>Cirrus Logic</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Isolution">
      <summary>ISOLUTION  B.V.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Horizons">
      <summary>Horizons Technology, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Concepts">
      <summary>Computer Concepts Ltd</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Vtg">
      <summary>Voice Technologies Group, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Radius">
      <summary>Radius</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Rockwell">
      <summary>Rockwell International</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Xyz">
      <summary>Co. XYZ for testing</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Opcode">
      <summary>Opcode Systems</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Voxware">
      <summary>Voxware Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.NorthernTelecom">
      <summary>Northern Telecom Limited</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Apicom">
      <summary>APICOM</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Grande">
      <summary>Grande Software</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Addx">
      <summary>ADDX</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Wildcat">
      <summary>Wildcat Canyon Software</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Rhetorex">
      <summary>Rhetorex Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Brooktree">
      <summary>Brooktree Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ensoniq">
      <summary>ENSONIQ Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Fast">
      <summary>FAST Multimedia AG</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Nvidia">
      <summary>NVidia Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Oksori">
      <summary>OKSORI Co., Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Diacoustics">
      <summary>DiAcoustics, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Gulbransen">
      <summary>Gulbransen, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.KayElemetrics">
      <summary>Kay Elemetrics, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Crystal">
      <summary>Crystal Semiconductor Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.SplashStudios">
      <summary>Splash Studios</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Quarterdeck">
      <summary>Quarterdeck Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Tdk">
      <summary>TDK Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.DigitalAudioLabs">
      <summary>Digital Audio Labs, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Seersys">
      <summary>Seer Systems, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Picturetel">
      <summary>PictureTel Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.AttMicroelectronics">
      <summary>AT&amp;T Microelectronics</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Osprey">
      <summary>Osprey Technologies, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Mediatrix">
      <summary>Mediatrix Peripherals</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Soundesigns">
      <summary>SounDesignS M.C.S. Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Aldigital">
      <summary>A.L. Digital Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.SpectrumSignalProcessing">
      <summary>Spectrum Signal Processing, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ecs">
      <summary>Electronic Courseware Systems, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Amd">
      <summary>AMD</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Coredynamics">
      <summary>Core Dynamics</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Canam">
      <summary>CANAM Computers</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Softsound">
      <summary>Softsound, Ltd.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Norris">
      <summary>Norris Communications, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Ddd">
      <summary>Danka Data Devices</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Euphonics">
      <summary>EuPhonics</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Precept">
      <summary>Precept Software, Inc.</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.CrystalNet">
      <summary>Crystal Net Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Chromatic">
      <summary>Chromatic Research, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Voiceinfo">
      <summary>Voice Information Systems, Inc</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Viennasys">
      <summary>Vienna Systems</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Connectix">
      <summary>Connectix Corporation</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Gadgetlabs">
      <summary>Gadget Labs LLC</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Frontier">
      <summary>Frontier Design Group LLC</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Viona">
      <summary>Viona Development GmbH</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Casio">
      <summary>Casio Computer Co., LTD</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.Diamondmm">
      <summary>Diamond Multimedia</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.S3">
      <summary>S3</summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Manufacturers.FraunhoferIis">
      <summary>Fraunhofer</summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.Formats.WaveFormat">
      <summary>
            The WaveFormat structure defines the format of waveform-audio data.
            Only format information common to all waveform-audio data formats is included in this structure.
            For formats that require additional information, this structure is included as the first member in another structure, along with the additional information.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.#ctor">
      <summary>
            Creates a new PCM format with the default values (8 kHz, 16 bit, mono)
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new PCM format with the specified sample rate, bits per sample and channels
            </summary>
      <param name="sampleRate">Sample rate</param>
      <param name="bitRate">Bits per sample</param>
      <param name="channels">Channels (Mono = 1, Stereo = 2)</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.MarshalFromPtr(System.IntPtr)">
      <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
      <param name="pointer">WaveFormat structure</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.MarshalToPtr(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
      <param name="format">WaveFormat</param>
      <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
      <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
      <param name="milliseconds">The milliseconds.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.ReadWaveFormat(System.IO.BinaryReader,System.Int32)">
      <summary>
            Read a wave format with a specific binary reader and chunk length
            </summary>
      <param name="br">The binary reader for the wave</param>
      <param name="formatChunkLength">The format chunk length of teh wave</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.Equals(System.Object)">
      <summary>
            Compares with another WaveFormat object
            </summary>
      <param name="obj">Object to compare to</param>
      <returns>True if the objects are the same</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.GetHashCode">
      <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
      <returns>A hashcode</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.WaveFormatTag">
      <summary>
            Gets or sets the Waveform-audio format type. (wFormatTag)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.Channels">
      <summary>
            Gets or sets the number of channels in the waveform-audio data. (Mono = 1, Stereo = 2). (nChannels)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.SampleRate">
      <summary>
            Gets or sets the sample rate, in samples per second (hertz). (nSamplesPerSec)
            </summary>
      <remarks>
            If WaveFormatTag is PCM, then common values are 8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz.
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.AverageBytesPerSec">
      <summary>
            Gets or sets the required average data-transfer rate, in bytes per second, for the format tag. (nAvgBytesPerSec)
            </summary>
      <remarks>
            If WaveFormatTag is PCM, this should be equal to the product of SampleRate and BlockAlign.
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.BlockAlign">
      <summary>
            Gets or sets Block alignment, in bytes. (nBlockAlign)
            </summary>
      <remarks>
            The block alignment is the minimum atomic unit of data for the WaveFormatTag format type. 
            f WaveFormatTag is PCM or EXTENSIBLE, this must be equal to the product of Channels and BitsPerSample divided by 8 (bits per byte).
            For non-PCM formats, this member must be computed according to the manufacturer's specification of the format tag.
            </remarks>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.BitsPerSample">
      <summary>
            Gets or sets the bits per sample for the WaveFormatTag format type. (wBitsPerSample)
            If WaveFormatTag is PCM, then this should be equal to 8 or 16.
            For non-PCM formats, this member must be set according to the manufacturer's specification of the format tag.
            If WaveFormatTag is EXTENSIBLE, this value can be any integer multiple of 8 and represents the container size, not necessarily the sample size;
            for example, a 20-bit sample size is in a 24-bit container. Some compression schemes cannot define a value for BitsPerSample, so this member can be 0.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.Formats.WaveFormat.CbSize">
      <summary>
            Gets or sets the size of extra format information appended to the end of the WAVEFORMATEX structure in bytes. (cbSize)
            This information can be used by non-PCM formats to store extra attributes for the WaveFormatTag.
            If no extra information is required by the WaveFormatTag, this member must be set to 0.
            For PCM formats, this member is ignored. When this structure is included in a WAVEFORMATEXTENSIBLE structure, this value must be at least 22.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible">
      <summary>
            The WaveFormatExtensible structure defines the format of waveform-audio data for formats having more than two channels.
            </summary>
      <remarks>
            http://www.microsoft.com/whdc/device/audio/multichaud.mspx
            http://msdn.microsoft.com/en-us/library/dd757721%28v=VS.85%29.aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible.wValidBitsPerSample">
      <summary>
            Number of bits of precision in the signal. Usually equal to WAVEFORMATEX.wBitsPerSample or wSamplesPerBlock if wBitsPerSample==0
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible.dwChannelMask">
      <summary>
            Bitmask specifying the assignment of channels in the stream to speaker positions.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible.subFormat">
      <summary>
            Subformat of the data, such as KSDATAFORMAT_SUBTYPE_PCM. The subformat information is similar to that provided by the tag in the WAVEFORMATEX structure's wFormatTag member.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible.#ctor">
      <summary>
            Parameterless constructor for marshalling
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.Formats.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveHeader">
      <summary>
            The WaveHeader structure defines the header used to identify a waveform-audio buffer. (WAVEHDR)
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/dd743837%28VS.85%29.aspx
            </remarks>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.DataBuffer">
      <summary>
            Gets or sets the pointer to the waveform buffer. (lpData)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.BufferLength">
      <summary>
            Gets or sets the length of the buffer in bytes. (dwBufferLength)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.BytesRecorded">
      <summary>
            When the header is used in input, specifies how much data is in the buffer. (dwBytesRecorded)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.UserData">
      <summary>
            Gets os sets the User Data. (dwUser)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.Flags">
      <summary>
            A bitwise OR of zero of more flags. (dwFlags)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.Loops">
      <summary>
            Gets os sets the number of times to play the loop. This member is used only with output buffers. (dwLoops)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.Next">
      <summary>
            Reserved (lpNext)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveHeader.Reserved">
      <summary>
            Reserved
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.#ctor(System.IntPtr,System.Int32)">
      <summary>
            creates a new wavebuffer
            </summary>
      <param name="waveInHandle">WaveIn device to write to</param>
      <param name="bufferSize">Buffer size in bytes</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Reuse">
      <summary>
            Place this buffer back to record more audio
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Finalize">
      <summary>
            Finalizer for this wave buffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Dispose">
      <summary>
            Releases resources held by this WaveBuffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Dispose(System.Boolean)">
      <summary>
            Releases resources held by this WaveBuffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Data">
      <summary>
            Provides access to the actual record buffer (for reading only)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.Done">
      <summary>
            Indicates whether the Done flag is set on this buffer
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.BytesRecorded">
      <summary>
            Number of bytes recorded
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInBuffer.BufferSize">
      <summary>
            The buffer size in bytes
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS">
      <summary>
            The WAVEINCAPS structure describes the capabilities of a waveform-audio input device.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/ms713726(VS.85).aspx
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.wMid">
      <summary>
            Gets or sets the manufacturer identifier for the device driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.wPid">
      <summary>
            Gets or sets the product identifier.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.vDriverVersion">
      <summary>
            Gets or sets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.szPname">
      <summary>
            Gets or sets the product name in a null-terminated string.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.dwFormats">
      <summary>
            Gets or sets the standard formats that are supported.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.wChannels">
      <summary>
            Gets or sets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveIn.WAVEINCAPS.wReserved1">
      <summary>
            Padding
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDataEventArgs">
      <summary>
            Provides data for the IWaveIn.DataAvailable event.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDataEventArgs.#ctor(System.Byte[],System.Int32)">
      <summary>
            Creates a new instance of the WaveInEventArgs class
            </summary>
      <param name="buffer">Buffer containing the recorded data</param>
      <param name="bytes">The number of bytes in the buffer.</param>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDataEventArgs.Buffer">
      <summary>
            Gets the buffer containing the recorded data.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveIn.WaveInDataEventArgs.BytesRecorded">
      <summary>
            Gets the number of the recorded bytes.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer">
      <summary>
            A buffer of Wave samples for streaming to a Wave Output device
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.#ctor(System.IntPtr,System.Int32,System.IO.Stream,System.Object,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            creates a new wavebuffer
            </summary>
      <param name="hWaveOut">WaveOut device to write to</param>
      <param name="bufferSize">Buffer size in bytes</param>
      <param name="bufferFillStream">Stream to provide more data</param>
      <param name="waveOutLock">Lock to protect WaveOut API's from being called on &gt;1 thread</param>
      <param name="waveFormat">The format of the audio</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.Finalize">
      <summary>
            Finalizer for this wave buffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.Dispose">
      <summary>
            Releases resources held by this WaveBuffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.Dispose(System.Boolean)">
      <summary>
            Releases resources held by this WaveBuffer
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.OnDone">
      <summary>
            This is called by the WAVE callback and should be used to refill the buffer
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.InQueue">
      <summary>
            Gets the value indicating whether the header's "In Queue" flag is set or not
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WaveOutBuffer.BufferSize">
      <summary>
            Gets the size of the buffer in bytes
            </summary>
    </member>
    <member name="T:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS">
      <summary>
            The WAVEOUTCAPS structure describes the capabilities of a waveform-audio output device.
            </summary>
      <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/multimed/htm/_win32_waveoutcaps_str.asp
            </remarks>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.wMid">
      <summary>
            Gets or sets the manufacturer identifier for the device driver.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.wPid">
      <summary>
            Gets or sets the product identifier.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.vDriverVersion">
      <summary>
            Gets or sets the version number of the device driver.
            The high-order byte is the major version number, and the low-order byte is the minor version number.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.szPname">
      <summary>
            Gets or sets the product name in a null-terminated string.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.dwFormats">
      <summary>
            Gets or sets the standard formats that are supported.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.wChannels">
      <summary>
            Gets or sets the number specifying whether the device supports mono (1) or stereo (2) input.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.wReserved1">
      <summary>
            Packing
            </summary>
    </member>
    <member name="F:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.dwSupport">
      <summary>
            Optional functionality supported by the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Waveform.WaveOut.WAVEOUTCAPS.SupportsPlaybackRateControl">
      <summary>
            Gets whether playback control is supported
            </summary>
    </member>
    <member name="T:Ozeki.Media.JitterBuffer.JitterBufferPacket">
      <summary>
            Represents the container for one packte in the buffer.
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.data">
      <summary>
            Data bytes contained in the packet
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.len">
      <summary>
            Length of the packet in bytes
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.timestamp">
      <summary>
            Timestamp for the packet
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.span">
      <summary>
            Time covered by the packet (same units as timestamp)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.sequence">
      <summary>
            RTP Sequence number if available (0 otherwise)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferPacket.user_data">
      <summary>
            Put whatever data you like here (it's ignored by the jitter buffer)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferResult.JITTER_BUFFER_OK">
      <summary>
            Packet has been retrieved
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferResult.JITTER_BUFFER_MISSING">
      <summary>
            Packet is lost or is late
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferResult.JITTER_BUFFER_INSERTION">
      <summary>
            A "fake" packet is meant to be inserted here to increase buffering
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferResult.JITTER_BUFFER_INTERNAL_ERROR">
      <summary>
            There was an error in the jitter buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBufferResult.JITTER_BUFFER_BAD_ARGUMENT">
      <summary>
            Invalid argument
            </summary>
    </member>
    <member name="T:Ozeki.Media.JitterBuffer.JitterBuffer">
      <summary>
            Jitter buffer implemenation.
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.pointer_timestamp">
      <summary>
            Timestamp of what we will *get* next
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.last_returned_timestamp">
      <summary>
            Useful for getting the next packet with the same timestamp (for fragmented media)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.next_stop">
      <summary>
            Estimated time the next get() will be called
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.buffered">
      <summary>
            Amount of data we think is still buffered by the application (timestamp units)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.packets">
      <summary>
            Packets stored in the buffer
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.arrival">
      <summary>
            Packet arrival time (0 means it was late, even though it's a valid timestamp)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.delay_step">
      <summary>
            Size of the steps when adjusting buffering (timestamp units)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.concealment_size">
      <summary>
            Size of the packet loss concealment "units"
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.reset_state">
      <summary>
            True if state was just reset
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.buffer_margin">
      <summary>
            How many frames we want to keep in the buffer (lower bound)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.late_cutoff">
      <summary>
            How late must a packet be for it not to be considered at all
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.interp_requested">
      <summary>
            An interpolation is requested by <see cref="M:Ozeki.Media.JitterBuffer.JitterBuffer.UpdateDelay" /></summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.auto_adjust">
      <summary>
            Whether to automatically adjust the delay at any time
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer._tb">
      <summary>
            Don't use those directly
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.timeBuffers">
      <summary>
            Storing arrival time of latest frames so we can compute some stats
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.window_size">
      <summary>
            Total window over which the late frames are counted
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.subwindow_size">
      <summary>
            Sub-window size for faster computation
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.max_late_rate">
      <summary>
            Absolute maximum amount of late packets tolerable (in percent)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.latency_tradeoff">
      <summary>
            Latency equivalent of losing one percent of packets
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.auto_tradeoff">
      <summary>
            Latency equivalent of losing one percent of packets (automatic default)
            </summary>
    </member>
    <member name="F:Ozeki.Media.JitterBuffer.JitterBuffer.lost_count">
      <summary>
            Number of consecutive lost packets
            </summary>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes the jitterbuffer with a given <paramref name="step_size" />.
            </summary>
      <param name="step_size">
      </param>
      <param name="maxLatency">
      </param>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.ComputeOptDelay">
      <summary>
            Based on available data, this computes the optimal delay for the jitter buffer. 
            The optimised function is in timestamp units and is:
            cost = delay + late_factor*[number of frames that would be late if we used that delay]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.UpdateTimings(System.Int32)">
      <summary>
            Take the following timing into consideration for future calculations
            </summary>
      <param name="timing">
      </param>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.Put(Ozeki.Media.JitterBuffer.JitterBufferPacket)">
      <summary>
            Put one packet into the jitter buffer
            </summary>
      <param name="packet">
      </param>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.Get(Ozeki.Media.JitterBuffer.JitterBufferPacket@,System.Int32,System.Int32@)">
      <summary>
            Get one packet from the jitter buffer
            </summary>
      <param name="packet">
      </param>
      <param name="desired_span">
      </param>
      <param name="start_offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.ShiftTimings(System.Int16)">
            Compensate all timings when we do an adjustment of the buffering 
        </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.UpdateDelay">
      <summary>
            Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.JitterBuffer.Tick">
      <summary>
            Call this method to indicate one step in time (one tick).
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaBuffer">
      <summary>
            Class for media data buffering. Includes jitter buffer.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaBuffer.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaBuffer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaBuffer.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaBuffer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaBuffer.Put(System.Byte[])">
      <summary>
            Puts the given data into the buffer.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaBuffer.Get">
      <summary>
            Gets the next data from the buffer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.MediaJitterBuffer.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.JitterBuffer.MediaJitterBuffer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.MediaJitterBuffer.Get(System.Int32)">
      <summary>
            Returns the next frame from the buffer.
            </summary>
      <param name="bufferSize">
      </param>
    </member>
    <member name="M:Ozeki.Media.JitterBuffer.MediaJitterBuffer.Put(System.Byte[])">
      <summary>
            Puts the <paramref name="frameData" /> into the buffer. Note that the given byte array
            is not copied so you transfer ownership to the buffer.
            </summary>
      <param name="frameData">
      </param>
    </member>
    <member name="T:Ozeki.Media.Audio.Converter.ACMStream">
      <summary>
            AcmStream encapsulates an Audio Compression Manager Stream
            used to convert audio from one format to another
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Creates a new ACM stream to convert one format to another. Note that
            not all conversions can be done in one step
            </summary>
      <param name="sourceFormat">The source audio format</param>
      <param name="destFormat">The destination audio format</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.#ctor(System.Int32,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,Ozeki.Media.Audio.Core.ACM.WaveFilter)">
      <summary>
            Creates a new ACM stream to convert one format to another, using a 
            specified driver identified and wave filter
            </summary>
      <param name="driverId">the driver identifier</param>
      <param name="sourceFormat">the source format</param>
      <param name="waveFilter">the wave filter</param>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.SourceToDest(System.Int32)">
      <summary>
            Returns the number of output bytes for a given number of input bytes
            </summary>
      <param name="source">Number of input bytes</param>
      <returns>Number of output bytes</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.DestToSource(System.Int32)">
      <summary>
            Returns the number of source bytes for a given number of destination bytes
            </summary>
      <param name="dest">Number of destination bytes</param>
      <returns>Number of source bytes</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.SuggestPcmFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Suggests an appropriate PCM format that the compressed format can be converted
            to in one step
            </summary>
      <param name="compressedFormat">The compressed format</param>
      <returns>The PCM format</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.Convert(System.Int32,System.Int32@)">
      <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
      <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
      <param name="sourceBytesConverted">The number of source bytes actually converted</param>
      <returns>The number of converted bytes in the DestinationBuffer</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.Convert(System.Int32)">
      <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
      <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
      <returns>The number of converted bytes in the DestinationBuffer</returns>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.Dispose">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.Dispose(System.Boolean)">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="M:Ozeki.Media.Audio.Converter.ACMStream.Finalize">
      <summary>
            Frees resources associated with this ACM Stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.ACMStream.SourceBuffer">
      <summary>
            Returns the Source Buffer. Fill this with data prior to calling convert
            </summary>
    </member>
    <member name="P:Ozeki.Media.Audio.Converter.ACMStream.DestBuffer">
      <summary>
            Returns the Destination buffer. This will contain the converted data
            after a successful call to Convert
            </summary>
    </member>
    <member name="T:Ozeki.Media.AudioConferenceHandlers">
      <summary>
            Contains media handlers for audio conferencing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConnectionContainer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaConnector" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConnectionContainer`1.Connect(`0,`0)">
      <summary>
            Connects two <see cref="T:Ozeki.Media.MediaHandlers.VoIPMediaHandler" /> objects. The media data will flow from the source to the destination.
            </summary>
      <param name="source">The media handler that sends the data.</param>
      <param name="destination">The media handler that receives the data.</param>
    </member>
    <member name="M:Ozeki.Media.ConnectionContainer`1.Disconnect(`0,`0)">
      <summary>
            Closes the connection between two media handlers.
            </summary>
      <param name="source">The source media handler.</param>
      <param name="destination">The destination media handler.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnection.Dispose">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaConnection.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True, if the user called the Dispose() method.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnection.Finalize">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.VoIPMediaHandler">
      <summary>
            Abstract class that represents the dispose methods for VoIP media
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.VoIPMediaHandler.Dispose">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.VoIPMediaHandler.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True, if the user called the Dispose() method.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.VoIPMediaHandler.Finalize">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AudioHandler">
      <summary>
            Base class for media handlers.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.SendData(Ozeki.VoIP.Media.AudioData)">
      <summary>
            Sends media data to the connected media handlers.
            </summary>
      <param name="audioData">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.ConnectedToDestination(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            This will be called when this object has been connected to another media handler.
            </summary>
      <param name="destination">The media handler which this object is connected to.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.SourceConnected(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            This will be called when another media handler has been connected to this object.
            </summary>
      <param name="source">The connected media handler.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.DisconnectedFromDestination(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            This will be called when this object has been disconnected from another media handler.
            </summary>
      <param name="destination">The media handler which this object was connected to.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioHandler.SourceDisconnected(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            This will be called when another media handler has been disconnected from this object.
            </summary>
      <param name="source">The disconnected media handler.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioHandler.MediaFormat">
      <summary>
            Gets the MediaFormat of the media handler.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.AudioHandler.MediaFormatChanged">
      <summary>
            Occurs when the MediaFormat of the media handler has changed.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.AudioHandler.DataSent">
      <summary>
            Event that occurs when the data is ready to send.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AcousticEchoCanceller">
      <summary>
            Can perform acoustic echo cancellation.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AcousticEchoCanceller.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AcousticEchoCanceller" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AcousticEchoCanceller.SetEchoSource(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Sets the source of the echo (usually the Speakers).
            </summary>
      <param name="handler">The media handler which from the echo comes.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AcousticEchoCanceller.Enabled">
      <summary>
            Gets or sets a boolean value indicating whether echo filtering is enabled.
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.AnswerMachineDetectionResult.Human">
      <summary>
            A person answered the call
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.AnswerMachineDetectionResult.Machine">
      <summary>
            An answering machine answered the call
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AnswerMachineDetector">
      <summary>
            This class represents the methods that can determine if the call was answered by a person or an answering machine.
            The method uses the theory that a person answeres the call with some short words and then waits for
            the caller to introduce themselves, while the machine plays a relatively long prerecorded audio stream that
            has less silent periods between the words.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AnswerMachineDetector.#ctor">
      <summary>
            Creates a new instance of AnswerMachineDetector
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AnswerMachineDetector.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new instance of AnswerMachineDetector
            </summary>
      <param name="maxGreetingTime">The maximum greeting time</param>
      <param name="maxPauseTime">The maximum time of silence between two words</param>
      <param name="maxDelayTime">The maximum time of delay</param>
      <param name="timeout">The timeout of answering</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AnswerMachineDetector.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AnswerMachineDetector.Start">
      <summary>
            Starts the recognition.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AnswerMachineDetector.Stop">
      <summary>
            Stops the recognition.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.AnswerMachineDetector.DetectionCompleted">
      <summary>
            This event handler notifies the system about that the detection is completed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver">
      <summary>
            The media handler for receiving audio data from a call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.#ctor">
      <summary>
            Creates and instance fo a PhoneCallAudioReceiver.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.DtmfStarted(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,System.Int32}})">
      <summary>
            This will be called when the DTMF signalling started.
            </summary>
      <param name="sender">The remote end who sends the DTMF signal</param>
      <param name="e">The data that is sent from the remote end</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.DtmfReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfSignal}})">
      <summary>
            This will be called when the DTMF signalling stopped.
            </summary>
      <param name="sender">The remote end that sends the DTMF signal</param>
      <param name="e">The DTMF information that is sent</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.CallErrorOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallError})">
      <summary>
            This will be called whenever an error occures in the call.
            </summary>
      <param name="sender">The remote end that tried to send DTMF signal</param>
      <param name="e">The data sent from the remote end</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.CallStateChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallState})">
      <summary>
            This will be called whenever the call changes its state.
            </summary>
      <param name="sender">The remote party of the communication</param>
      <param name="e">The new call state</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.PlainMediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.EncodedMediaData})">
      <summary>
            This will be called when some encoded media data received from the call.
            </summary>
      <param name="sender">The remote party of the communication</param>
      <param name="e">The media data that is received from the remote end</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.MediaDescriptionChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo}})">
      <summary>
            This will be called whenever the call changes its media description.
            </summary>
      <param name="sender">The remote party of the communication</param>
      <param name="mediaDescription">The new media description</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.MediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VoIPMediaData})">
      <summary>
            This will be called when media data received from the call.
            </summary>
      <param name="sender">The remote party of the communication</param>
      <param name="e">The media data that is received from the remote end</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the object to a call so it can receive media data from that call.
            If the <see cref="!:PhoneCallMediaReceiver" /> is already attached to an active call, it will be detached from it first.
            </summary>
      <param name="call">The call object to attach the listener.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.Detach">
      <summary>
            Detaches the object from the call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioReceiver.DataReceivedFromCall(Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Some data is received from the call
            </summary>
      <param name="mediaData">The media data that is received from the call</param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler">
      <summary>
            Base class for timer based media handlers. Contains a built-in timer that ticks periodically when the interval has elapsed.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler" /> class.
            </summary>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.TimerTick(System.Object,System.EventArgs)">
      <summary>
            This will be called when the built-in timer ticks.
            </summary>
      <param name="sender">The timer object.</param>
      <param name="e">Timer arguments.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.SetPacketizationTime(System.Int32)">
      <summary>
            Sets the time between tick events.
            </summary>
      <param name="value">The interval.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.StartTimer">
      <summary>
            Starts the timer.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.StopTimer">
      <summary>
            Stops the timer.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.TimerBasedMediaHandler.PacketizationTime">
      <summary>
            Gets the time between the send events (in milliseconds).
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender">
      <summary>
            Can send audio data to the attached <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            </summary>
      <remarks>
            Inherited from the <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> class, so it can be connected to other <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects.
            
            The class implements the <see cref="T:Ozeki.VoIP.IPhoneCallAttachable" /> interface so it can be attached to a <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            When a <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" /> is attached to an <see cref="T:Ozeki.VoIP.IPhoneCall" /> object, it will send the available audio data to the attached call.
            
            When a connected <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> sends audio data to the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" />, it will send it directly to the call,
            but it will not send it to the connected <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.#ctor(Ozeki.VoIP.Media.IVoIPMediaFormatSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" /> class.
            </summary>
      <param name="mediaFormatSelector">An object that will select the media format of the sent media data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.DtmfStarted(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,System.Int32}})">
      <summary>
            This will be called when the DTMF signalling started.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.DtmfReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfSignal}})">
      <summary>
            This will be called when the DTMF signalling stopped.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.CallErrorOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallError})">
      <summary>
            This will be called whenever an error occures in the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.CallStateChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallState})">
      <summary>
            This will be called whenever the call changes its state.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.MediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VoIPMediaData})">
      <summary>
            This will be called when media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.PlainMediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.EncodedMediaData})">
      <summary>
            This will be called when some encoded media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.MediaDescriptionChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo}})">
      <summary>
            This will be called whenever the call changes its media description.
            </summary>
      <param name="sender">
      </param>
      <param name="mediaDescription">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the object to a call and so it can send media data to the call.
            If the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" /> is already attached to a call, it will be detached from it first.
            </summary>
      <param name="call">The call object to attach the listener.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.Detach">
      <summary>
            Detaches the object from the currently active call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.UpdateMediaFormat(System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo})">
      <summary>
            Retreives all available media formats from the call and updates the MediaFormat of the object.
            </summary>
      <param name="formats">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.SendDataToCall(Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Sends media data with the given media format to the attached call.
            </summary>
      <param name="mediaData">The media data.</param>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.PhoneCallAudioSender.NoMediaFormatSelected">
      <summary>
            Occurs when the <see cref="!:PhoneCallMediaSender" /> could not select the proper MediaFormat.
            It means the <see cref="!:PhoneCallMediaSender" /> will not send any media data to the attached call.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.VideoHandler">
      <summary>
            Base class for video based handlers.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.VideoHandler.SendData(Ozeki.VoIP.Media.VideoData)">
      <summary>
            Sends media data to the connected media handlers.
            </summary>
      <param name="mediaData">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.VideoHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VideoData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.VideoHandler.UpdateMediaFormat(Ozeki.VoIP.Media.VideoFormat)">
      <summary>
            Megvaltoztatja a MediaFormat-ot anelkul, hogy a MediaFormatChanged event-et triggerelne.
            </summary>
      <param name="newFormat">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.VideoHandler.SourceConnected(Ozeki.Media.MediaHandlers.Video.VideoHandler)">
      <summary>
            This will be called when another media handler has been connected to this object.
            </summary>
      <param name="source">The connected media handler.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.VideoHandler.SourceDisconnected(Ozeki.Media.MediaHandlers.Video.VideoHandler)">
      <summary>
            This will be called when another media handler has been disconnected from this object.
            </summary>
      <param name="source">The disconnected media handler.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.VideoHandler.MediaFormat">
      <summary>
            Gets the format of the media handler.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Video.VideoHandler.MediaFormatChanged">
      <summary>
            Occurs when the MediaFormat of the media handler has changed.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Video.VideoHandler.DataSent">
      <summary>
            Event that occurs when the data is ready to send.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver">
      <summary>
            The media handler for receiving video data from a remote party through a call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.DtmfStarted(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,System.Int32}})">
      <summary>
            This will be called when the DTMF signalling started.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.DtmfReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfSignal}})">
      <summary>
            This will be called when the DTMF signalling stopped.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.CallErrorOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallError})">
      <summary>
            This will be called whenever an error occures in the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.CallStateChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallState})">
      <summary>
            This will be called whenever the call changes its state.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.PlainMediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.EncodedMediaData})">
      <summary>
            This will be called when some encoded media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.MediaDescriptionChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo}})">
      <summary>
            This will be called whenever the call changes its media description.
            </summary>
      <param name="sender">
      </param>
      <param name="mediaDescription">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.MediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VoIPMediaData})">
      <summary>
            This will be called when media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the object to a call so it can receive media data from that call.
            If the <see cref="!:PhoneCallMediaReceiver" /> is already attached to an active call, it will be detached from it first.
            </summary>
      <param name="call">The call object to attach the listener.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.Detach">
      <summary>
            Detaches the object from the call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoReceiver.DataReceivedFromCall(Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Some media data is received from the call
            </summary>
      <param name="mediaData">The media data received from the call</param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.PhoneCallVideoSender">
      <summary>
            Can send video data to the attached <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            </summary>
      <remarks>
            Inherited from the <see cref="T:Ozeki.Media.MediaHandlers.Video.VideoHandler" /> class, so it can be connected to other <see cref="T:Ozeki.Media.MediaHandlers.Video.VideoHandler" /> objects.
            
            The class implements the <see cref="T:Ozeki.VoIP.IPhoneCallAttachable" /> interface so it can be attached to a <see cref="T:Ozeki.VoIP.IPhoneCall" /> object.
            When a <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallVideoSender" /> is attached to an <see cref="T:Ozeki.VoIP.IPhoneCall" /> object, it will send the available video data to the attached call.
            
            When a connected <see cref="T:Ozeki.Media.MediaHandlers.Video.VideoHandler" /> sends video data to the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallVideoSender" />, it will send it directly to the call,
            but it will not send it to the connected <see cref="T:Ozeki.Media.MediaHandlers.Video.VideoHandler" /> objects.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallVideoSender" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.#ctor(Ozeki.VoIP.Media.IVoIPMediaFormatSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallVideoSender" /> class.
            </summary>
      <param name="mediaFormatSelector">An object that will select the media format of the sent media data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.DtmfStarted(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,System.Int32}})">
      <summary>
            This will be called when the DTMF signalling started.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.DtmfReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.Common.OzTuple{Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfSignal}})">
      <summary>
            This will be called when the DTMF signalling stopped.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.CallErrorOccured(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallError})">
      <summary>
            This will be called whenever an error occures in the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.CallStateChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.CallState})">
      <summary>
            This will be called whenever the call changes its state.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.MediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VoIPMediaData})">
      <summary>
            This will be called when media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.PlainMediaDataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.EncodedMediaData})">
      <summary>
            This will be called when some encoded media data received from the call.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.MediaDescriptionChanged(System.Object,Ozeki.VoIP.VoIPEventArgs{System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo}})">
      <summary>
            This will be called whenever the call changes its media description.
            </summary>
      <param name="sender">
      </param>
      <param name="mediaDescription">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the object to a call and so it can send media data to the call.
            If the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallAudioSender" /> is already attached to a call, it will be detached from it first.
            </summary>
      <param name="call">The call object to attach the listener.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.Detach">
      <summary>
            Detaches the object from the currently active call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.UpdateMediaFormat(System.Collections.Generic.IEnumerable{Ozeki.VoIP.Media.CallMediaFormatInfo})">
      <summary>
            Retreives all available media formats from the call and updates the MediaFormat of the object.
            </summary>
      <param name="formats">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.SendDataToCall(Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Sends media data with the given media format to the attached call.
            </summary>
      <param name="mediaData">The media data.</param>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.PhoneCallVideoSender.NoMediaFormatSelected">
      <summary>
            Occurs when the <see cref="!:PhoneCallMediaSender" /> could not select the proper MediaFormat.
            It means the <see cref="!:PhoneCallMediaSender" /> will not send any media data to the attached call.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer">
      <summary>
            Can play DTMF tones.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer.#ctor">
      <summary>
            Initalizes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer.Start(System.Int32)">
      <summary>
            Starts generating the specified DTMF tone.
            </summary>
      <param name="dtmfEvent">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer.Start(Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Starts generating the specified DTMF tone.
            </summary>
      <param name="dtmfEvent">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.DtmfEventWavePlayer.Stop">
      <summary>
            Stops generating the DTMF tone.
            </summary>
    </member>
    <member name="T:Ozeki.Media.ConferenceRoom">
      <summary>
            Class for audio conferencing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.ConferenceRoom" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.AddToConference(Ozeki.VoIP.ICall)">
      <summary>
            Adds a phone call to the conference.
            </summary>
      <param name="call">The specified phone call object.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.RemoveFromConference(Ozeki.VoIP.ICall)">
      <summary>
            Removes a phone call from the conference.
            </summary>
      <param name="call">The specified phone call object.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.StartConferencing">
      <summary>
            Starts the previously added calls and begins the conferencing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.StopConferencing">
      <summary>
            Hangs up all the phone calls and stops the conferencing. Both the phone calls and the media connections will be removed.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.ConnectSender(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Connects a media sender to the conference room.
            </summary>
      <param name="sender">The media sender.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.DisconnectSender(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Disconnects a connected media sender from the conference room.
            </summary>
      <param name="sender">The media sender.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.ConnectReceiver(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Connects a media receiver to the conference room.
            </summary>
      <param name="receiver">The media receiver.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.DisconnectReceiver(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Disconnects a connected media receiver from the conference room.
            </summary>
      <param name="receiver">The media receiver.</param>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.Dispose">
      <summary>
            Disposes the object.
            </summary>
    </member>
    <member name="M:Ozeki.Media.ConferenceRoom.Finalize">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection">
      <summary>
            Represents a typical set of media handlers for normal phone call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.#ctor(Ozeki.Media.MediaConnector,System.Collections.Generic.Dictionary{System.String,Ozeki.Media.MediaHandlers.VoIPMediaHandler})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection" /> class.
            </summary>
      <param name="connector">The <see cref="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.MediaConnector" /> object.</param>
      <param name="mediaHandlers">The dictionary containing the <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches the media handlers to the given call.
            </summary>
      <param name="call">The call object.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.Detach">
      <summary>
            Detaches the media handlers from the attached call.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.HasComponent(System.String)">
      <summary>
            Returns a boolean value indicating whether the name is registered in the collection.
            </summary>
      <param name="name">The name of the component.</param>
      <returns>Returns true if the component is present in the collection, otherwise false.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.GetComponent(System.String)">
      <summary>
            Retreives the specified component from the collection.
            </summary>
      <param name="name">The name of the component.</param>
      <returns>Returns a <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> object associated to the name, or null if the name was not in the dictionary.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.Start">
      <summary>
            Starts all <see cref="T:Ozeki.Media.IMediaControl" /> objects in the collection.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.Stop">
      <summary>
            Stops all <see cref="T:Ozeki.Media.IMediaControl" /> objects in the collection.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.VoIPMediaHandlers">
      <summary>
            Gets the collection of available media handlers.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.VoIPMediaHandlerNames">
      <summary>
            Gets the names of the available <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.MediaConnector">
      <summary>
            Gets the <see cref="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.MediaConnector" /> object that connects the <see cref="P:Ozeki.Media.MediaHandlers.Facade.MediaHandlerCollection.VoIPMediaHandlers" /> each other.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.GainControl">
      <summary>
            If the sound is low or very high, then you need to use this class to regulate the level of sound.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.GainControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.GainControl" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.GainControl.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.GainControl.Decibel">
      <summary>
            Additional decibels.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.MediaStreamHandler">
      <summary>
            Base class for media stream handlers.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MediaStreamHandler" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MediaStreamHandler" /> class.
            </summary>
      <param name="filePath">The path of the media file.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MediaStreamHandler" /> class.
            </summary>
      <param name="stream">The media stream.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.StartStreaming">
      <summary>
            Starts the streaming. (If the streaming is already started then does nothing.)
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.PauseStreaming">
      <summary>
            Pauses the streaming. (If the streaming is already paused then does nothing.)
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.StopStreaming">
      <summary>
            Stops the streaming. (If the streaming is already stopped then does nothing.)
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.Start">
      <summary>
            Starts the stream given in the Stream property. (If the stream is already started then does nothing.)
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MediaStreamHandler.Stop">
      <summary>
            Stops the streaming.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.MediaStreamHandler.IsStreaming">
      <summary>
            Gets or sets a value that is true if the wave is streaming, otherwise false. 
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.MediaStreamHandler.Stream">
      <summary>
            Gets the stream
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.MediaStreamHandler.Position">
      <summary>
            Gets or sets the current position in the audio stream 
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.MediaStreamHandler.Stopped">
      <summary>
            Occurs when the audio recording or playing has been stopped
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler">
      <summary>
            Base class for timer based media stream handlers. Contains a built-in timer that ticks periodically when the interval has elapsed.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler" /> class.
            </summary>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler" /> class.
            </summary>
      <param name="filePath">The path of the media file.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.#ctor(System.String,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler" /> class.
            </summary>
      <param name="filePath">The path of the media file.</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler" /> class.
            </summary>
      <param name="stream">The media stream.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.#ctor(System.IO.Stream,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler" /> class.
            </summary>
      <param name="stream">The media stream.</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.Start">
      <summary>
            Starts the stream given in the Stream property. (If the stream is already started then does nothing.)
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.Stop">
      <summary>
            Stops the streaming.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.TimerTick(System.Object,System.EventArgs)">
      <summary>
            This will be called when the built-in timer ticks.
            </summary>
      <param name="sender">The timer object.</param>
      <param name="e">Timer arguments.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.TimerBasedMediaStreamHandler.Interval">
      <summary>
            Gets the time between the send events (in milliseconds).
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback">
      <summary>
            Can play audio from an audio file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class.
            </summary>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class with default packetization time (20ms)
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="stream">The stream</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class with default packetization time (20ms).
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioStreamPlayback" /> class.
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.LoadReader(System.IO.Stream)">
      <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.LoadStream(System.IO.Stream)" /> method.)
            </summary>
      <param name="stream">The input stream.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.TimerTick(System.Object,System.EventArgs)">
      <summary>
            This will be called when the built-in timer ticks.
            </summary>
      <param name="sender">The timer object.</param>
      <param name="e">Timer arguments.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.SetPlaybackWaveStream(Ozeki.Media.Audio.Streams.WaveFileStream)">
      <summary>
            Changes the playback stream to the given stream.
            </summary>
      <param name="reader">The input stream.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioStreamPlayback.Loop">
      <summary>
            A boolean value indicating whether the playback is repeated infinetly.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioStreamPlayback.Cached">
      <summary>
            Gets a boolean value indicating whether the playback stream is cached in the memory.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AudioQualityEnhancer">
      <summary>
            This class is for performing acoustic echo cancellation, noise reduction, automatic gain control.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioQualityEnhancer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.SetEchoSource(Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Sets the source of the echo (usually the Speakers). An echo source must be set in order to work acoustic echo cancellation properly.
            </summary>
      <param name="handler">The media handler which from the echo comes.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.AcousticEchoCancellation">
      <summary>
            Gets or sets a boolean value indicating whether the Acoustic Echo Cancellation is enabled.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.EchoDelay">
      <summary>
            Gets or sets the delay of the acoustic echo (in milliseconds).
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.AutoGainControl">
      <summary>
            Gets or sets a boolean value indicating whether the Auto Gain Control is enabled.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.MaxGain">
      <summary>
            Gets or sets the maximal gain of the Auto Gain Control.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.GainSpeed">
      <summary>
            Gets or sets the gain speed of the Auto Gain Control.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.AudioQualityEnhancer.NoiseReductionLevel">
      <summary>
            Gets or sets the level of the noise filter.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.VADFilter">
      <summary>
            Class for filtering silence in the received media data.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.VADFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.VADFilter" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.VADFilter.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.VADFilter.ActivationLevel">
      <summary>
            Gets or sets the additional level of the voice activity detection in dB.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.VADFilter.Enabled">
      <summary>
            Indicates whether the filter is turned on
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.VADFilter.VoiceDetected">
      <summary>
            Indicates whether the speech is detected in the received media data.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm">
      <summary>
            Represents the stereoscopic effect type for 3D video streaming.
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm.TrueAnaglyph">
      <summary>
            True (red-blue) anaglyph algorithm
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm.GrayAnaglyph">
      <summary>
            Gray anaglyph algorithm
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm.ColorAnaglyph">
      <summary>
            Full color anaglyph algorithm
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm.HalfColorAnaglyph">
      <summary>
            Half color anaglyph algorithm
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm.OptimizedAnaglyph">
      <summary>
            Optimized anaglyph algorithm
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler">
      <summary>
            MediaHandler class for stereoscopic 3D video handling
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler.#ctor">
      <summary>
            Creates a new instance of the AnaglyphVideoHandler class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler.#ctor(Ozeki.Media.MediaHandlers.Video.AnaglyphAlgorithm)">
      <summary>
            Creates a new instance of the AnaglyphVideoHandler class.
            </summary>
      <param name="algorithm">The AnaglyphAlgorithm type used for creating the stereoscopic video frames</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler.VideoSource1">
      <summary>
            Gets the first VideoHandler for the stereoscopic 3D video 
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler.VideoSource2">
      <summary>
            Gets the second VideoHandler for the stereoscopic 3D video
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.AnaglyphVideoHandler.Algorithm">
      <summary>
            Gets and sets the AnaglyphAlgorithm type for the stereoscopic 3D video creation
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.MediaType">
      <summary>
            The media type for the phone calls
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.MediaType.Audio">
      <summary>
            Audio type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.MediaType.Video">
      <summary>
            Video type
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.MediaType.AudioVideo">
      <summary>
            Audiovideo type
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback">
      <summary>
            Can play audio from an MP3 file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class with default packetization time (20ms)
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="stream">The stream</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class with default packetization time (20ms).
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.MP3StreamPlayback" /> class.
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.MP3StreamPlayback.LoadReader(System.IO.Stream)">
      <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.LoadStream(System.IO.Stream)" /> method.)
            </summary>
      <param name="stream">The input stream.</param>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.MPEG4AudioRecorder.ms">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.MPEG4Recoder">
      <summary>
      </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.MPEG4Recoder.#ctor(System.String,Ozeki.Media.MediaHandlers.Video.MediaType)">
      <summary>
      </summary>
      <param name="path">
      </param>
      <param name="mediaType">
      </param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.MPEG4Recoder.AudioRecoder">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.MPEG4Recoder.VideoRecoder">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback">
      <summary>
            Can play audio from a wave file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class.
            </summary>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class with default packetization time (20ms)
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.String,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class
            </summary>
      <param name="audioFilePath">The path of the playback audio file</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class with default packetization time (20ms).
            The audio stream will not be cached and will be played only once.
            </summary>
      <param name="stream">The stream</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class with default packetization time (20ms).
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamPlayback" /> class.
            </summary>
      <param name="stream">The stream</param>
      <param name="repeat">A boolean value that is used to infinitely repeat the audio</param>
      <param name="cacheStream">Indicates whether the stream is being cached in memory</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamPlayback.LoadReader(System.IO.Stream)">
      <summary>
            Initializes the file reader which will read the content of the stream. (This method will be invoked in the <see cref="M:Ozeki.Media.MediaHandlers.AudioStreamPlayback.LoadStream(System.IO.Stream)" /> method.)
            </summary>
      <param name="stream">The input stream.</param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer">
      <summary>
            Plays arbitrary looped wave files when the attached call changes its state.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class.
            </summary>
      <param name="waveFormat">
      </param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class.
            </summary>
      <param name="waveFormat">The initial arbitrary media format.</param>
      <param name="outgoingCallStateMap">Wave file names for states of outgoing activeCall.</param>
      <param name="incomingCallStateMap">Wave file names for states of incoming activeCall.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor(Ozeki.VoIP.IPhoneCall,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class and attaches to a call object.
            </summary>
      <param name="call">The given call object.</param>
      <param name="waveFormat">The initial arbitrary media format.</param>
      <param name="outgoingCallStateMap">Wave file names for states of outgoing call.</param>
      <param name="incomingCallStateMap">Wave file names for states of incoming call.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class.
            </summary>
      <param name="waveFormat">The initial arbitrary media format.</param>
      <param name="outgoingCallStateMap">Wave streams for states of outgoing call.</param>
      <param name="incomingCallStateMap">Wave streams for states of incoming call.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.#ctor(Ozeki.VoIP.IPhoneCall,Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.IO.Stream})">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer" /> class  and attaches to a call object.
            </summary>
      <param name="call">The given call object.</param>
      <param name="waveFormat">The initial arbitrary media format.</param>
      <param name="outgoingCallStateMap">Wave streams for states of outgoing call.</param>
      <param name="incomingCallStateMap">Wave streams for states of incoming call.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.SetStateStreams(System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String},System.Collections.Generic.Dictionary{Ozeki.VoIP.CallState,System.String})">
      <summary>
            Sets files for the states of the activeCall.
            </summary>
      <param name="outgoingCallFileNames">Wave file names for states of outgoing activeCall.</param>
      <param name="incomingCallFileNames">Wave file names for states of incoming activeCall.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.UpdateIncomingStateStream(Ozeki.VoIP.CallState,System.String)">
      <summary>
            Updates one wave file name for the given state for the activeCall.
            </summary>
      <param name="state">The give state.</param>
      <param name="filepath">The new file path for the state.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.UpdateOutgoingStateStream(Ozeki.VoIP.CallState,System.String)">
      <summary>
            Updates one wave file name for the given state for the activeCall.
            </summary>
      <param name="state">The give state.</param>
      <param name="filepath">The new file path for the state.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.AttachToCall(Ozeki.VoIP.ICall)">
      <summary>
            Attaches this object to the given phone call.
            </summary>
      <param name="call">The given phone call.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.Detach">
      <summary>
            Detaches the object from the attached call.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.Call">
      <summary>
            Gets or sets the attached call.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.PhoneCallStateWavePlayer.HasActualCall">
      <summary>
            Gets a boolean value indicating whether the attached activeCall is not null.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.SpeechToText">
      <summary>
            Can recognize words from dictionary.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.#ctor(Ozeki.VoIP.Media.AudioFormat,System.String[])">
      <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
      <param name="mediaFormat">Media format the the audio stream.</param>
      <param name="choices">Words to recognize.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.CreateInstance">
      <summary>
            Initializes a speech recognizer and STT instance with voice activity detection.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.CreateInstance(Ozeki.VoIP.Media.AudioFormat)">
      <summary>
            Initializes a speech recognizer and STT instance with voice activity detection.
            </summary>
      <param name="mediaFormat">Media format of the audio stream.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.CreateInstance(System.String[])">
      <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
      <param name="choices">Words to recognize.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.CreateInstance(Ozeki.VoIP.Media.AudioFormat,System.String[])">
      <summary>
            Initializes a speech recognizer and STT instance.
            </summary>
      <param name="mediaFormat">Media format of the audio stream.</param>
      <param name="choices">Words to recognize.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.SpeechToText.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.SpeechToText.WordsRecognized">
      <summary>
            Occurs when some words are recognized from the audio stream.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.SpeechToText.WordsHypotyzed">
      <summary>
            Occurs when some words are recognized hypothetically from the audio stream.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.SpeechToText.SpeechDetected">
      <summary>
            Occurs when speech is detected from the audio stream.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.TextToSpeech">
      <summary>
            Handles string text input.
            </summary>
      <remarks>
            It has a waiting queue from where given text is read out. 
            Only one text is read out at one time, when the read out is 
            completed the next one is going to be read out.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.TextToSpeech" /> class with default format (8000 Hz, 16 bit, mono).
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.#ctor(Ozeki.VoIP.Media.AudioFormat)">
      <summary>
            Initializes a text to speech engine with given media format.
            </summary>
      <param name="mediaFormat">The media format of the playback.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.CreateNewTextStream(System.String)">
      <summary>
            Creates a new stream that includes the spoken audio made by the Speech engine.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.NextText">
      <summary>
            Skips the actual text and begins playing the next text.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.Clear">
      <summary>
            Stops the reading out and clears the waiting queue.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.AddText(System.String)">
      <summary>
            Adds text to the waiting queue.
            </summary>
      <param name="text">The text to read.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.AddAndStartText(System.String)">
      <summary>
            Adds text to the waiting queue and starts playing the queue.
            </summary>
      <param name="text">The text to read.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.GetAvailableVoices">
      <summary>
            Returns the collection of available Text-To-Speech voice.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.ChangeVoice(System.String)">
      <summary>
            Changes the voice of the Text-To-Speech engine.
            </summary>
      <param name="voice">The name of the given TTS voice.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.StartPlaying">
      <summary>
            Starts playing the current stream.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.StartStreaming">
      <summary>
            Starts playing the queue.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.TextToSpeech.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.TextToSpeech.WaitingTextCount">
      <summary>
            Number of text in the waiting queue.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.ImageProvider`1">
      <summary>
            Media handler that creates image from received byte array.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.ImageProvider`1.#ctor(Ozeki.Common.IByteArrayConverter{`0})">
      <summary>
            Initializes a new instance of the  <see cref="T:Ozeki.Media.MediaHandlers.Video.ImageProvider`1" /> class.
            </summary>
      <param name="converter">The converter that converts the byte array into an image.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.ImageProvider`1.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VideoData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.ImageProvider`1.Converter">
      <summary>
            Gets or sets the converter that makes conversion between byte array and image.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.BitmapSourceProvider">
      <summary>
            Creates a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object from received byte array.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.BitmapSourceProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.Video.BitmapSourceProvider" /> class.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.DrawingImageProvider">
      <summary>
            Creates a <see cref="T:System.Drawing.Image" /> object from received byte array.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.DrawingImageProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.Video.DrawingImageProvider" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.MPEG4VideoRecorder.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VideoData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:VideoPlayer.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VideoData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AudioPlayer.TimerTick(System.Object,System.EventArgs)">
      <summary>
            This will be called when the built-in timer ticks.
            </summary>
      <param name="sender">The timer object.</param>
      <param name="e">Timer arguments.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AudioPlayer.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AudioPlayer.Start">
      <summary>
            Starts the media.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AudioPlayer.Stop">
      <summary>
            Stops the media.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.FPSTimer">
      <summary>
            A MediaTimer -t nem hasznalhatom, mert csak 20 es 30 ms es idozitest tud
            Az Internal media timert nem hasznalhatom, mert ha abbol tobb mint 5 le van pledanyositva, akkor lehal
            ezert kellett letrehozzak egy uj tipusu timer-t
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.FPSTimer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.AVPlayer">
      <summary>
            Can play audio and video from an mp4, avi file.
            </summary>
    </member>
    <member name="F:Ozeki.Media.MediaHandlers.Video.AVPlayer.isStarted">
      <summary>
            Starts the media.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AVPlayer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.Video.AVPlayer" /> class
            The stream will not be cached and will be played only once.
            </summary>
      <param name="filePath">The path of the playback audio file</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AVPlayer.Stop">
      <summary>
            Stops the media.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.AVPlayer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.AVPlayer.VideoPlayer">
      <summary>
            Gets the video player object
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.AVPlayer.AudioPlayer">
      <summary>
            Gets the Audio player object
            </summary>
    </member>
    <member name="M:Ozeki.Media.VideoConnection.#ctor(Ozeki.Media.MediaHandlers.Video.VideoHandler,Ozeki.Media.MediaHandlers.Video.VideoHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.VideoConnection" /> class
            </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Video.WebCamera">
      <summary>
            Class for capturing video data with webcamera devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.VideoData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.Start">
      <summary>
            Starts the capturing from the selected webcamera.
            <remarks>
            Throws an <see cref="T:System.Exception" /> when no webcamera selected.
            </remarks></summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.Stop">
      <summary>
            Stops the capturing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.GetDevices">
      <summary>
            Retrieves the available webcamera devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.GetDevice(Ozeki.Media.Video.VideoDeviceInfo,Ozeki.Media.Video.Imaging.Resolution,System.Int32)">
      <summary>
            Retreives the specified webcamera device with additional parameters.
            </summary>
      <param name="info">Device information.</param>
      <param name="resolution">Size of the captured frame.</param>
      <param name="desiredFrameRate">Desired frame rate.</param>
      <returns>The webcamera object.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.GetDefaultDevice">
      <summary>
            Retreives the default webcamera device.
            </summary>
      <returns>The default webcamera device or null if no devices found.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.GetDevice(Ozeki.Media.Video.VideoDeviceInfo)">
      <summary>
            Retreives the specified webcamera device.
            </summary>
      <param name="info">The specific device by the given parameter.</param>
      <returns>The webcamera object.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Video.WebCamera.DisplayPropertiesWindow">
      <summary>
            Displays the properties window of the camera.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.DeviceID">
      <summary>
            Gets the identifier of the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.MonikerString">
      <summary>
            Gets the moniker of the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.DeviceName">
      <summary>
            Gets the name of the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.Capabilities">
      <summary>
            Gets the supported resolutions and frame rates for the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.Resolution">
      <summary>
            Gets or sets the current resolution of the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.CurrentFrameRate">
      <summary>
            Gets the current frame rate of the capture.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.DesiredFrameRate">
      <summary>
            Gets or sets the average frame rate of the capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Video.WebCamera.Capturing">
      <summary>
            Gets a boolean value indicating whether the capuring is started. 
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler">
      <summary>
            Mixes the received audio data and sends the mixed data to a connected media handler.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler" /> class with default WaveFormat (8000 Hz, 16 bit, mono) and default packetization time (20ms).
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler" /> class with default packetization time (20ms).
            </summary>
      <param name="waveFormat">The format of the mixed audio data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler.#ctor(Ozeki.Media.Audio.Waveform.Formats.WaveFormat,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler" /> class.
            </summary>
      <param name="waveFormat">The format of the mixed audio data.</param>
      <param name="packetizationTime">The time between the send events (in milliseconds).</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.AudioMixerMediaHandler.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Microphone">
      <summary>
            Class for capturing audio data with microphone.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.#ctor(Ozeki.Media.Audio.DeviceInfo,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.Microphone" /> class.
            </summary>
      <param name="deviceInfo">
      </param>
      <param name="format">The format of the captured data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler. Because the microphone is only an input device, this method is not implemented.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.Start">
      <summary>
            Starts microphone audio capture.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.Stop">
      <summary>
            Stops microphone audio capture.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.GetDevices">
      <summary>
            Retrieves the available capturing devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.GetDevice(Ozeki.Media.Audio.DeviceInfo)">
      <summary>
            Retreives the specified microphone device.
            </summary>
      <param name="info">Information about the microphone device.</param>
      <returns>The microphone object.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.GetDefaultDevice">
      <summary>
            Retreives the default microphone device.
            </summary>
      <returns>The default microphone device or null if no microphones found.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.GetDevicesCount">
      <summary>
            Retreives the number of available capturing devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.DisposeDevices">
      <summary>
            Disposes the previously created and not disposed devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Microphone.ChangeFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Changes the recording format of the device.
            </summary>
      <param name="waveFormat">The specified audio format.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.DeviceInfo">
      <summary>
            Gets the product information of the microphone device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.Initialized">
      <summary>
            Returns a boolean value indicating whether the selected microphone device is ready for capturing.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.State">
      <summary>
            Gets the state of the microphone.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.Volume">
      <summary>
            Gets or sets the volume of the microphone. (Range: 0-1)
            If the value is -1, the volume of the selected device is fixed and cannot be changed.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.Level">
      <summary>
            Gets the level of the microphone input. (Range: 0-100)
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Microphone.Muted">
      <summary>
            Gets or sets a boolean value indicating whether the microphone is muted.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Microphone.LevelChanged">
      <summary>
            Occurs when the microphone level has changed.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Microphone.Stopped">
      <summary>
            Occurs when the microphone stopped capturing.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.Speaker">
      <summary>
            Class for playing audio through speakers.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.Dispose(System.Boolean)">
      <summary>
            Disposes the object.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.Start">
      <summary>
            Starts playing the audio from the speaker.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.Pause">
      <summary>
            Pauses the playing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.Stop">
      <summary>
            Stops the playing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.GetDevices">
      <summary>
            Retrieves the available playback devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.GetDevice(Ozeki.Media.Audio.DeviceInfo)">
      <summary>
            Retreives the specified playback device.
            </summary>
      <param name="info">Information about the speaker device.</param>
      <returns>The speaker object.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.GetDefaultDevice">
      <summary>
            Retreives the default playback device.
            </summary>
      <returns>The default playback device or null if no speakers found.</returns>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.GetDevicesCount">
      <summary>
            Retreives the number of available playback devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.DisposeDevices">
      <summary>
            Disposes the previously created and not disposed devices.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.Speaker.ChangeFormat(Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Changes the playback format of the device.
            </summary>
      <param name="waveFormat">The specified audio format.</param>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.DeviceInfo">
      <summary>
            Gets the product information of the speaker device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.Initialized">
      <summary>
            Returns a boolean value indicating whether the selected speaker device is ready.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.State">
      <summary>
            Gets the state of the playback device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.Volume">
      <summary>
            Gets or sets the volume of the speaker. (Range: 0-1)
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.Level">
      <summary>
            Gets the level of the speaker output. (Range: 0-100)
            </summary>
    </member>
    <member name="P:Ozeki.Media.MediaHandlers.Speaker.Muted">
      <summary>
            Gets or sets a boolean value indicating whether the speaker is muted.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Speaker.LevelChanged">
      <summary>
            Occurs when the speaker level has changed.
            </summary>
    </member>
    <member name="E:Ozeki.Media.MediaHandlers.Speaker.Stopped">
      <summary>
            Occurs when the speaker stopped playing.
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaHandlers.WaveStreamRecorder">
      <summary>
            Can record audio data into a wave file.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamRecorder" /> class with default MediaFormat (8 kHz, 16 bit, 1 channel)
            </summary>
      <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.#ctor(System.String,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamRecorder" /> class
            </summary>
      <param name="filePath">The path of the media file. If the file already exists it will be overwritten.</param>
      <param name="waveFormat">The format of the recorded data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamRecorder" /> class with default MediaFormat (8 kHz, 16 bit, 1 channel)
            </summary>
      <param name="stream">The output stream.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.#ctor(System.IO.Stream,Ozeki.Media.Audio.Waveform.Formats.WaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaHandlers.WaveStreamRecorder" /> class
            </summary>
      <param name="stream">The output stream.</param>
      <param name="waveFormat">The format of the recorded data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.DataReceived(System.Object,Ozeki.VoIP.VoIPEventArgs{Ozeki.VoIP.Media.AudioData})">
      <summary>
            This will be called when media data received from a media handler.
            </summary>
      <param name="sender">The object that sent the media data.</param>
      <param name="e">The data with format information.</param>
    </member>
    <member name="M:Ozeki.Media.MediaHandlers.WaveStreamRecorder.StopStreaming">
      <summary>
            Stops the streaming. (If the streaming is already stopped then does nothing.)
            </summary>
    </member>
    <member name="T:Ozeki.Media.MediaConnector">
      <summary>
            Class for creating connections between <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects.
            </summary>
      <remarks>
            The <see cref="T:Ozeki.Media.MediaConnector" /> class defines connections between <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects. These connections can be destroyed as well.
            
            A connection contains two <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects: a source and a destination. A connection operates only in one way.
            The media data will flow from the source to the destination.
            
            The connection performs automatic conversion between the source and destination media format.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.MediaConnector" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Connect(Ozeki.Media.MediaHandlers.AudioHandler,Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Connects two <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects. The media data will flow from the source to the destination.
            </summary>
      <param name="source">The media handler that sends the data.</param>
      <param name="destination">The media handler that receives the data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Disconnect(Ozeki.Media.MediaHandlers.AudioHandler,Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Closes the connection between two media handlers.
            </summary>
      <param name="source">The source media handler.</param>
      <param name="destination">The destination media handler.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Connect(Ozeki.Media.MediaHandlers.Video.VideoHandler,Ozeki.Media.MediaHandlers.Video.VideoHandler)">
      <summary>
            Connects two <see cref="T:Ozeki.Media.MediaHandlers.AudioHandler" /> objects. The media data will flow from the source to the destination.
            </summary>
      <param name="source">The media handler that sends the data.</param>
      <param name="destination">The media handler that receives the data.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Disconnect(Ozeki.Media.MediaHandlers.Video.VideoHandler,Ozeki.Media.MediaHandlers.Video.VideoHandler)">
      <summary>
            Closes the connection between two media handlers.
            </summary>
      <param name="source">The source media handler.</param>
      <param name="destination">The destination media handler.</param>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Dispose">
      <summary>
            Disposes the media connections. Note that the media handlers will not be disposed, only the connections.
            </summary>
    </member>
    <member name="M:Ozeki.Media.MediaConnector.Finalize">
      <summary>
      </summary>
    </member>
    <member name="T:Ozeki.Media.AudioConnection">
      <summary>
            Represents a connection between two audio handlers.
            </summary>
    </member>
    <member name="M:Ozeki.Media.AudioConnection.#ctor(Ozeki.Media.MediaHandlers.AudioHandler,Ozeki.Media.MediaHandlers.AudioHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioConnection" /> class
            </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
    </member>
    <member name="M:Ozeki.Media.AudioConnection.#ctor(Ozeki.Media.MediaHandlers.AudioHandler,Ozeki.Media.MediaHandlers.AudioHandler,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.AudioConnection" /> class
            </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
      <param name="convertFormat">
      </param>
    </member>
    <member name="T:Ozeki.VoIP.AbstractPhoneCall">
      <summary>
            Erre az abstract osztályra azért van szükség, mert az interface ben nem lehet definiálni internal metódusokat
            Így belül az egész rendszerben a rendes PhoneCall implementációval kell dolgozni, de hogy lehet így hozzá mockot csinálni ?
            Sehogy
            Mivel kifelé látszik az IPhoneLine, ezért én ehhez már nem nyúlok, nem olyan nagy probléma, ha ez itt marad
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.Accept">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.Accept(Ozeki.VoIP.Media.CallType)">
      <summary>
            Accept incoming call object.
            </summary>
      <remarks>
            If the call is not incoming one, the Accept has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.Start">
      <summary>
            Start the call process.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.Hold">
      <summary>
            Hold the call.
            </summary>
      <remarks>
            If the call is held than will be unheld and vica versa.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.HangUp">
      <summary>
            Hang Up the call.
            </summary>
      <remarks>
            If the call is ringing then cancels else stops.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.Reject">
      <summary>
            Reject incoming call object. 
            </summary>
      <remarks>
            If the call is not incoming one, the Reject action has no effect.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.ForwardCall(System.String)">
      <summary>
            Forward the incoming call to another phone device.
            </summary>
      <param name="forwardTo">The other phone to that the call is frowarded</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.BlindTransfer(System.String)">
      <summary>
            Transfer the call to another phone device.
            A blind transfer is defined as a transfer made without notifying the destination party before transferring the call.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.AttendedTransfer(Ozeki.VoIP.ICall)">
      <summary>
            Transfer the call to another phone device.
            An attended transfer is a transfer made after notifying the destination party of the transfer.
            </summary>
      <param name="target">The other phone to that the call is transferred</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.GetVoIPMediaFormats">
      <summary>
            Get the list of media formats
            </summary>
      <remarks>
      </remarks>
      <returns>The list of media formats</returns>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.StartDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Start some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be emitted.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.StartDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Start some DTMF event.
            </summary>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.StopDTMFSignal(Ozeki.VoIP.Media.VoIPMediaType,Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Stop some DTMF event.
            </summary>
      <param name="voipMediaType">The given media channel where the event is going to be stopped.</param>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.StopDTMFSignal(Ozeki.VoIP.DtmfNamedEvents)">
      <summary>
            Stop some DTMF event.
            </summary>
      <param name="signal">The event signal.</param>
      <remarks>
            Multiple DTMF signal can be sent on the same phonecall. It is necesary to start a signal and to stop it.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.SendMediaData(System.Int32,Ozeki.VoIP.Media.VoIPMediaData)">
      <summary>
            Sends raw media data with media type.
            </summary>
      <param name="mediaFormatID">The identifier of the format of the media data.</param>
      <param name="mediaData">The given raw data.</param>
      <remarks>
            Sends some media data on the phone call represented as PCM data in byte array
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.ModifyCallType(Ozeki.VoIP.Media.CallType)">
      <summary>
            Modifies the media used during the call.
            </summary>
      <param name="callType">The type of the call. It can be audio, video or audiovideo</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.SendInfo(System.String,System.String,System.String)">
      <summary>
            Sends info method to the other party.
            </summary>
      <param name="mimeType">The type of the info message</param>
      <param name="subMimeType">The subtype of the info message</param>
      <param name="contents">The content of the info message</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneCall.SendInstantMessage(Ozeki.VoIP.MimeType,System.String)">
      <summary>
            Sends Message to the other party.
            </summary>
      <param name="mimeType">The type of the message. The type can be plain text, DTMF or SDP</param>
      <param name="contents">The content of the message</param>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.Line">
      <summary>
            Ugyanaz mint a PhoneLine, csak a belül használt dolgokat is elérjük
             </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.CallState">
      <summary>
            The state of call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.DialInfo">
      <summary>
            The other party's number.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.TransferInfo">
      <summary>
      </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.PhoneLine">
      <summary>
            The correspondent phone line.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.SessionID">
      <summary>
            The ID of the call object.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.IsIncoming">
      <summary>
            It indicates the incoming property of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.PlainMediaData">
      <summary>
            Receive media data decoded as pcm or as plain compressed format.
            </summary>
      <remarks>
            When a user switches the PlainMediaData on, the phonecall starts to
            emit data that received. 
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.ReasonOfState">
      <summary>
            The human readable reason of state of the call.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneCall.SupportedMediaTypes">
      <summary>
            Gets the supported media types.
            </summary>
    </member>
    <member name="T:Ozeki.VoIP.AbstractPhoneLine">
      <summary>
            Erre az abstract osztályra azért van szüksége, mert az interface ben nem lehet definiálni internal metodusokat
            Így belül az egész rendszerben a rendes phoneLine implementációval kell dolgozni, de hogy lehet így hozzá mockot csinálni
            Sehogy
            Mivel kifelé látszik az IPhoneLine, ezért én ehhez már nem nyúlok, nem olyan nagy probléma, ha ez itt marad
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneLine.Dispose">
      <summary>
            Dispose the phoneline object.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneLine.SendOptionsMessage(System.String)">
      <summary>
            Sends SIP Options method.
            </summary>
      <param name="recipient">Receiver of the options message.</param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneLine.SendOutofDialogInstantMessage(System.String,System.String)">
      <summary>
            Sends an out of dialog instant message to SIP user agent.
            </summary>
      <param name="recipient">
      </param>
      <param name="content">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneLine.SubscribeToMWI">
      <summary>
            Subscribes the phone line to Message Waiting Indication.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.AbstractPhoneLine.UnsubscribeFromMWI">
      <summary>
            Unsubscribes the phone line from Message Waiting Indication.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.DoNotDisturb">
      <summary>
            Do Not Disturb functionality.
            </summary>
      <remarks>
            You can get and set the Do Not Disturb function on a phone line.
            If this property is true, the SoftPhone will automatically reject all incoming calls.
            Tf the property is false the IncomingCall event of the SoftPhone will be invoked. This
            event stores the Call object of the incoming call that can be accepted or rejected with the proper methods.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.AutoAnswer">
      <summary>
            Auto-answer functionality.
            </summary>
      <remarks>
            If the AutoAnswer property is true the SoftPhone will automatically accept all incoming calls,
            if it is false the SoftPhone will wait for an Accept() or Reject() method call for accepting or rejecting
            the incoming call.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.ExpirationTime">
      <summary>
            Registration time amount.
            </summary>
      <remarks>
            After the phone line registration the server sends an expiraton time that shown
            for how much time the server will store the address of the client.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.PhoneCalls">
      <summary>
            Phonecalls on the line.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.MessageSummary">
      <summary>
            Message summary information.
            </summary>
      <remarks>
            If no information is available, the object is null.
            </remarks>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.RegisteredInfoReason">
      <summary>
            The text representation of reason of state change.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.RegisteredInfo">
      <summary>
            The actual state of the phoneline.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.SIPAccount">
      <summary>
            The associated SIPAccount.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.TransportType">
      <summary>
            Gets the type of the transport.
            </summary>
      <value>
            The type of the transport.
            </value>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.SRTPMode">
      <summary>
            SRTP policy (none, perfer, force)
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.AbstractPhoneLine.NatSettings">
      <summary>
            Gets the NAT configuration of the phone line.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.AuthManager.AuthManager.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.AuthManager.AuthManager.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.AuthManager.AuthManager.SelectSIPAccount(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Selects the SIP account for the given response from the authentication database.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.AuthManager.AuthManager.HandleResponse(Ozeki.VoIP.SIP.Message.Response.Response,System.Int32)">
      <summary>
            Autentikalja a response-hoz tartozo requestet.
            </summary>
      <param name="resp">
      </param>
      <returns>Autentikalt request vagy null, ha nem kuldunk tobb autentikalt requestet (max limit).</returns>
    </member>
    <member name="P:Ozeki.VoIP.Softphone.UserAgent.AuthManager.AuthManager.UserAgent">
      <summary>
            Az Extension UserAgent-je
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.Info.InfoManager.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.Info.InfoManager.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.Softphone.UserAgent.Info.InfoManager.UserAgent">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.InstantMsgManager.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.InstantMsgManager.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.InstantMsgManager.HandleInDialogMessageRequest(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            indialog message requestet kezeli, amennyiben indialog requestrol van szó. 
            </summary>
      <param name="msg">
      </param>
      <returns>ha sikertelen a kezelése false-l tér vissza  </returns>
    </member>
    <member name="P:Ozeki.VoIP.Softphone.UserAgent.InstantMsgManager.UserAgent">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.ICallFactory.CreateOutgoingPhoneCall(Ozeki.VoIP.AbstractPhoneLine,System.String,System.Collections.Generic.List{Ozeki.Media.MediaType},Ozeki.VoIP.DialInfo)">
      <summary>
            Creates outgoing calls with media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.ICallFactory.CreateIncomingPhoneCall(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,Ozeki.Media.Session.MediaDescription,System.String,Ozeki.VoIP.TransferInfo)">
      <summary>
            Creates incoming call with media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.ICallFactory.CreateIncomingCallWithoutChannels(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,Ozeki.Media.Session.MediaDescription,System.String,Ozeki.VoIP.TransferInfo)">
      <summary>
            Creates an incoming call without media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallFactory.CreateOutgoingPhoneCall(Ozeki.VoIP.AbstractPhoneLine,System.String,System.Collections.Generic.List{Ozeki.Media.MediaType},Ozeki.VoIP.DialInfo)">
      <summary>
            Creates outgoing calls with media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallFactory.CreateIncomingPhoneCall(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,Ozeki.Media.Session.MediaDescription,System.String,Ozeki.VoIP.TransferInfo)">
      <summary>
            Creates incoming call with media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallFactory.CreateIncomingCallWithoutChannels(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,Ozeki.Media.Session.MediaDescription,System.String,Ozeki.VoIP.TransferInfo)">
      <summary>
            Creates an incoming call without media description.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.Accept(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Accepts an incoming call and sends a 200 OK response to the INVITE.
            </summary>
      <param name="call">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.Reject(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Rejects an incoming call and sends a 486 Busy Here response.
            </summary>
      <remarks>
            13.3.1.3 UAS Processing / Processing of the INVITE / The INVITE is Rejected
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.Start(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Starts a call session by sending an INVITE request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.Cancel(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Cancels a pending outgoing call by sending a CANCEL request to the INVITE.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.HangUp(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Hangs up an active call session (sends a BYE request).
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ReInvite(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Sends a re-INVITE withing a dialog.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ForwardCall(Ozeki.VoIP.AbstractPhoneCall,System.String)">
      <summary>
            Forwards an incoming call to another extension.
            </summary>
      <remarks>
            13.3.1.2 UAS Processing / Processing of the INVITE / The INVITE is Redirected
            If the UAS decides to redirect the call, a 3xx response is sent. A
            300 (Multiple Choices), 301 (Moved Permanently) or 302 (Moved Temporarily)
            response SHOULD contain a Contact header field
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessBye(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles a BYE request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessAck(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming ACK request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessCancel(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Handles an incoming CANCEL request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessInvite(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming mid-dialog INVITE request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessRegister(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming REGISTER request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProcessOptions(Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming OPTIONS request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.HandleResponse(Ozeki.VoIP.SIP.Layers.Dialog.DialogID,Ozeki.VoIP.SIP.Message.Response.Response,Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Handles response messages.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ProvisionalResponse(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Handles provisional responses (1xx)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.SuccesfulResponse(Ozeki.VoIP.SIP.Layers.Dialog.DialogID,Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Handles 200 OK response.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.Redirection(Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Handles 3xx responses.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.RequestFailure(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Handles 4xx responses.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.GetDialog(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Gets the dialog that belongs to the specified call.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.ModifyCallSession(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Kuldtunk egy re-INVITE-ot, es megkaptuk ra az OK-ot.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.PendingCallAffirmed(Ozeki.VoIP.SIP.Layers.Dialog.DialogID,Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.VoIP.SIP.Message.Response.Response)">
      <summary>
            Kimeno hivas eseten elkuldtek a 200 OK-ot (jobb esetben benne az SDP-vel)
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.CallManager.GetInvite(Ozeki.VoIP.AbstractPhoneCall)">
      <summary>
            Adott hivast kezdemenyezo INVITE request lekerese
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.InviteConsumer.CheckSecuritySuite(System.Collections.Generic.List{Ozeki.Media.Session.CryptoDescription})">
      <summary>
            Leellenőrzi hogy a bejövő hívás, mely srtp-t használ egyáltalán tudjuk-e decryptálni az srtp enkódolt részt. (vagyis támogatjuk-e ezt az crypto algoritmust)
            </summary>
      <param name="cryptoDescriptions">Crypto algoritmusokat tartalmazó lista</param>
      <returns>Visszaadja, hogy az érkezett encypt algoritmusok között van-e támogatott true ha elfogadott.</returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.IncomingCallManager.Ringing(Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.VoIP.AbstractPhoneLine)">
      <summary>
            180 Ringing
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.ProcessInviteStrategy.ProcessInvite(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request)">
      <summary>
            Handles an incoming mid-dialog INVITE request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.ProcessInviteStrategy.ProcessMidDialogInvite(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Message.Request.Request,Ozeki.Media.Session.CommunicationMode)">
      <summary>
            Handles a mid-dialog INVITE request.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.CallManager.ProcessInviteStrategy.RemotelyModifyCallSession(Ozeki.VoIP.AbstractPhoneCall,Ozeki.VoIP.SIP.Layers.UA.SIPSessionDescription)">
      <summary>
            Modify call session driven by the callee
            </summary>
      <remarks>
            In this case the callee sent a re-INVITE request to modify the media session,
            and we accept the changes.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.PhoneLineManager.PhoneLineContainer.GetPhoneLine(Ozeki.VoIP.SIP.Layers.Transport.TransportInfo)">
      <summary>
            Ha nem talalja, akkor null ertekkel ter vissza
            </summary>
      <param name="transportInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.Unregister(Ozeki.VoIP.AbstractPhoneLine)">
      <summary>
            Unregisters a SIP account
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.CreateRegisterRequest(Ozeki.VoIP.AbstractPhoneLine,System.Int32)">
      <summary>
            Creates a REGISTER request.
            </summary>
      <param name="line">
      </param>
      <param name="expires">Phone line expiration time. If 0, it will be an unregister request.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.HandleSuccessfulResponse(Ozeki.VoIP.SIP.Message.Response.Response,Ozeki.VoIP.AbstractPhoneLine,System.Boolean)">
      <summary>
            Handles 200 OK response.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.HandleMinExpiresResponse(Ozeki.VoIP.SIP.Message.Response.Response,Ozeki.VoIP.AbstractPhoneLine)">
      <summary>
            Handles 423 Interval Too Brief response.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.HandleErrorResponses(Ozeki.VoIP.SIP.Message.Response.Response,Ozeki.VoIP.AbstractPhoneLine,System.Boolean)">
      <summary>
            Handles the error responses.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.RegistrationManager.GetPhoneLine(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Gets the PhoneLine for the given SIP message.
            </summary>
      <returns>The PhoneLine or null if not found</returns>
    </member>
    <member name="T:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber">
      <summary>
            Subscriber
            </summary>
      <remarks>
              Subscriber: A subscriber is a user agent which receives NOTIFY
                 requests from notifiers; these NOTIFY requests contain information
                 about the state of a resource in which the subscriber is
                 interested.  Subscribers typically also generate SUBSCRIBE
                 requests and send them to notifiers to create subscriptions.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber.#ctor(Ozeki.VoIP.SIP.ProtocolLayer.ISIPProtocolLayer,Ozeki.VoIP.SIP.Layers.MessageFactory,Ozeki.VoIP.SIP.Layers.Dialog.IDialogContainer,Ozeki.VoIP.SIP.Layers.Transaction.ITransactionContainer,Ozeki.VoIP.SIP.Layers.IDFactories.IIDFactory,Ozeki.VoIP.SIP.Layers.CSequencer,Ozeki.VoIP.IPhoneLine,System.String,Ozeki.VoIP.SIP.SIPAddress,System.String,System.Int32,Ozeki.Network.TransportType,Ozeki.VoIP.SIP.Layers.Dialog.DialogID)">
      <summary>
            Subscriber
            </summary>
      <param name="sipProtocolLayer">
      </param>
      <param name="messageFactory">
      </param>
      <param name="dialogContainer">
      </param>
      <param name="transactionContainer">
      </param>
      <param name="idGenerator">
      </param>
      <param name="cSequencer">
      </param>
      <param name="phoneLine">
      </param>
      <param name="eventType">
      </param>
      <param name="contactAddress">
      </param>
      <param name="localAddress">
      </param>
      <param name="localPort">
      </param>
      <param name="transportType">
      </param>
      <param name="dialogID">
      </param>
      <param name="userAgent">A UserAgent, az üzenet kreáláshoz szükséges dolgokat tartalmazza.</param>
      <param name="userAddress">A felhasználó akihez tartoznak a subscriptio-öknek.</param>
      <param name="contact">Publikus kontakt információ.</param>
      <param name="callId">Az általános azonosító ami a subscription-öket azonosítja</param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber.RefreshSubscription(System.Int32)">
      <summary>
            A subscription-ök frissítése új SUBSCRIBE üzenetek kiküldésével.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber.HandleReceivedMessages(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Beérkezett üzenet lekezelése.
            </summary>
      <param name="msg">Az üzenet maga.</param>
      <remarks>
            Kérések esetén csak a NOTIFY érdekel minket, ekkor keresünk neki egy dialógust
            és feldolgozzuk. Ha válasz üzenet akkor két eset lehetséges. Ha ok akkor felvesszük
            s subscriptin-t a requestedekből a konfirmedbe, ha authentikálni kell, megkérjük a
            modulhoz csatolt authentikációs menedzsert, hogy ezt tegye meg nekünk. Ha más hibaüzenet
            jön akkor pedig töröljük a subscription-t, abban az esetben ha requested volt.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber.SendInitialSubscription(System.Int32)">
      <summary>
            Kezdeti Subscription üzenet kiküldése.
            </summary>
      <param name="eventType">Subscription amit tartalmazzon az üzenet.</param>
      <param name="expires">A subscription lejárati ideje.</param>
    </member>
    <member name="M:Ozeki.VoIP.SIP.Extensions.RFC3265.UserAgent.Subscriber.IsAcceptable">
      <summary>
            Ha terminated állapotba kerul, akkor már nem dobok fel semmit se
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.Subscription.SubscriptionManager.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.Subscription.SubscriptionManager.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.Softphone.UserAgent.Subscription.SubscriptionManager.UserAgent">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.TransferManager.HandleMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
            Handle the message in this layer.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.Softphone.UserAgent.TransferManager.IsAppropriateMessage(Ozeki.VoIP.SIP.Message.SIPMessage)">
      <summary>
      </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.VoIP.Softphone.UserAgent.TransferManager.UserAgent">
      <summary>
            Lower layer of SIP Stack.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.RemoteAnsweredMediaDescription(Ozeki.Media.Session.MediaDescription)">
      <summary>
            Mi küldtünk egy offert, és a túlsó oldal küldött rá választ.
            </summary>
      <param name="answer">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.ReceiveRemoteOffer(Ozeki.Media.Session.MediaDescription)">
      <summary>
            A túlsó oldal küldött egy felajánlást. A media stream-eket újra kell vizsgálni (változott valamelyik,
            új csatornát küld, egy meglévőt megszüntetett stb.) 
            </summary>
      <param name="offer">Tartalmazza az SDP-ben küldött media információkat.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.NextCallState(Ozeki.VoIP.CallState,System.String)">
      <summary>
            A hívást a megadott állapotba állítja ha lehetséges.
            </summary>
      <param name="newCallState">
      </param>
      <remarks>
            Későbbiekben eltűnik.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.CallError(Ozeki.VoIP.CallError,System.String)">
      <summary>
            Hiba jelzése a hívás számára
            </summary>
      <param name="callError">
      </param>
      <remarks>
            Későbbiekben eltűnik.
            </remarks>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.Close">
      <summary>
            A hívás objektum lezárása.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.Stop">
      <summary>
            A hívásindítás visszavonása, ha a hívás állapota nem érte még el az InCall-t.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.HangUp">
      <summary>
            A hívás letétele, az állapotból számítható valamint a Cancel és Stop kombinációja. Kényelmi funkció.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.Cancel">
      <summary>
            A hívásindítás visszavonása, ha a hívás állapota nem érte még el az InCall-t.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.ModifyCallType(Ozeki.VoIP.Media.CallType)">
      <summary>
            Hívás közben csatornák módosítása.
            </summary>
      <param name="callType">
      </param>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.PhoneCall.HoldForTransfer(Ozeki.VoIP.AbstractPhoneCall,System.EventHandler)">
      <summary>
            Ha azonnal sikerül, akkor true val tér vissza
            </summary>
      <param name="call">
      </param>
      <param name="callback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.IncomingPhoneCall.#ctor(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,System.String,Ozeki.VoIP.Softphone.UserAgent.IPhoneCallControl,Ozeki.VoIP.SDP.SDPProvider.ISDPProvider,Ozeki.VoIP.PhoneCalls.Session.ISessionManager,Ozeki.VoIP.TransferInfo)">
      <summary>
            Konstruktor ami a bejövő hívásokhoz készíti el a PhoneCall objektumot, abban az esetben ha a távoli oldal nem csatolt
            SDP-t az INVITE-hoz.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.IncomingPhoneCall.Start">
      <summary>
            Bejövő hívást nem lehet startolni
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.OutgoingPhoneCall.#ctor(Ozeki.VoIP.AbstractPhoneLine,Ozeki.VoIP.DialInfo,Ozeki.VoIP.Softphone.UserAgent.IPhoneCallControl,System.String,Ozeki.VoIP.SDP.SDPProvider.ISDPProvider,Ozeki.VoIP.PhoneCalls.Session.ISessionManager,Ozeki.VoIP.DialInfo)">
      <summary>
            Konstruktor ami a kimenő hívásokhoz készíti el a PhoneCall objektumot.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneCalls.OutgoingPhoneCall.Start">
      <summary>
            Start the call process.
            </summary>
    </member>
    <member name="M:Ozeki.VoIP.PhoneLines.PhoneLine.SetExpiresTimer(System.Int32)">
      <summary>
            Sets the re-registration time.
            </summary>
      <param name="exp">The value in seconds (from Expires header).</param>
    </member>
    <member name="P:Ozeki.VoIP.PhoneLines.PhoneLine.PhoneCalls">
      <summary>
            Gets the collection of phone calls which belong to the phone line.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneLines.PhoneLine.SIPAddress">
      <summary>
            Gets the associated SIP address.
            </summary>
    </member>
    <member name="P:Ozeki.VoIP.PhoneLines.PhoneLine.ReRegistration">
      <summary>
            A telefonvonal alapértelmezettként újraregisztrál, ki lehet kapcsolni, de csak egyseri alkalommal.
            </summary>
      <remarks>
            Ez csak csonk ként van a kódban. A registration timed out esemény feljön, amit az UAC automatikusan le is kezel. 
            </remarks> Nem tudom, hogy regen hol volt kezelve a regtimeout, de most sehol nincs, de a softphone megkapja ezt az esemenyt es ilyenkor eleg egyszeru a dolog, csak ujraregisztralom.
        </member>
    <member name="E:Ozeki.VoIP.PhoneLines.PhoneLine.Disposed">
      <summary>
            Occurs when the PhoneLine has been disposed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.AVReader">
      <summary>
            Audio/Video reader
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.AVReader.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Media.Video.Controls.VideoViewerWPF">
      <summary>
            Represents a WPF Control to display video.
            </summary>
      <summary>
            VideoViewerWPF
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.#ctor">
      <summary>
            Creates an instance of the VideoViewerWPF class
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.SetImageProvider(Ozeki.Media.Video.IImageProvider{System.Windows.Media.Imaging.BitmapSource})">
      <summary>
            Sets an <see cref="T:Ozeki.Media.Video.IImageProvider`1" /> object that will provide images for displaying. If no image provider set, the control will not display anything.
            </summary>
      <param name="imageProvider">The specified image provider.</param>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.Start">
      <summary>
            Starts the video playing
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.Stop">
      <summary>
            Stops playing the video
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.ResetTransforms">
      <summary>
            Reset the video transformation values to the starting values. The FlipMode will be set to None and the RotateAngle to 0.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.Dispose">
      <summary>
            Disposes the resources used by the control.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWPF.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.Controls.VideoViewerWPF.CurrentFrame">
      <summary>
            Gets the BitmapSource object of the current frame
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.Controls.VideoViewerWPF.FlipMode">
      <summary>
            Gets or sets the flip mode for the video frames
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.Controls.VideoViewerWPF.RotateAngle">
      <summary>
            Gets or sets the rotate angle for the video frames. The valid values are 0, 90, 180 and 270
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.Converters.BitmapSourceConverter">
      <summary>
            Converts <see cref="T:System.Windows.Interop.InteropBitmap" /> data type to an array of bytes, and an array of bytes to <see cref="F:Ozeki.Media.Video.Converters.BitmapSourceConverter._bitmapSource" />.
            </summary>
      <remarks>
            A konverter lefoglal egy memóriaterületet. Az InteropBitmap erről a memóriaterületről dolgozik.
            Konvertáláskor a kapott byte array-t erre a memóriaterületre másolja át, így a kép automatikusan előáll.
            A lefoglalt terület mérete függ az előállított kép méretétől, így konvertálás előtt inicializálni kell a konvertert.
            Ha más méretű képet akarunk előállítani, akkor újra kell inicializálni.
            </remarks>
    </member>
    <member name="M:Ozeki.Media.Video.Converters.BitmapSourceConverter.ByteArrayToObject(System.Byte[])">
      <summary>
            Converts an array of bytes to a <see cref="T:System.Windows.Interop.InteropBitmap" /> object.
            </summary>
      <param name="array">The array of bytes.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:Ozeki.Media.Video.Converters.BitmapSourceConverter.GetBytes(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            Converts the specified <see cref="T:System.Windows.Interop.InteropBitmap" /> object to an array of bytes.
            </summary>
      <param name="obj">The object that is to be converted.</param>
      <returns>The specified object as an array of bytes.</returns>
    </member>
    <member name="T:Ozeki.Media.Video.Converters.DrawingImageConverter">
      <summary>
            Converts <see cref="T:System.Drawing.Image" /> data type to an array of bytes, and an array of bytes to <see cref="T:System.Drawing.Image" />.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Converters.DrawingImageConverter.ByteArrayToObject(System.Byte[])">
      <summary>
            Converts an array of bytes to a <see cref="T:System.Drawing.Image" /> object.
            </summary>
      <param name="array">The array of bytes.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:Ozeki.Media.Video.Converters.DrawingImageConverter.GetBytes(System.Drawing.Image)">
      <summary>
            Converts the specified <see cref="T:System.Drawing.Image" /> object to an array of bytes.
            </summary>
      <param name="obj">The object that is to be converted.</param>
      <returns>The specified object as an array of bytes.</returns>
    </member>
    <member name="T:Ozeki.Media.Video.IImageProvider`1">
      <summary>
            The interface that should be implemented by image providers
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Ozeki.Media.Video.Controls.VideoViewerWF">
      <summary>
            Represents a Windows Control to display video.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.Controls.VideoViewerWF" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.SetImageProvider(Ozeki.Media.Video.IImageProvider{System.Drawing.Image})">
      <summary>
            Sets an <see cref="T:Ozeki.Media.Video.IImageProvider`1" /> object that will provide images for displaying. If no image provider set, the control will not display anything.
            </summary>
      <param name="imageProvider">The specified image provider.</param>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.Start">
      <summary>
            Starts playing the video.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.Stop">
      <summary>
            Stops playing the video.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.ResetTransforms">
      <summary>
            Resets the flip and rotate information to 0.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Controls.VideoViewerWF.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:Ozeki.Media.Video.Controls.VideoViewerWF.FlipMode">
      <summary>
            Gets or sets a value that indicates the displayed image is flipped vertically or horizontally.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.Controls.VideoViewerWF.RotateAngle">
      <summary>
            Gets or sets a value that indicates the rotation angle in degrees to apply to the image in the control.
            Only 0, 90, 180 or 270 values are allowed.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.Imaging.BitmapSourceTransform">
      <summary>
            Egy BitmapSource objektumot tud tukrozni vagy elforgatni.
            </summary>
      <remarks>
            Hasznalat:
            1. Konstruktorban megadjuk a source-t, beallitjuk a Property-ket.
            2. Meghivjuk a Transform()-ot
            3. Attol fuggoen, hogyan akarjuk visszakapni az alakitott kepet meghivjuk a
               GetBytes() vagy GetTransformedBitmap()-et
            </remarks>
    </member>
    <member name="T:Ozeki.Media.Video.Imaging.FlipMode">
      <summary>
            Defines constants for flipping an image at render time.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Video.Imaging.FlipMode.None">
      <summary>
            No flipping is used.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Video.Imaging.FlipMode.FlipX">
      <summary>
            Flip horizontally.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Video.Imaging.FlipMode.FlipY">
      <summary>
            Flip vertically.
            </summary>
    </member>
    <member name="F:Ozeki.Media.Video.Imaging.FlipMode.FlipXY">
      <summary>
            Flip horizontally and vertically.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.Imaging.Resolution">
      <summary>
            Represents the resolution od a video stream
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Imaging.Resolution.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.Imaging.Resolution" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.Imaging.Resolution.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.Imaging.Resolution" /> class.
            </summary>
      <param name="width">Horizontal pixels.</param>
      <param name="height">Vertical pixels.</param>
    </member>
    <member name="M:Ozeki.Media.Video.Imaging.Resolution.Equals(System.Object)">
      <summary>
            Checks if the current Resolution is equal to the parameter object
            </summary>
      <param name="obj">The object to be compared to the current Resolution</param>
      <returns>true if the current resolution is equal to the parameter object, otherwise false</returns>
    </member>
    <member name="M:Ozeki.Media.Video.Imaging.Resolution.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Ozeki.Media.Video.Imaging.Resolution.Width">
      <summary>
            Gets the number of the horizonal pixels.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.Imaging.Resolution.Height">
      <summary>
            Gets the number of the vertical pixels.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.InternalVideoDeviceInfo.DeviceID">
      <summary>
            Gets the identifier of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.InternalVideoDeviceInfo.Name">
      <summary>
            Gets the name of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.InternalVideoDeviceInfo.Capabilities">
      <summary>
            Gets the supported resolutions and frame rates of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.InternalVideoDeviceInfo.MonikerString">
      <summary>
            Gets the display name of the device moniker.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.MPEG4Writer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Ozeki.Media.Video.MPEG4WriterX64.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Ozeki.Media.Video.VideoCapabilities">
      <summary>
            Provides information about the supported resolutions and frame rates for a video device.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCapabilities.ToString">
      <summary>
            Returns the string representation of the current object
            </summary>
      <returns>The string that represents the current object</returns>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCapabilities.Resolution">
      <summary>
            Gets the resolution of a frame.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCapabilities.MaxFrameRate">
      <summary>
            Gets the maximum supported frame rate for the resolution.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.VideoDeviceInfo">
      <summary>
            Provides information about a video capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoDeviceInfo.DeviceID">
      <summary>
            Gets the identifier of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoDeviceInfo.Name">
      <summary>
            Gets the name of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoDeviceInfo.Capabilities">
      <summary>
            Gets the supported resolutions and frame rates of the device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoDeviceInfo.MonikerString">
      <summary>
            Gets the display name of the device moniker.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.VideoDeviceInfoEx">
      <summary>
            This class stores methods that can transform between VideoDeviceInfo and InternalVideoDeviceInfo objects
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoDeviceInfoEx.AsInternalVideoDeviceInfo(Ozeki.Media.Video.VideoDeviceInfo)">
      <summary>
            Transforms the current VideoDeviceInfo into InternalVideoDeviceInfo
            </summary>
      <param name="info">The current VideoDeviceInfo</param>
      <returns>The transformed InternalVideoDeviceInfo</returns>
    </member>
    <member name="M:Ozeki.Media.Video.VideoDeviceInfoEx.AsVideoDeviceInfo(Ozeki.Media.Video.InternalVideoDeviceInfo)">
      <summary>
            Transforms the current InternalVideoDeviceInfo into VideoDeviceInfo
            </summary>
      <param name="info">The current InternalVideoDeviceInfo</param>
      <returns>The transformed VideoDeviceInfo</returns>
    </member>
    <member name="T:Ozeki.Media.Video.VideoCaptureEventArgs">
      <summary>
            Provides data for the <see cref="E:Ozeki.Media.Video.IVideoCaptureDevice.ImageCaptured" />  event.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.VideoCaptureEventArgs" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureEventArgs.#ctor(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.VideoCaptureEventArgs" /> class.
            </summary>
      <param name="buffer">Pointer to a buffer that contains the sample data.</param>
      <param name="data">The byte array that contains the sample data.</param>
      <param name="width">The width of the captured image (in pixels).</param>
      <param name="height">The height of the captured image (in pixels).</param>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureEventArgs.SampleData">
      <summary>
            Gets the byte array that contains the sample data.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureEventArgs.Buffer">
      <summary>
            Gets the pointer to a buffer that contains the sample data.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureEventArgs.Width">
      <summary>
            Gets the width of the captured image.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureEventArgs.Height">
      <summary>
            Gets the height of the captured image.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.IVideoCaptureDevice.ChangeDevice(System.Int32)">
      <summary>
            Changes the capturing device. If the capturer is already capturing then restarts it.
            </summary>
      <param name="deviceID">The identifier of the capturing device.</param>
    </member>
    <member name="E:Ozeki.Media.Video.IVideoCaptureDevice.ImageCaptured">
      <summary>
            Occurs when an image captured from the capturing device.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Video.IVideoCaptureDevice.Stopped">
      <summary>
            Occurs when the capturing has stopped.
            </summary>
    </member>
    <member name="T:Ozeki.Media.Video.VideoCaptureDevice">
      <summary>
            Can capture image from webcamera
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.#ctor(Ozeki.Media.Video.InternalVideoDeviceInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Ozeki.Media.Video.VideoCaptureDevice" /> class.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.ChangeDevice(System.Int32)">
      <summary>
            Changes the capturing device. If the camera is already capturing then restarts it.
            </summary>
      <param name="deviceID">
      </param>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.Start">
      <summary>
            Starts the capturing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.Stop">
      <summary>
            Stops the capturing.
            </summary>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.GetDevices">
      <summary>
            Retrieves the available capturing devices.
            </summary>
      <returns>The list containing the devices.</returns>
    </member>
    <member name="M:Ozeki.Media.Video.VideoCaptureDevice.Finalize">
      <summary>
            Finalizer. Only called when user forgets to call <see>Dispose</see></summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.DeviceInfo">
      <summary>
            Gets the capabilities of the selected capturing device.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.CurrentFrameRate">
      <summary>
            Gets the current frame rate of the capture.
            (Aktuális FPS)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.FrameSize">
      <summary>
            Gets or sets the size of the captured frames.
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.DesiredFrameRate">
      <summary>
            Gets or sets the desired frame rate. If this value is set to 0 then maximum frame rate will be used.
            (Kívülről állítjuk be, hogy ha lehet, ennyi FPS-el menjen.)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.CameraFrameRate">
      <summary>
            Gets the average frame rate of the device.
            (Kamerának beállított FPS)
            </summary>
    </member>
    <member name="P:Ozeki.Media.Video.VideoCaptureDevice.Capturing">
      <summary>
            Gets a boolean value indicating whether the capuring is started.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Video.VideoCaptureDevice.ImageCaptured">
      <summary>
            Occurs when an image captured from the capturing device.
            </summary>
    </member>
    <member name="E:Ozeki.Media.Video.VideoCaptureDevice.Stopped">
      <summary>
            Occurs when the capturing has stopped.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.AsObject.ConvertToASObject">
      <summary>
            FluorineFX
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Ozeki.MediaGateway.ClientType">
      <summary>
            An enum for MediaGateway client types
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.ClientType.Silverlight">
      <summary>
            Microsoft Silverlight client type
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.ClientType.Flash">
      <summary>
            Adobe Flash client type
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.ClientType.WindowsPhone">
      <summary>
            Windows Phone client type
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Config.FlashConfig">
      <summary>
            Flash client connection configuration
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.FlashConfig.ListenedPort">
      <summary>
            Listening port for a Flash Mediagateway client. Default value: 1935.
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.FlashConfig.ServiceName">
      <summary>
            The service name, the Flash client can use for the server connection. Default value: FlashMediaGateway
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Config.SilverlightConfig">
      <summary>
            Configuration for Silverlight Mediagateway clients
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.SilverlightConfig.ListenedPort">
      <summary>
            Listening port for a Silverlight client. Default value:4502. Value must be in range 4502-4532
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.SilverlightConfig.ServiceName">
      <summary>
            The service name the Silverlight client can use for the server connection. Default value: SilverlightMediaGateway
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.WindowsPhoneConfig.ListenedPort">
      <summary>
            Listening port for a Socket client. Default value:4503. 
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.WindowsPhoneConfig.ServiceName">
      <summary>
            The service name the Silverlight client can use for the server connection. Default value: SilverlightMediaGateway
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.IData">
      <summary>
            Interface for managing the three transferable data types (audio, video invoke) for a common way.
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.MediaData">
      <summary>
            Abstract class for Mediagateway media data
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.AudioData">
      <summary>
            A class for Mediagateway audio data type
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.VideoData">
      <summary>
            MEdiagateway video data type
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.IClient.InvokeMethod(System.String,System.Object[])">
      <summary>
            Method for invoke client side methods.
            </summary>
      <param name="methodName">Name of the method that wants to invoke on client side.</param>
      <param name="parameters">Parameters only support ASObject and value types.</param>
    </member>
    <member name="P:Ozeki.MediaGateway.IClient.RemoteAddress">
      <summary>
            Address of the representes client.
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.IClient.ClientType">
      <summary>
            Type of represented client.
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.CodecType">
      <summary>
            An enum for Mediagateway codec types
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.CodecType.PCM">
      <summary>
            PCM codec
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.CodecType.Speex8000">
      <summary>
            Speex8000 codec
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.CodecType.H264">
      <summary>
            H.264 codec
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.CodecType.Jpeg">
      <summary>
            Jpeg codec
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.IMediaStream">
      <summary>
            Interface for MediaStreams
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.IMediaStream.SendMediaData(Ozeki.MediaGateway.Data.IData)">
      <summary>
            Sends an IData object to the destination. 
            </summary>
      <param name="data">The transferable IData type.</param>
    </member>
    <member name="P:Ozeki.MediaGateway.IMediaStream.Name">
      <summary>
            MediaStream name
            </summary>
    </member>
    <member name="E:Ozeki.MediaGateway.IMediaStream.MediaDataReceived">
      <summary>
            Occurs when data received.
            </summary>
    </member>
    <member name="E:Ozeki.MediaGateway.IMediaStream.Closed">
      <summary>
            Occurs when MediaStream closed.
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.MediaGatewayException">
      <summary>
            An SDK exception class for MediaGateway exceptions.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashClient.InvokeMethod(System.String,System.Object[])">
      <summary>
            Parameters only support ASObject and value types
            </summary>
      <param name="methodName">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPublishStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            A broadcast stream starts being published. This will be called when the first video packet has been received.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamRecordStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            A broadcast stream starts being recorded. This will be called when the first video packet has been received.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamBroadcastStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            Notified when a broadcaster starts.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamBroadcastClose(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            Notified when a broadcaster closes.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamSubscriberStart(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
      <summary>
            Notified when a subscriber starts.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamSubscriberClose(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
      <summary>
            Notified when a subscriber closes.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPlaylistItemPlay(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Boolean)">
      <summary>
            Notified when a playlist item plays.
            </summary>
      <param name="stream">Stream object.</param>
      <param name="item">Playitem.</param>
      <param name="isLive">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPlaylistItemStop(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem)">
      <summary>
            Notified when a playlist item stops.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPlaylistVODItemPause(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item pauses.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPlaylistVODItemResume(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item resumes.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.StreamPlaylistVODItemSeek(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item seeks.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.IsPlaybackAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.Int64,System.Int64,System.Boolean)">
      <summary>
            Check if playback of a stream with the given name is allowed.
            </summary>
      <param name="scope">Scope the stream is about to be played back from.</param>
      <param name="name">Name of the stream to play.</param>
      <param name="start">Position to start playback from (in milliseconds).</param>
      <param name="length">Duration to play (in milliseconds).</param>
      <param name="flushPlaylist">Flush playlist.</param>
      <returns>true if playback is allowed, otherwise false.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashProvider.IsPublishAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.String)">
      <summary>
            Check if publishing a stream with the given name is allowed.
            </summary>
      <param name="scope">Scope the stream is about to be published in.</param>
      <param name="name">Name of the stream to publish.</param>
      <param name="mode">Publishing mode.</param>
      <returns>true if publishing is allowed, otherwise false.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashStreamPublisherService.CreateStream(System.String)">
      <summary>
            A megadott néven létre tudunk hozni egy sdtream et a szerveren. Erre a stream-re más kliensek feliratkozhatnak.
            Pl.: Így oldható meg a SIP-RTMP client communikáció.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.FlashStreamPublisherService.RemoveStream(FluorineFx.Messaging.Rtmp.Stream.BroadcastStream)">
      <summary>
            Ha nincs szükségünk tovább a megadott stream re, akkor eltávolítjuk a rendszerből.
            </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPublishStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            A broadcast stream starts being published. This will be called when the first video packet has been received.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamRecordStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            A broadcast stream starts being recorded. This will be called when the first video packet has been received.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamBroadcastStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            Notified when a broadcaster starts.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamBroadcastClose(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
      <summary>
            Notified when a broadcaster closes.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamSubscriberStart(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
      <summary>
            Notified when a subscriber starts.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamSubscriberClose(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
      <summary>
            Notified when a subscriber closes.
            </summary>
      <param name="stream">Stream object.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPlaylistItemPlay(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Boolean)">
      <summary>
            Notified when a playlist item plays.
            </summary>
      <param name="stream">Stream object.</param>
      <param name="item">Playitem.</param>
      <param name="isLive">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPlaylistItemStop(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem)">
      <summary>
            Notified when a playlist item stops.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPlaylistVODItemPause(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item pauses.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPlaylistVODItemResume(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item resumes.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.StreamPlaylistVODItemSeek(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
      <summary>
            Notified when a playlist vod item seeks.
            </summary>
      <param name="stream">
      </param>
      <param name="item">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.IsPlaybackAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.Int64,System.Int64,System.Boolean)">
      <summary>
            Check if playback of a stream with the given name is allowed.
            </summary>
      <param name="scope">Scope the stream is about to be played back from.</param>
      <param name="name">Name of the stream to play.</param>
      <param name="start">Position to start playback from (in milliseconds).</param>
      <param name="length">Duration to play (in milliseconds).</param>
      <param name="flushPlaylist">Flush playlist.</param>
      <returns>true if playback is allowed, otherwise false.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Flash.ProxyApplicationAdapter.IsPublishAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.String)">
      <summary>
            Check if publishing a stream with the given name is allowed.
            </summary>
      <param name="scope">Scope the stream is about to be published in.</param>
      <param name="name">Name of the stream to publish.</param>
      <param name="mode">Publishing mode.</param>
      <returns>true if publishing is allowed, otherwise false.</returns>
    </member>
    <member name="T:Ozeki.MediaGateway.MConnectionState">
      <summary>
            An enum for MEdiaGateway connection states
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.MConnectionState.Success">
      <summary>
            Mediagateway connection succeeded
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.MConnectionState.LncTrialPeriod">
      <summary>
            Mediagateway trial period
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.MConnectionState.LncTrialPeriodExpired">
      <summary>
            MEdiagateway trial period has been expired, the connection has been failed
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.MConnectionState.LncConnectionLimit">
      <summary>
            Mediagateway connection limit has been exceeded, the connection has been failed
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Provider.Silverlight.SilverlightProvider.ClientAccessPolicy">
      <summary>
            Azért innen adom át, mert így nem kell statikus konstruktort csinálnom. A statikus konstruktorral az a baj, hogy minden metódushíváskor megnézi a runtime, hogy meghívódott e már ezért tetü lassú lesz az osztály
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.MediaGateway">
      <summary>
            Abstract mediagateway service class.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.#ctor">
      <summary>
            Create a new instance of MediaGateway. Configuration will be read from App.config file.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.#ctor(Ozeki.MediaGateway.Config.MediaGatewayConfig)">
      <summary>
            Create a new instance of MediaGateway with a MediaGatewayConfig object.
            </summary>
      <param name="configuration">MediaGatewayConfig </param>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.Start">
      <summary>
            Starts the service.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.GetService``1">
      <summary>
            It returns the Mediagateway services. (Invoke it after you started the Mediagateway service.)
            </summary>
      <typeparam name="T">Type of service.</typeparam>
      <returns> If the service exists with T type it returns this, otherwise return null.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.OnClientConnect(Ozeki.MediaGateway.IClient,System.Object[])">
      <summary>
            Overrideable method for indicates a client connection. You can extends functionality if you override this method in your class.
            </summary>
      <param name="client">That client reference who call this method.</param>
      <param name="parameters">Optional parameters.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.OnClientDisconnect(Ozeki.MediaGateway.IClient)">
      <summary>
            Overrideable method for indicates a client disconnection. You can extends functionality if you override this method in your class.
            </summary>
      <param name="client">That client reference who call this method.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.OnStreamPublishStart(Ozeki.MediaGateway.IClient,Ozeki.MediaGateway.IMediaStream)">
      <summary>
            Overrideable method for indicates the client starts publish his IMediastream.
            </summary>
      <param name="client">That client reference who call this method.</param>
      <param name="mediaStream">Published IMediaStream</param>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.OnStreamClose(Ozeki.MediaGateway.IClient,Ozeki.MediaGateway.IMediaStream)">
      <summary>
            Overrideable method for indicates the client close his IMediaStream.
            </summary>
      <param name="client">That client reference who call this method.</param>
      <param name="mediaStream">Closed IMediaStream</param>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.CanPublishStream(Ozeki.MediaGateway.IClient,System.String)">
      <summary>
            Adjustable to a given client can publish to stream.
            </summary>
      <param name="client">That client reference who call this method.</param>
      <param name="streamName">Unique stream identifier.</param>
      <returns>If the operation is success returns true otherwise false.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.MediaGateway.CanPlayStream(Ozeki.MediaGateway.IClient,Ozeki.MediaGateway.IMediaStream)">
      <summary>
            Overrideable method for checks whether the client can play the stream.
            </summary>
      <param name="client">That client reference who call this method.</param>
      <param name="mediaStream">
      </param>
      <returns>If the operation is success returns true otherwise false.</returns>
    </member>
    <member name="P:Ozeki.MediaGateway.MediaGateway.ConnectedClients">
      <summary>
            Returns the connected client reference list.
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Config.MediaGatewayConfig">
      <summary>
            Configuration class for MediaGateway.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Config.MediaGatewayConfig.AddConfigElement(System.Configuration.ConfigurationElement)">
      <summary>
            Adds a config element to the configuration.
            </summary>
      <param name="configElement">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Ozeki.MediaGateway.Config.MediaGatewayConfig.ConfigElements">
      <summary>
            Returns the added configuration elements list.
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Silverlight.SilverlightClient.Keepalive">
      <summary>
            Ezt kell a szerver oldalon hívni
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Silverlight.SilverlightClient.InvokeMethod(System.String,System.Object[])">
      <summary>
            Method for invoke extendes service functions.
            </summary>
      <param name="methodName">&gt;Extended service method name.</param>
      <param name="parameters">Optional parameters only support ASObject and value types.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.Silverlight.SilverlightClient.Close">
      <summary>
            Close connection.
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Provider.Silverlight.SilverlightClient.ClientType">
      <summary>
            Gets the connected client type
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Data.DataType">
      <summary>
            An enum for Mediagateway data types
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.DataType.Audio">
      <summary>
            Audio data type
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.Data.DataType.Video">
      <summary>
            Video data type
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.IStreamContainer.TryAddStream(Ozeki.MediaGateway.IMediaStream)">
      <summary>
      </summary>
      <param name="mediaStream">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.IStreamContainer.TryRemoveStream(Ozeki.MediaGateway.IMediaStream)">
      <summary>
      </summary>
      <param name="mediaStream">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.WindowPhone.WindowsPhoneClient.Keepalive">
      <summary>
            Ezt kell a szerver oldalon hívni
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Provider.WindowPhone.WindowsPhoneClient.Close">
      <summary>
            Close connection.
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Provider.WindowPhone.WPNetworksPackets.WPPacket.PacketLength">
      <summary>
            Packet whole length
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Provider.WindowPhone.WPNetworksPackets.WPPacket.PacketType">
      <summary>
            A PDU típusának azonosítója
            </summary>
    </member>
    <member name="P:Ozeki.MediaGateway.Provider.WindowPhone.WPNetworksPackets.WPPacket.SeqNumber">
      <summary>
            Sequence number
            </summary>
    </member>
    <member name="T:Ozeki.MediaGateway.Service.IStreamService">
      <summary>
            Interface for stream services. 
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Service.IStreamService.CreateStream(System.String)">
      <summary>
            A létrehozott streamre, a csatlakozott kliensek feltudnak iratkozni, ezáltal megkapják a stream állapotváltozásait. 
            </summary>
      <param name="name">Unique stream identifier.</param>
      <returns>Returns the created stream.</returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Service.IStreamService.RemoveStream(Ozeki.MediaGateway.IMediaStream)">
      <summary>
            Remove the given stream from stream service.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.StreamContainer.TryAddStream(Ozeki.MediaGateway.IMediaStream)">
      <summary>
      </summary>
      <param name="mediaStream">
      </param>
    </member>
    <member name="M:Ozeki.MediaGateway.StreamContainer.TryRemoveStream(Ozeki.MediaGateway.IMediaStream)">
      <summary>
      </summary>
      <param name="mediaStream">
      </param>
    </member>
    <member name="T:Ozeki.MediaGateway.StreamState">
      <summary>
            An enum for media stream states
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PlayingStarted">
      <summary>
            Media stream playing has started
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PlayingFailed">
      <summary>
            Media stream playing has been failed
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PlayingDenied">
      <summary>
            Media stream playing has been denied
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PlayingStopped">
      <summary>
            Media stream playing has stopped
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PublishingSuccess">
      <summary>
            Media stream publishing has been succeeded
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PublishingFailed">
      <summary>
            Media stream publishing has been failed
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.PublishingDenied">
      <summary>
            MEdia stream publishing has been denied
            </summary>
    </member>
    <member name="F:Ozeki.MediaGateway.StreamState.StreamClosed">
      <summary>
            MEdia stream has been closed
            </summary>
    </member>
    <member name="M:Ozeki.MediaGateway.Streams.FlashStreamListener.PacketReceived(FluorineFx.Messaging.Api.Stream.IBroadcastStream,FluorineFx.Messaging.Api.Stream.IStreamPacket)">
      <summary>
            Notification that a packet has been received from a stream.
            </summary>
      <param name="stream">The stream the packet has been received for.</param>
      <param name="packet">The packet received.</param>
    </member>
    <member name="M:Ozeki.MediaGateway.Util.StaticDependencyContainer.Resolve``1">
      <summary>
            Ki akarnak kérdezni egy adott típusú függőséget.
            Ha a függőség nincs benne a rendszerben, akkor excpetion -t dob (és ez jól van így, nem szabad elfedni a hibákat).
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Ozeki.MediaGateway.Util.StaticDependencyContainer.AddDependency``1(System.Func{System.Object},System.Boolean)">
      <summary>
            Hozzáadunk egy újabb függőséget.
            Az isSingleton értéke határozza meg, hogy mindig létrehozzunk egy adott nevű függőséget vagy 
            </summary>
    </member>
    <member name="M:Ozeki.IPPWrapper.ImageResizer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>