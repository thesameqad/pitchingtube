@model PitchingTube.Models.RegisterModel

@{
    ViewBag.Title = "Register";
}

<h2>Create a New Account</h2>
<p>
    Use the form below to create a new account. 
</p>
<p>
    Passwords are required to be a minimum of @Membership.MinRequiredPasswordLength characters in length.
</p>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("Register","Account",FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true, "Account creation was unsuccessful. Please correct the errors and try again.")
    <div>
        <fieldset>
            <legend>Account Information</legend>

            <div class="editor-label">
                @Html.LabelFor(m => m.UserName)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.UserName)
                @Html.ValidationMessageFor(m => m.UserName)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Email)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Email)
                @Html.ValidationMessageFor(m => m.Email)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Password)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.Password)
                @Html.ValidationMessageFor(m => m.Password)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.ConfirmPassword)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.ConfirmPassword)
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Skype)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Skype)
                @Html.ValidationMessageFor(m => m.Skype)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Phone)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Phone)
                @Html.ValidationMessageFor(m => m.Phone)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Role)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(m => m.Role, Model.Roles)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.AvatarPath)
            </div>
            <div class="editor-field">
                <input type="file" name="fileUpload" id="fileUpload" onchange="readURL(this)" />
                @if (!string.IsNullOrWhiteSpace(Model.AvatarPath))
                {
                    <img id="avatarPreview" src="@Model.AvatarPath"/>
                    <input type="hidden" name="AvatarPath" id="AvatarPath" value="@Model.AvatarPath"/>
                }
            </div>

            <p>
                <input type="submit" value="Register New User" />
                @if (!Facebook.Web.FacebookWebContext.Current.IsAuthenticated())
                {
                    <fb:login-button scope="email" ></fb:login-button>
                }

            </p>
        </fieldset>
    </div>
    
    <script type="text/javascript">
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#avatarPreview').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
}
