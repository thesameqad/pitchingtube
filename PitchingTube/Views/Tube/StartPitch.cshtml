@using PitchingTube.Models

@{
    ViewBag.Title = "StartPitch";
}

<script src="http://staging.tokbox.com/v0.91/js/TB.min.js" ></script>

<div class="containerPitch">
        <table >
            <tr class="Tr">
                <td class="time" >
                    <div id="time">00:00</div>
                    <div class="question" id="timeStatus"></div>
                </td>
                <td class="video" rowspan="5" >
                <div id="videoPanel" style="display: block"></div>
                    @*<img src="@Url.Content("/Content/img/Video.png")" alt="" /> *@
                </td>
               <td class="investor">
                    CURRENT <br/> @ViewBag.CurrentPartner.Role <br />
                    <img src="@ViewBag.CurrentPartner.AvatarPath" alt="" width="90" />
                    <input type="button" id="SC" class="ShareContactButton" name="ShareContactsButton" value="Share Contacts"/>
                    </td>
                <td class="style3">@ViewBag.CurrentPartner.Name @ViewBag.CurrentPartner.Description>
                      <div id="Contacts" style="margin: 0 auto; text-align: center; font-size: 25px;display: none;"></div>
                </td>
            </tr>
            @Html.Partial("History", ((IEnumerable<UserInfo>)ViewBag.History))
            </table>

            @Html.Partial("Live", ((List<UserInfo>)ViewBag.CurrentPairs))

</div>

<div id="pitchingDialog">
    <div id="initializing">
        <div class="Preloader">
            <img src="@Url.Content("/Content/img/loading.gif")" alt="" />
        </div>
        <p class="Searching">Initializing Video.</p>
        <p class="Minutes">The conversation will be started shortly.</p>
    </div>
    <div class="alertStart" id="nextParticipant" style="margin: 0 auto; text-align: center; font-size: 25px;
	                                                                                                                                                                                                                          display: none">
     
    </div>
</div>

<div id="waitOfflainUserDialog">
    Your partner is off-line.
</div>

<div id="waitUserDialog">
    Your partner is not ready yet.
</div>

<script type="text/javascript">
    
    var stopTime = true;
    var waitTime = 0;

    var statusArray = new Array(
            { time: 120, status: "Sharing idea" },
            { time: 60, status: "Asking questions" },
            { time: 20, status: "Exchanging contacts" }
        );

        $(document).ready(function () {
           // alert("time");
            $('#time').text("02:00");
            $('#timeStatus').text(statusArray[0].status);

            timer = setInterval(function () {
            if(!stopTime){
                $.getJSON("/Tube/GetCurrentTimePitch?partnerId=@ViewBag.CurrentPartner.UserId",
                    function(x) {
                       // alert(x.leftTime);

                        var seconds = 120 - x.leftTime;
                        var minutes = 0;
                        for (var j=0; j<2; j++) {
                            if(seconds - 60 >= 0) {
                                minutes += 1;
                                seconds = seconds - 60;
                            } else {
                                break;
                            }
                            
                        }

                        $('#time').text("0" + minutes + ":" + (seconds - 10 < 0 ? "0" : "") + seconds);

                        var currentTime = minutes * 60 + seconds;

                        for (var i = 0; i < statusArray.length; i++) {
                            if (currentTime == statusArray[i].time)
                                $('#timeStatus').text(statusArray[i].status);
                        }

                        if (currentTime == 0) {
                            clearInterval(timer);
                            newRound();
                        }
                        
//                        $.getJSON("/Tube/IsPatrtnerOnline?partnerId=",
//                            function(x) {
//                                if(x.isOnline)
//                                    $('#waitOfflainUserDialog').dialog("close");
//                                else 
//                                    $('#waitOfflainUserDialog').dialog("open");
//                       
//                            });
                    });

                

            } 
            $.getJSON("/Tube/IsSecondReady?partnerId=@ViewBag.CurrentPartner.UserId",
                function(x) {
                    if(!x.isReady) {
                        waitTime += 1;
                        $('#waitUserDialog').dialog("open");
                        if(waitTime >= 120)
                            newRound();
                    }
                    else {
                        $('#waitUserDialog').dialog("close");
                        waitTime = 0;
                    }
                });
                   
            }, 1000);
       });
        
        $("#SC").bind("click", function() {
            $.getJSON("/Tube/ShareContacts?tubeid=" + @ViewBag.TubeId, function(x) {
                $("#Contacts").html("Email:" + x.Email + "<br/>Skype:"+ x.Skype + "<br/>Phone:" + x.Phone).show();
                
            });
        });
        

    $('#waitOfflainUserDialog').dialog({
        autoOpen: false,
        modal: true,
        resizable: false
    });
    
    $('#waitUserDialog').dialog({
        autoOpen: false,
        modal: true,
        resizable: false
    });

    function newRound()
    {
        var i = 10;
        $("#initializing").hide();
        $("#nextParticipant").show();
        $('#pitchingDialog').dialog("open");
        var timer2 = setInterval(function () {
            i--;
            $(".alertStart").text("Next conversation will be started in " + i + " seconds").show();
            if (i == 0) {
                clearInterval(timer2);
                $.post('/Tube/SetTubeMode?mode=@ViewBag.NextMode', function() {
                    alert("next mode is @ViewBag.NextMode")
                    window.location.href="/Tube/StartPitch";
                });
            }
        }, 1000);

    } 


    //openTok

    var sessionId = '@ViewData["sessionId"]';
    $(document).ready(function () {
        connect();
        
        $("#initializing").show();
        $("#nextParticipant").hide();
        $('#pitchingDialog').dialog("open");
    })


    $('#pitchingDialog').dialog({
        autoOpen: false,
        modal: true,
        resizable: false
    });

    var apiKey = '17048601'; // OpenTok sample code key. Replace with your own API key.

    // var sessionId = "1sdemo00955f8290f8efa648d9347d718f7e06fd"; // Replace with your session ID.
    var token = "moderator_token"; // Should not be hard-coded. Add to the page using the OpenTok server-side libraries.
    var subscribers = {};
    var session;
    var publisher;

    // Un-comment either of the following to set automatic logging and exception handling.
    // See the exceptionHandler() method below.
    // TB.setLogLevel(TB.DEBUG);
    TB.addEventListener("exception", exceptionHandler);

    if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
        alert("You don't have the minimum requirements to run this application."
				  + "Please upgrade to the latest version of Flash.");
    } else {
        session = TB.initSession(sessionId);

        // Add event listeners to the session
        session.addEventListener("sessionConnected", sessionConnectedHandler);
        session.addEventListener("streamCreated", streamCreatedHandler);
        session.addEventListener("streamDestroyed", streamDestroyedHandler);
        session.addEventListener("streamPropertyChanged", streamPropertyChangedHandler);
    }

    //--------------------------------------
    //  OPENTOK EVENT HANDLERS
    //--------------------------------------
    function sessionConnectedHandler(event) {
        subscribeToStreams(event.streams);

        startPublishing();
        stopTime = false;
        $('#pitchingDialog').dialog("close");
        $.get("/Tube/SetStartPitchTime?partnerId=@ViewBag.CurrentPartner.UserId");
    }

    function startPublishing() {
        if (!publisher) {
            var containerDiv = document.createElement('div');
            containerDiv.className = "subscriberContainer";
            containerDiv.setAttribute('id', 'opentok_publisher');
            containerDiv.style.float = "left";
            var videoPanel = document.getElementById("videoPanel");
            videoPanel.appendChild(containerDiv);

            var publisherDiv = document.createElement('div'); // Create a div for the publisher to replace
            publisherDiv.setAttribute('id', 'replacement_div')
            containerDiv.appendChild(publisherDiv);

            var publisherProperties = new Object();
            
            publisherProperties.publishVideo = true;
            publisherProperties.publishAudio = true;
            publisherProperties.width = 690;
            publisherProperties.height = 410;

            publisher = session.publish(publisherDiv.id, publisherProperties);
        }
    }

    var subscriber_width = [120, 160, 220];
    var subscriber_height = [90, 120, 165];

    function streamCreatedHandler(event) {
        subscribeToStreams(event.streams);
    }

    function streamDestroyedHandler(event) {

    }

    function streamPropertyChangedHandler(event) {
    }

    function exceptionHandler(event) {
        alert("Exception: " + event.code + "::" + event.message);
    }

    //--------------------------------------
    //  LINK CLICK HANDLERS
    //--------------------------------------

    function connect() {
        session.connect(apiKey, token);
    }

    function disconnect() {
        session.disconnect();
    }


    //--------------------------------------
    //  HELPER METHODS
    //--------------------------------------
    function subscribeToStreams(streams) {
        for (i = 0; i < streams.length; i++) {
            var stream = streams[i];
            if (stream.connection.connectionId != session.connection.connectionId) {
                session.subscribe(stream);
            }
        }
    }

    //--------------------------------------
    //  UTILITY METHODS
    //--------------------------------------
    function show(id) {
        document.getElementById(id).style.display = 'block';
    }

    function hide(id) {
        document.getElementById(id).style.display = 'none';
    }

</script>
